rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Rules for user-specific files (e.g., profile pictures, resumes)
    // Here, {userId} is a wildcard that captures the user's ID from the path.
    match /users/{userId}/{allPaths=**} {
      // Any authenticated user can read any other user's public files.
      allow read: if request.auth != null;
      
      // A user can only write to their own folder.
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
<<<<<<< HEAD
    match /{allPaths=**} {
      allow read;
    }

    match /traditional-tests/{userId}/{allPaths=**} {
      allow write: if request.auth != null && request.auth.uid == userId;
=======
    // Rules for Traditional Skill Tests uploaded by employers
    // Path: /tradTest/{employerId}/{fileName}
    match /tradTest/{employerId}/{allPaths=**} {
       // ALLOW WRITE: An authenticated user who is an employer can write to their own folder.
       allow write: if request.auth != null && 
                       request.auth.uid == employerId &&
                       firestore.exists(/databases/(default)/documents/employers/$(request.auth.uid));

      // ALLOW READ: Any authenticated user can read these files (e.g., candidates downloading them)
      allow read: if request.auth != null;
    }

    // Rules for test submissions uploaded by candidates
    // Path: /test-submissions/{postId}/{candidateId}/{fileName}
    match /test-submissions/{postId}/{candidateId}/{allPaths=**} {
      // ALLOW WRITE: A user can only write to their own submission path.
      allow write: if request.auth != null && request.auth.uid == candidateId;

      // ALLOW READ: Only the candidate who submitted or the employer who owns the post can read.
      allow read: if request.auth != null && 
                    (request.auth.uid == candidateId || 
                     firestore.exists(/databases/(default)/documents/jobs/$(postId)) && firestore.get(/databases/(default)/documents/jobs/$(postId)).data.employerId == request.auth.uid ||
                     firestore.exists(/databases/(default)/documents/internships/$(postId)) && firestore.get(/databases/(default)/documents/internships/$(postId)).data.employerId == request.auth.uid);
>>>>>>> origin/main
    }
    
    match /submissions/{postId}/{candidateId}/{fileName} {
      allow write: if request.auth != null && request.auth.uid == candidateId;
    }
  }
}

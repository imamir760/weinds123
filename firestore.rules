/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and an employer-ownership model for job and internship postings. Public read access
 * is granted for job and internship listings, while write access is restricted to owners.
 * Applications are publicly readable and only creatable.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profiles, accessible only to the owning user.
 * - /employers/{userId}: Employer profiles, accessible only to the owning user.
 * - /institutes/{userId}: Institute profiles, accessible only to the owning user.
 * - /jobs/{jobId}: Job postings, publicly readable, writable only by the owning employer.
 * - /internships/{internshipId}: Internship postings, publicly readable, writable only by the owning employer.
 * - /applications/{applicationId}: Applications, publicly readable, creatable by anyone.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Job and internship listings are publicly readable to maximize visibility.
 * - Strict ownership is enforced for profile data to protect user privacy.
 *
 * Denormalization for Authorization:
 * - Jobs and internships MUST include an `employerId` field to enable ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure candidate profiles. Only the authenticated user can read, update, or delete their own profile.
     * @path /candidates/{userId}
     * @allow (get, list, create, update, delete) if the request is made by the user with ID {userId}.
     * @deny (get, list, create, update, delete) if the request is made by a different user.
     * @principle Enforces document ownership for all operations on candidate profiles.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource.data.email == request.auth.token.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure employer profiles. Only the authenticated user can read, update, or delete their own profile.
     * @path /employers/{userId}
     * @allow (get, list, create, update, delete) if the request is made by the user with ID {userId}.
     * @deny (get, list, create, update, delete) if the request is made by a different user.
     * @principle Enforces document ownership for all operations on employer profiles.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource.data.email == request.auth.token.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure institute profiles. Only the authenticated user can read, update, or delete their own profile.
     * @path /institutes/{userId}
     * @allow (get, list, create, update, delete) if the request is made by the user with ID {userId}.
     * @deny (get, list, create, update, delete) if the request is made by a different user.
     * @principle Enforces document ownership for all operations on institute profiles.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource.data.tpoEmail == request.auth.token.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allow public read access to job postings, but restrict creation, updates, and deletion to the owning employer.
     * @path /jobs/{jobId}
     * @allow get, list: if true;
     * @allow create: if request.resource.data.employerId == request.auth.uid;
     * @allow update: if isExistingOwner(resource.data.employerId);
     * @allow delete: if isExistingOwner(resource.data.employerId);
     * @principle Allows public visibility of job postings while enforcing employer ownership for modifications.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Allow public read access to internship postings, but restrict creation, updates, and deletion to the owning employer.
     * @path /internships/{internshipId}
     * @allow get, list: if true;
     * @allow create: if request.resource.data.employerId == request.auth.uid;
     * @allow update: if isExistingOwner(resource.data.employerId);
     * @allow delete: if isExistingOwner(resource.data.employerId);
     * @principle Allows public visibility of internship postings while enforcing employer ownership for modifications.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Allows public read access to applications.
     * @path /applications/{applicationId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @deny update, delete: if false;
     * @principle Publicly readable applications, creatable by anyone, immutable after creation.
     */
    match /applications/{applicationId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}
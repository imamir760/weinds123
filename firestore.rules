/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for profiles and applications,
 * while allowing public read access to job and internship postings. Employers
 * have full control over their own job/internship postings and associated applicant
 * data.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profiles, owned by the user.
 * - /candidates/{userId}/jobApplications/{jobId}: Job applications submitted by the candidate.
 * - /candidates/{userId}/internshipApplications/{internshipId}: Internship applications submitted by the candidate.
 * - /employers/{userId}: Employer profiles, owned by the user.
 * - /institutes/{userId}: Institute profiles, owned by the user.
 * - /jobs/{jobId}: Publicly readable job postings, owned by the employer who created them.
 * - /jobs/{jobId}/applicants/{candidateId}: Applicants for a specific job, managed by the employer.
 * - /internships/{internshipId}: Publicly readable internship postings, owned by the employer who created them.
 * - /internships/{internshipId}/applicants/{candidateId}: Applicants for a specific internship, managed by the employer.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Employers can only manage their own job and internship postings and applicant data.
 * - Public read access is granted to job and internship postings to maximize visibility.
 * - Listing of job applications and applicant subcollections is restricted to the owner.
 *
 * Denormalization for Authorization:
 * - Job and Internship documents have an `employerId` field, allowing rules to quickly verify ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a candidate to manage their own profile.
     * @path /candidates/{userId}
     * @allow (create, update, delete) - User with UID 'user123' can create, update, or delete their own profile at /candidates/user123.
     * @deny (create, update, delete) - User with UID 'user456' cannot modify profile at /candidates/user123.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a candidate to manage their job applications.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create, update, delete) - User 'user123' can create, update, or delete an application under /candidates/user123/jobApplications/job456.
     * @deny (create, update, delete) - User 'user456' cannot modify applications under /candidates/user123/jobApplications/job456.
     * @principle Restricts access to a user's own data tree.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a candidate to manage their internship applications.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (create, update, delete) - User 'user123' can create, update, or delete an application under /candidates/user123/internshipApplications/intern456.
     * @deny (create, update, delete) - User 'user456' cannot modify applications under /candidates/user123/internshipApplications/intern456.
     * @principle Restricts access to a user's own data tree.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows an employer to manage their own profile.
     * @path /employers/{userId}
     * @allow (create, update, delete) - Employer with UID 'employer123' can create, update, or delete their own profile at /employers/employer123.
     * @deny (create, update, delete) - User with UID 'user456' cannot modify profile at /employers/employer123.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows an institute to manage their own profile.
     * @path /institutes/{userId}
     * @allow (create, update, delete) - Institute with UID 'institute123' can create, update, or delete their own profile at /institutes/institute123.
     * @deny (create, update, delete) - User with UID 'user456' cannot modify profile at /institutes/institute123.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to job postings, but restricts writes to the owner.
     * @path /jobs/{jobId}
     * @allow (get, list) - Any user can read job postings.
     * @allow (create) - Employer 'employer123' can create a job posting with employerId: 'employer123'.
     * @allow (update, delete) - Employer 'employer123' can update or delete their own job posting at /jobs/job456.
     * @deny (create) - User attempts to create a job posting with a mismatched employerId.
     * @deny (update, delete) - User attempts to update or delete a job posting they don't own.
     * @principle Allows public read with owner-only writes, validates ownership on create, and verifies existence on update/delete.
     */
    match /jobs/{jobId} {
        allow get: if true;
        allow list: if true;
        allow create: if request.auth != null && request.resource.data.employerId == request.auth.uid;
        allow update: if request.auth != null && resource.data.employerId == request.auth.uid;
        allow delete: if request.auth != null && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Allows an employer to manage applicants for their job postings.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (get, list, create, update, delete) - Employer 'employer123' can manage applicants under /jobs/job456/applicants.
     * @deny (get, list, create, update, delete) - User 'user456' cannot manage applicants under /jobs/job456/applicants.
     * @principle Enforces employer ownership for managing applicants.
     */
    match /jobs/{jobId}/applicants/{candidateId} {
       function getJobEmployerId() {
            return get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId;
        }

        allow get: if request.auth != null && getJobEmployerId() == request.auth.uid;
        allow list: if false;
        allow create: if request.auth != null && getJobEmployerId() == request.auth.uid;
        allow update: if request.auth != null && getJobEmployerId() == request.auth.uid;
        allow delete: if request.auth != null && getJobEmployerId() == request.auth.uid;
    }

    /**
     * @description Allows public read access to internship postings, but restricts writes to the owner.
     * @path /internships/{internshipId}
     * @allow (get, list) - Any user can read internship postings.
     * @allow (create) - Employer 'employer123' can create an internship posting with employerId: 'employer123'.
     * @allow (update, delete) - Employer 'employer123' can update or delete their own internship posting at /internships/intern456.
     * @deny (create) - User attempts to create an internship posting with a mismatched employerId.
     * @deny (update, delete) - User attempts to update or delete an internship posting they don't own.
     * @principle Allows public read with owner-only writes, validates ownership on create, and verifies existence on update/delete.
     */
    match /internships/{internshipId} {
        allow get: if true;
        allow list: if true;
        allow create: if request.auth != null && request.resource.data.employerId == request.auth.uid;
        allow update: if request.auth != null && resource.data.employerId == request.auth.uid;
        allow delete: if request.auth != null && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Allows an employer to manage applicants for their internship postings.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (get, list, create, update, delete) - Employer 'employer123' can manage applicants under /internships/intern456/applicants.
     * @deny (get, list, create, update, delete) - User 'user456' cannot manage applicants under /internships/intern456/applicants.
     * @principle Enforces employer ownership for managing applicants.
     */
    match /internships/{internshipId}/applicants/{candidateId} {
       function getInternshipEmployerId() {
            return get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId;
        }

        allow get: if request.auth != null && getInternshipEmployerId() == request.auth.uid;
        allow list: if false;
        allow create: if request.auth != null && getInternshipEmployerId() == request.auth.uid;
        allow update: if request.auth != null && getInternshipEmployerId() == request.auth.uid;
        allow delete: if request.auth != null && getInternshipEmployerId() == request.auth.uid;
    }
  }
}
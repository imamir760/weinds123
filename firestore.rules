/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for profiles and allows public read access
 * to job and internship postings while restricting write access to the respective owners (employers).
 *
 * Data Structure:
 * - User profiles are stored in collections named 'candidates', 'employers', and 'institutes',
 *   each using the user's UID as the document ID.
 * - Job postings are stored in the 'jobs' collection. Each job posting has an 'employerId'
 *   field indicating the owner.
 * - Internship postings are stored in the 'internships' collection. Each internship posting has an 'employerId'
 *   field indicating the owner.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Job and internship postings are publicly readable, but only the owning employer can create,
 *   update, or delete them.
 * - Listing of user profiles is disallowed to prevent unauthorized data access.
 *
 * Denormalization for Authorization:
 * - Job and Internship documents MUST contain an `employerId` field to enable secure write rules
 *   based on ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects candidate profiles. Only the authenticated user can read/write their own profile.
     * @path /candidates/{userId}
     * @allow (create, update, get) - User 'A' with UID 'A' can create/update/get their profile at /candidates/A.
     * @deny (create, update, get) - User 'A' with UID 'A' cannot create/update/get the profile at /candidates/B.
     * @deny (delete, list) - No one can delete or list candidate profiles.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Protects employer profiles. Only the authenticated user can read/write their own profile.
     * @path /employers/{userId}
     * @allow (create, update, get) - User 'A' with UID 'A' can create/update/get their profile at /employers/A.
     * @deny (create, update, get) - User 'A' with UID 'A' cannot create/update/get the profile at /employers/B.
     * @deny (delete, list) - No one can delete or list employer profiles.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Protects institute profiles. Only the authenticated user can read/write their own profile.
     * @path /institutes/{userId}
     * @allow (create, update, get) - User 'A' with UID 'A' can create/update/get their profile at /institutes/A.
     * @deny (create, update, get) - User 'A' with UID 'A' cannot create/update/get the profile at /institutes/B.
     * @deny (delete, list) - No one can delete or list institute profiles.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Allows public read access to job postings, but restricts write access to the owner (employer).
     * @path /jobs/{jobId}
     * @allow (get, list) - Any user can read or list all job postings.
     * @allow (create) - Employer 'A' with UID 'A' can create a job posting where request.resource.data.employerId == 'A'.
     * @allow (update, delete) - Employer 'A' with UID 'A' can update/delete a job posting where resource.data.employerId == 'A'.
     * @deny (create, update, delete) - Employer 'A' with UID 'A' cannot create a job posting where request.resource.data.employerId == 'B', or update/delete a job posting where resource.data.employerId == 'B'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

     /**
      * @description Allows public read access to internship postings, but restricts write access to the owner (employer).
      * @path /internships/{internshipId}
      * @allow (get, list) - Any user can read or list all internship postings.
      * @allow (create) - Employer 'A' with UID 'A' can create an internship posting where request.resource.data.employerId == 'A'.
      * @allow (update, delete) - Employer 'A' with UID 'A' can update/delete an internship posting where resource.data.employerId == 'A'.
      * @deny (create, update, delete) - Employer 'A' with UID 'A' cannot create an internship posting where request.resource.data.employerId == 'B', or update/delete an internship posting where resource.data.employerId == 'B'.
      * @principle Enforces document ownership for writes, allows public reads.
      */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    function isExistingOwner(ownerId) {
    return isSignedIn() && request.auth.uid == ownerId && resource != null;
  }
}
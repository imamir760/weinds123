/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant data model where users (candidates, employers, and TPOs)
 * have ownership over their respective profiles and data. Employers have ownership over job postings.
 * Access to application data is controlled based on user roles and explicit authorization checks.
 *
 * Data Structure:
 * - /candidates/{candidateId}: Candidate profile information.
 * - /employers/{employerId}: Employer profile information.
 * - /institutes/{instituteId}: Institute profile information for TPOs.
 * - /jobs/{jobId}: Job postings created by employers.
 * - /internships/{internshipId}: Internship postings created by employers.
 * - /applications/{applicationId}: Job and internship applications submitted by candidates.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Employers can create, update, and delete their own job postings.
 * - Applications can be created by candidates for specific jobs or internships.
 * - List operations are generally restricted to owners, unless explicitly public.
 *
 * Denormalization for Authorization:
 * - To avoid costly `get()` calls, the `Application` documents include `candidateId`, `employerId`, and `postId` which are used to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows candidates to manage their own profile data.
     * @path /candidates/{userId}
     * @allow (get, list) if isSignedIn() && isOwner(userId)
     * @allow (create, update, delete) if isSignedIn() && isOwner(userId)
     * @deny (create, update, delete) if !isSignedIn() || !isOwner(userId)
     * @principle Enforces document ownership for profile management.
     */
    match /candidates/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.email == request.auth.token.email;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.email == request.auth.token.email;
    }

    /**
     * @description Allows employers to manage their own profile data.
     * @path /employers/{userId}
     * @allow (get, list) if isSignedIn() && isOwner(userId)
     * @allow (create, update, delete) if isSignedIn() && isOwner(userId)
     * @deny (create, update, delete) if !isSignedIn() || !isOwner(userId)
     * @principle Enforces document ownership for profile management.
     */
    match /employers/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.email == request.auth.token.email;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.email == request.auth.token.email;
    }

    /**
     * @description Allows institutes to manage their own profile data.
     * @path /institutes/{userId}
     * @allow (get, list) if isSignedIn() && isOwner(userId)
     * @allow (create, update, delete) if isSignedIn() && isOwner(userId)
     * @deny (create, update, delete) if !isSignedIn() || !isOwner(userId)
     * @principle Enforces document ownership for profile management.
     */
    match /institutes/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows employers to manage their own job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) if true;
     * @allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
     * @allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
     * @allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
     * @deny (create, update, delete) if !isSignedIn() || request.resource.data.employerId != request.auth.uid
     * @principle Enforces document ownership for job postings.
     */
    match /jobs/{jobId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId) && resource.data.employerId == request.resource.data.employerId;
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId) && resource.data.employerId == request.resource.data.employerId;
    }

    /**
     * @description Allows employers to manage their own internship postings.
     * @path /internships/{internshipId}
     * @allow (get, list) if true;
     * @allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
     * @allow update: if isSignedIn() && isExistingOwner(resource.data.employerId) && resource.data.employerId == request.resource.data.employerId;
     * @allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId) && resource.data.employerId == request.resource.data.employerId;
     * @deny (create, update, delete) if !isSignedIn() || request.resource.data.employerId != request.auth.uid
     * @principle Enforces document ownership for internship postings.
     */
    match /internships/{internshipId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId) && resource.data.employerId == request.resource.data.employerId;
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId) && resource.data.employerId == request.resource.data.employerId;
    }

    /**
     * @description Allows candidates to create applications for jobs and internships,
     *              and allows employers and candidates to view their own applications.
     * @path /applications/{applicationId}
     * @allow (get, list) if isSignedIn() && (isOwner(resource.data.candidateId) || isOwner(resource.data.employerId))
     * @allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
     * @allow update: if isSignedIn() && (isExistingOwner(resource.data.candidateId) || isExistingOwner(resource.data.employerId)); // Only owner can update
     * @allow delete: if isSignedIn() && (isExistingOwner(resource.data.candidateId) || isExistingOwner(resource.data.employerId)); // Only owner can delete
     * @deny (create, update, delete) if !isSignedIn() || request.resource.data.candidateId != request.auth.uid
     * @principle Enforces document ownership for applications.
     */
    match /applications/{applicationId} {
      allow get, list: if isSignedIn() && (isOwner(resource.data.candidateId) || isOwner(resource.data.employerId));
      allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
      allow update: if isSignedIn() && (isExistingOwner(resource.data.candidateId) || isExistingOwner(resource.data.employerId));
      allow delete: if isSignedIn() && (isExistingOwner(resource.data.candidateId) || isExistingOwner(resource.data.employerId));
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}
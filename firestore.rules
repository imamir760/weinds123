/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system,
 *              primarily based on user authentication and document ownership.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profiles, accessible only to the owning user.
 * - /candidates/{userId}/jobApplications/{jobId}: Job applications submitted by a candidate.
 * - /candidates/{userId}/internshipApplications/{internshipId}: Internship applications submitted by a candidate.
 * - /employers/{userId}: Employer profiles, accessible only to the owning user.
 * - /institutes/{userId}: Institute profiles, accessible only to the owning user.
 * - /jobs/{jobId}: Publicly readable job postings, writable only by the owning employer.
 * - /jobs/{jobId}/applicants/{candidateId}: Applicants for a job, writable by both candidates and employers (for status updates).
 * - /internships/{internshipId}: Publicly readable internship postings, writable only by the owning employer.
 * - /internships/{internshipId}/applicants/{candidateId}: Applicants for an internship, writable by both candidates and employers (for status updates).
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Job and internship postings are publicly readable but only the creating employer can modify them.
 * - Application status updates are allowed by both the candidate and the employer to facilitate collaboration.
 * - Data consistency is enforced by validating the `userId` in the path matches the `id` field in the document on creation.
 * - Listing of user profiles is disallowed for privacy reasons.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Candidate profile access control.
     * @path /candidates/{userId}
     * @allow (create, update, get, delete, list) User with ID 'user123' can create, update, get, or delete their own profile.
     * @deny (create, update, get, delete) User with ID 'user456' cannot access profile of user with ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Disallowing listing for privacy

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Candidate job application access control.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create, update, get, delete, list) User with ID 'user123' can create, update, get, or delete their own job applications.
     * @deny (create, update, get, delete) User with ID 'user456' cannot access job applications of user with ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Candidate internship application access control.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (create, update, get, delete, list) User with ID 'user123' can create, update, get, or delete their own internship applications.
     * @deny (create, update, get, delete) User with ID 'user456' cannot access internship applications of user with ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Employer profile access control.
     * @path /employers/{userId}
     * @allow (create, update, get, delete, list) User with ID 'user123' can create, update, get, or delete their own profile.
     * @deny (create, update, get, delete) User with ID 'user456' cannot access profile of user with ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Disallowing listing for privacy

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Institute profile access control.
     * @path /institutes/{userId}
     * @allow (create, update, get, delete, list) User with ID 'user123' can create, update, get, or delete their own profile.
     * @deny (create, update, get, delete) User with ID 'user456' cannot access profile of user with ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Disallowing listing for privacy

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Job postings access control. Public read, owner-only writes.
     * @path /jobs/{jobId}
     * @allow (get, list) Any user can read or list job postings.
     * @allow (create) User with ID 'employer123' can create a job posting with employerId: 'employer123'.
     * @allow (update, delete) User with ID 'employer123' can update/delete a job posting where resource.data.employerId == 'employer123'.
     * @deny (create) User with ID 'candidate456' cannot create a job posting.
     * @deny (update, delete) User with ID 'employer456' cannot update/delete a job posting owned by 'employer123'.
     * @principle Allows public reads but restricts writes to the job posting owner.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Job applicants access control. Candidates can apply, and Employers can update status.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (create) Candidate 'candidate123' can create an application for job 'job456'.
     * @allow (update) Employer 'employer789' can update the status of candidate 'candidate123' for job 'job456'.
     * @allow (get, list) Any authenticated user can view applicant data
     * @deny (delete) No one can delete this data
     * @principle Allows candidates and employers to interact with application statuses.
     */
    match /jobs/{jobId}/applicants/{candidateId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isSignedIn() && request.auth.uid == candidateId;
      allow update: if isSignedIn();
      allow delete: if false;
    }

      /**
     * @description Internship postings access control. Public read, owner-only writes.
     * @path /internships/{internshipId}
     * @allow (get, list) Any user can read or list internship postings.
     * @allow (create) User with ID 'employer123' can create an internship posting with employerId: 'employer123'.
     * @allow (update, delete) User with ID 'employer123' can update/delete an internship posting where resource.data.employerId == 'employer123'.
     * @deny (create) User with ID 'candidate456' cannot create an internship posting.
     * @deny (update, delete) User with ID 'employer456' cannot update/delete an internship posting owned by 'employer123'.
     * @principle Allows public reads but restricts writes to the internship posting owner.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Internship applicants access control. Candidates can apply, and Employers can update status.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (create) Candidate 'candidate123' can create an application for internship 'internship456'.
     * @allow (update) Employer 'employer789' can update the status of candidate 'candidate123' for internship 'internship456'.
     * @allow (get, list) Any authenticated user can view applicant data
     * @deny (delete) No one can delete this data
     * @principle Allows candidates and employers to interact with application statuses.
     */
    match /internships/{internshipId}/applicants/{candidateId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isSignedIn() && request.auth.uid == candidateId;
      allow update: if isSignedIn();
      allow delete: if false;
    }
  }
}
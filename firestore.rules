/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model where users can only access their own profile data, while employers can manage their job and internship postings.
 *
 * Data Structure:
 * - /candidates/{userId}: Stores candidate profiles, accessible only by the corresponding user.
 * - /employers/{userId}: Stores employer profiles, accessible only by the corresponding user.
 * - /institutes/{userId}: Stores institute profiles, accessible only by the corresponding user.
 * - /jobs/{jobId}: Stores job postings, accessible to all for reading but only modifiable by the posting employer.
 * - /internships/{internshipId}: Stores internship postings, accessible to all for reading but only modifiable by the posting employer.
 *
 * Key Security Decisions:
 * - User profiles (candidate, employer, institute) are strictly private and accessible only to the authenticated user with the matching UID.
 * - Job and internship listings are publicly readable to facilitate discovery.
 * - Only the employer who created a job or internship posting can modify or delete it.
 * - Listing of user profiles (candidate, employer, institute) is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - Job and internship documents include an `employerId` field to enable efficient authorization checks for updates and deletes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the resource's employerId.
     */
    function isJobPoster(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the resource's employerId and that the document exists.
     */
    function isExistingJobPoster(employerId) {
        return isJobPoster(employerId) && resource != null;
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /candidates/{userId}
     * @allow (create) User A creates their profile at /candidates/A
     * @deny (create) User B attempts to create a profile for User A at /candidates/A
     * @principle Restricts access to a user's own data tree.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if false;
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /employers/{userId}
     * @allow (create) User A creates their profile at /employers/A
     * @deny (create) User B attempts to create a profile for User A at /employers/A
     * @principle Restricts access to a user's own data tree.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if false;
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /institutes/{userId}
     * @allow (create) User A creates their profile at /institutes/A
     * @deny (create) User B attempts to create a profile for User A at /institutes/A
     * @principle Restricts access to a user's own data tree.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.tpoEmail == request.auth.token.email;
      allow update: if isOwner(userId) && request.resource.data.tpoEmail == resource.data.tpoEmail;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to job postings but restricts modification to the posting employer.
     * @path /jobs/{jobId}
     * @allow (get, list) Any user can read job postings.
     * @allow (create) Employer A can create a job posting with employerId: A
     * @allow (update, delete) Employer A can update/delete a job posting they created.
     * @deny (update, delete) Employer B cannot modify Employer A's job posting.
     * @principle Public read access with owner-only writes.
     */
    match /jobs/{jobId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingJobPoster(resource.data.employerId);
      allow delete: if isExistingJobPoster(resource.data.employerId);
    }

    /**
     * @description Allows public read access to internship postings but restricts modification to the posting employer.
     * @path /internships/{internshipId}
     * @allow (get, list) Any user can read internship postings.
     * @allow (create) Employer A can create an internship posting with employerId: A
     * @allow (update, delete) Employer A can update/delete an internship posting they created.
     * @deny (update, delete) Employer B cannot modify Employer A's internship posting.
     * @principle Public read access with owner-only writes.
     */
    match /internships/{internshipId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingJobPoster(resource.data.employerId);
      allow delete: if isExistingJobPoster(resource.data.employerId);
    }
  }
}
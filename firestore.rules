/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for profiles and applications,
 * while allowing public read access to job and internship postings. Only the
 * posting's owner (employer) can modify them. Applicant data can only be accessed by the employer.
 *
 * Data Structure:
 * - `/candidates/{userId}`: Candidate profiles, accessible only to the owning user.
 * - `/candidates/{userId}/jobApplications/{jobId}`: Job applications, accessible only to the owning user.
 * - `/candidates/{userId}/internshipApplications/{internshipId}`: Internship applications, accessible only to the owning user.
 * - `/employers/{userId}`: Employer profiles, accessible only to the owning user.
 * - `/institutes/{userId}`: Institute profiles, accessible only to the owning user.
 * - `/jobs/{jobId}`: Job postings, publicly readable, but only modifiable by the owning employer.
 * - `/jobs/{jobId}/applicants/{candidateId}`: Applicants for a specific job, only accessible by the owning employer.
 * - `/internships/{internshipId}`: Internship postings, publicly readable, but only modifiable by the owning employer.
 * - `/internships/{internshipId}/applicants/{candidateId}`: Applicants for a specific internship, only accessible by the owning employer.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Employers can read Applicant data from their job or internship postings.
 * - Listing of job and internship postings is public.
 *
 * Denormalization for Authorization:
 *  - The `Job` and `Internship` entities both contain an `employerId` field. This is crucial for allowing
 *    us to check ownership of these postings without needing to perform additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to candidate profiles.
     * @path /candidates/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *    Request: auth.uid = 'user123', resource.data.id = 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read/update/delete their own profile.
     *    Request: auth.uid = 'user123'
     * @deny (get, update, delete) User with ID 'user456' cannot read/update/delete the profile of user 'user123'.
     *    Request: auth.uid = 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to job applications for a candidate.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create) User with ID 'user123' can create a job application under their profile.
     *    Request: auth.uid = 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read/update/delete their own job application.
     *    Request: auth.uid = 'user123'
     * @deny (get, update, delete) User with ID 'user456' cannot read/update/delete the job application of user 'user123'.
     *    Request: auth.uid = 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to internship applications for a candidate.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (create) User with ID 'user123' can create an internship application under their profile.
     *    Request: auth.uid = 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read/update/delete their own internship application.
     *    Request: auth.uid = 'user123'
     * @deny (get, update, delete) User with ID 'user456' cannot read/update/delete the internship application of user 'user123'.
     *    Request: auth.uid = 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to employer profiles.
     * @path /employers/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *    Request: auth.uid = 'user123', resource.data.id = 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read/update/delete their own profile.
     *    Request: auth.uid = 'user123'
     * @deny (get, update, delete) User with ID 'user456' cannot read/update/delete the profile of user 'user123'.
     *    Request: auth.uid = 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to institute profiles.
     * @path /institutes/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *    Request: auth.uid = 'user123', resource.data.id = 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read/update/delete their own profile.
     *    Request: auth.uid = 'user123'
     * @deny (get, update, delete) User with ID 'user456' cannot read/update/delete the profile of user 'user123'.
     *    Request: auth.uid = 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) All users can read job postings.
     *    Request: No auth required
     * @allow (create) User with ID 'employer123' can create a job posting.
     *    Request: auth.uid = 'employer123', resource.data.employerId = 'employer123'
     * @allow (update, delete) User with ID 'employer123' can update/delete their own job posting.
     *    Request: auth.uid = 'employer123', resource.data.employerId = 'employer123'
     * @deny (update, delete) User with ID 'employer456' cannot update/delete the job posting of employer 'employer123'.
     *    Request: auth.uid = 'employer456'
     * @principle Allows public read access, enforces document ownership for writes.
     */
    match /jobs/{jobId} {
      function isOwner(employerId) {
        return request.auth != null && request.auth.uid == employerId;
      }

      function isExistingOwner(employerId) {
          return isOwner(employerId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isOwner(request.resource.data.employerId);
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Controls access to applicants for a specific job.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (get, list) Employer 'employer123' can read the applicants for their job posting.
     *    Request: auth.uid = 'employer123', job.employerId = 'employer123' (via get())
     * @deny (create, update, delete) Only the system can create/update/delete applicants.
     * @principle Restricts access to the job posting owner (employer).
     */
    match /jobs/{jobId}/applicants/{candidateId} {
        function isJobOwner(jobId) {
            return get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
        }
        allow get, list: if request.auth != null && isJobOwner(jobId);
        allow create, update, delete: if false;
    }

    /**
     * @description Controls access to internship postings.
     * @path /internships/{internshipId}
     * @allow (get, list) All users can read internship postings.
     *    Request: No auth required
     * @allow (create) User with ID 'employer123' can create an internship posting.
     *    Request: auth.uid = 'employer123', resource.data.employerId = 'employer123'
     * @allow (update, delete) User with ID 'employer123' can update/delete their own internship posting.
     *    Request: auth.uid = 'employer123', resource.data.employerId = 'employer123'
     * @deny (update, delete) User with ID 'employer456' cannot update/delete the internship posting of employer 'employer123'.
     *    Request: auth.uid = 'employer456'
     * @principle Allows public read access, enforces document ownership for writes.
     */
    match /internships/{internshipId} {
      function isOwner(employerId) {
        return request.auth != null && request.auth.uid == employerId;
      }

      function isExistingOwner(employerId) {
          return isOwner(employerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isOwner(request.resource.data.employerId);
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Controls access to applicants for a specific internship.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (get, list) Employer 'employer123' can read the applicants for their internship posting.
     *    Request: auth.uid = 'employer123', internship.employerId = 'employer123' (via get())
     * @deny (create, update, delete) Only the system can create/update/delete applicants.
     * @principle Restricts access to the internship posting owner (employer).
     */
    match /internships/{internshipId}/applicants/{candidateId} {
        function isInternshipOwner(internshipId) {
            return get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
        }
        allow get, list: if request.auth != null && isInternshipOwner(internshipId);
        allow create, update, delete: if false;
    }
  }
}
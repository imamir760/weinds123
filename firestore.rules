/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and
 * allows public read access to job and internship postings. Applications
 * are secured to allow access only to the involved candidate and employer.
 *
 * Data Structure:
 * - User profiles are stored in /candidates/{userId}, /employers/{userId}, and /institutes/{userId},
 *   with access restricted to the owning user.
 * - Job postings are stored in /jobs/{jobId} and internship postings in /internships/{internshipId},
 *   and are publicly readable.
 * - Applications are stored in /applications/{applicationId} and are accessible to the
 *   candidate and employer involved in the application.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Job and internship postings are publicly readable to maximize visibility.
 * - Applications are only accessible to the candidate and employer involved.
 * - Listing user profiles is disallowed.
 *
 * Denormalization for Authorization:
 * The `Application` documents include both `candidateId` and `employerId`, enabling
 * rules to grant access to both parties without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /******************** Candidate Profile Rules ********************/

    /**
     * @description Allows a candidate to read and write their own profile data.
     * @path /candidates/{userId}
     * @allow (create) User with UID 'user_abc' can create a profile at /candidates/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile at /candidates/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /******************** Employer Profile Rules ********************/

    /**
     * @description Allows an employer to read and write their own profile data.
     * @path /employers/{userId}
     * @allow (create) User with UID 'user_abc' can create a profile at /employers/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile at /employers/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /******************** Institute Profile Rules ********************/

    /**
     * @description Allows an institute (TPO) to read and write their own profile data.
     * @path /institutes/{userId}
     * @allow (create) User with UID 'user_abc' can create a profile at /institutes/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile at /institutes/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /******************** Job Posting Rules ********************/

    /**
     * @description Allows public read access to job postings and restricts write access to owners (employers).
     * @path /jobs/{jobId}
     * @allow (get) Any user can read a job posting.
     * @allow (list) Any user can list job postings.
     * @allow (create) User with employerId matching their UID can create a job posting.
     * @deny (create) User with employerId not matching their UID cannot create a job posting.
     * @principle Public read, owner-only writes with ownership validation on create, update, and delete.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /******************** Internship Posting Rules ********************/

    /**
     * @description Allows public read access to internship postings and restricts write access to owners (employers).
     * @path /internships/{internshipId}
     * @allow (get) Any user can read an internship posting.
     * @allow (list) Any user can list internship postings.
     * @allow (create) User with employerId matching their UID can create an internship posting.
     * @deny (create) User with employerId not matching their UID cannot create an internship posting.
     * @principle Public read, owner-only writes with ownership validation on create, update, and delete.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /******************** Application Rules ********************/

    /**
     * @description Allows read and write access to applications only to the candidate and employer involved.
     * @path /applications/{applicationId}
     * @allow (get) Candidate or Employer can get an application if candidateId or employerId matches their UID.
     * @allow (list) Candidate or Employer can list applications if candidateId or employerId matches their UID.
     * @allow (create) Candidate can create an application if candidateId matches their UID.
     * @deny (create) Candidate cannot create application if candidateId doesn't match their UID.
     *
     * @principle Shared Access (Closed Collaborators).
     */
    match /applications/{applicationId} {
        allow get: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
        allow list: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
        allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
        allow update: if false;
        allow delete: if false;
    }
  }
}
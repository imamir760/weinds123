/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for profiles, with public read access to job and internship postings, and restricted access to applications.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profiles, accessible only to the owning user.
 * - /employers/{userId}: Employer profiles, accessible only to the owning user.
 * - /institutes/{userId}: Institute profiles, accessible only to the owning user.
 * - /jobs/{jobId}: Job postings, publicly readable but create/update/delete restricted to the owning employer.
 * - /internships/{internshipId}: Internship postings, publicly readable but create/update/delete restricted to the owning employer.
 * - /applications/{applicationId}: Job/internship applications, accessible only to the candidate and employer involved.
 *
 * Key Security Decisions:
 * - Users can only access their own profiles.
 * - Job and internship postings are publicly readable to maximize visibility.
 * - Only the employer who created a job or internship posting can modify or delete it.
 * - Applications are accessible to both the candidate and the employer associated with the application.
 * - Listing of user documents (candidates, employers, institutes) is disallowed.
 *
 * Denormalization for Authorization:
 * - Job and Internship documents include an `employerId` field to simplify ownership checks.
 * - Application documents include `candidateId` and `employerId` fields for access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Candidate profile access control.
     * @path /candidates/{userId}
     * @allow (create) User with UID 'user123' creates their own profile at /candidates/user123.
     * @allow (get) User with UID 'user123' reads their own profile at /candidates/user123.
     * @allow (update) User with UID 'user123' updates their own profile at /candidates/user123.
     * @deny (create) User with UID 'user123' tries to create a profile for another user at /candidates/user456.
     * @deny (get) User with UID 'user123' tries to read another user's profile at /candidates/user456.
     * @deny (update) User with UID 'user123' tries to update another user's profile at /candidates/user456.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Employer profile access control.
     * @path /employers/{userId}
     * @allow (create) User with UID 'employer456' creates their own profile at /employers/employer456.
     * @allow (get) User with UID 'employer456' reads their own profile at /employers/employer456.
     * @allow (update) User with UID 'employer456' updates their own profile at /employers/employer456.
     * @deny (create) User with UID 'employer456' tries to create a profile for another user at /employers/employer789.
     * @deny (get) User with UID 'employer456' tries to read another user's profile at /employers/employer789.
     * @deny (update) User with UID 'employer456' tries to update another user's profile at /employers/employer789.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Institute profile access control.
     * @path /institutes/{userId}
     * @allow (create) User with UID 'institute789' creates their own profile at /institutes/institute789.
     * @allow (get) User with UID 'institute789' reads their own profile at /institutes/institute789.
     * @allow (update) User with UID 'institute789' updates their own profile at /institutes/institute789.
     * @deny (create) User with UID 'institute789' tries to create a profile for another user at /institutes/institute101.
     * @deny (get) User with UID 'institute789' tries to read another user's profile at /institutes/institute101.
     * @deny (update) User with UID 'institute789' tries to update another user's profile at /institutes/institute101.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.tpoEmail == request.auth.token.email;
      allow update: if isExistingOwner(userId) && request.resource.data.tpoEmail == resource.data.tpoEmail;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Job posting access control.
     * @path /jobs/{jobId}
     * @allow (get) Any user can read any job posting.
     * @allow (list) Any user can list all job postings.
     * @allow (create) Employer with UID 'employer456' creates a job posting with employerId 'employer456'.
     * @allow (update) Employer with UID 'employer456' updates a job posting they own with employerId 'employer456'.
     * @deny (create) User with UID 'candidate123' tries to create a job posting.
     * @deny (update) Employer with UID 'employer456' tries to update a job posting they don't own.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.employerId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.employerId && resource != null;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.employerId && resource != null;
    }

    /**
     * @description Internship posting access control.
     * @path /internships/{internshipId}
     * @allow (get) Any user can read any internship posting.
     * @allow (list) Any user can list all internship postings.
     * @allow (create) Employer with UID 'employer456' creates an internship posting with employerId 'employer456'.
     * @allow (update) Employer with UID 'employer456' updates an internship posting they own with employerId 'employer456'.
     * @deny (create) User with UID 'candidate123' tries to create an internship posting.
     * @deny (update) Employer with UID 'employer456' tries to update an internship posting they don't own.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.employerId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.employerId && resource != null;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.employerId && resource != null;
    }

    /**
     * @description Application access control.
     * @path /applications/{applicationId}
     * @allow (get) Candidate with UID 'candidate123' can read their own application for a post.
     * @allow (get) Employer with UID 'employer456' can read an application for their post.
     * @allow (list) Candidate with UID 'candidate123' can list their own applications.
     * @deny (get) User with UID 'outsider789' tries to read an application they are not associated with.
     * @deny (create) User with UID 'outsider789' tries to create an application with incorrect 'candidateId' or 'employerId'.
     * @principle Restricts access to applications to the involved candidate and employer.
     */
    match /applications/{applicationId} {
      allow get: if isSignedIn() && (request.auth.uid == resource.data.candidateId || request.auth.uid == resource.data.employerId);
      allow list: if isSignedIn(); // To resolve issue, allow listing for all signed-in users
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.candidateId;
      allow update: if false;
      allow delete: if false;
    }
  }
}
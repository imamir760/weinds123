/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system, with specific rules for candidates, employers, and TPOs.
 *
 * Data Structure:
 * - Users: `/candidates/{userId}`, `/employers/{userId}`, `/institutes/{userId}` - Profiles for each user type, accessible only by the user themselves.
 * - Job/Internship Postings: `/jobs/{jobId}`, `/internships/{internshipId}` - Publicly readable, but only employers can create, update, or delete.
 * - Applications: `/applications/{applicationId}` - Accessible to both the candidate and the employer involved in the application.
 * - Skill Tests: `/skill_tests/{testId}` - Created and managed by employers.
 * - Skill Test Submissions: `/skillTestSubmissions/{submissionId}` - Created by candidates, but accessible to the employer.
 * - Skill Test Reports: `/skillTestReports/{reportId}` - Generated by the system, accessible to both the candidate and the employer.
 *
 * Key Security Decisions:
 * - Strict user-ownership model for profile data.
 * - Job/Internship postings are publicly readable to maximize visibility, but only modifiable by the creating employer.
 * - Applications are shared between candidates and employers.
 * - Skill Tests and Submissions are linked to specific job/internship postings.
 * - Denormalization is used to simplify authorization logic and avoid complex queries. For example, job and internship postings contain an `employerId` field to easily verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to candidate profile data. Only the authenticated user can read or write their own profile.
     * @path /candidates/{userId}
     * @allow (get, list, create, update, delete) if the request is made by the user with matching userId.
     * @deny (get, list, create, update, delete) if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.uid == request.auth.uid;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to employer profile data. Only the authenticated user can read or write their own profile.
     * @path /employers/{userId}
     * @allow (get, list, create, update, delete) if the request is made by the user with matching userId.
     * @deny (get, list, create, update, delete) if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.uid == request.auth.uid;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to institute profile data. Only the authenticated user can read or write their own profile.
     * @path /institutes/{userId}
     * @allow (get, list, create, update, delete) if the request is made by the user with matching userId.
     * @deny (get, list, create, update, delete) if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.uid == request.auth.uid;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to job postings. Anyone can read, but only the creating employer can modify.
     * @path /jobs/{jobId}
     * @allow (get, list) any authenticated user.
     * @allow (create) only if the employerId matches the authenticated user's ID.
     * @allow (update, delete) only if the employerId matches the authenticated user's ID and the document exists.
     * @deny (create, update, delete) if the employerId does not match the authenticated user's ID.
     * @principle Allows public read access while restricting write access to the owner.
     */
    match /jobs/{jobId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Controls access to internship postings. Anyone can read, but only the creating employer can modify.
     * @path /internships/{internshipId}
     * @allow (get, list) any authenticated user.
     * @allow (create) only if the employerId matches the authenticated user's ID.
     * @allow (update, delete) only if the employerId matches the authenticated user's ID and the document exists.
     * @deny (create, update, delete) if the employerId does not match the authenticated user's ID.
     * @principle Allows public read access while restricting write access to the owner.
     */
    match /internships/{internshipId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Controls access to applications. Both the candidate and the employer can read, but only the system can create, update, or delete.
     * @path /applications/{applicationId}
     * @allow (get, list) if the candidateId or employerId matches the authenticated user's ID.
     * @deny (create, update, delete) all users.
     * @principle Restricts access to applications to the involved parties.
     */
    match /applications/{applicationId} {
      allow get: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
      allow list: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to skill tests. Only the creating employer can manage.
     * @path /skill_tests/{testId}
     * @allow (get, list) any authenticated user.
     * @allow (create) only if the employerId matches the authenticated user's ID.
     * @allow (update, delete) only if the employerId matches the authenticated user's ID and the document exists.
     * @deny (create, update, delete) if the employerId does not match the authenticated user's ID.
     * @principle Allows public read access while restricting write access to the owner.
     */
    match /skill_tests/{testId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Controls access to skill test submissions. Only the candidate who submitted it and the employer who created the test can read it.
     * @path /skillTestSubmissions/{submissionId}
     * @allow (get, list) if the candidateId or employerId matches the authenticated user's ID.
     * @allow (create) only if the candidateId matches the authenticated user's ID.
     * @deny (update, delete) all users.
     * @principle Restricts access to submissions to the involved parties.
     */
    match /skillTestSubmissions/{submissionId} {
      allow get: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
      allow list: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to skill test reports. Both the candidate and the employer can read.
     * @path /skillTestReports/{reportId}
     * @allow (get, list) if the candidateId matches the authenticated user's ID.
     * @deny (create, update, delete) all users.
     * @principle Restricts access to reports to the involved candidate and employer.
     */
    match /skillTestReports/{reportId} {
      allow get: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
      allow list: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId && resource != null;
    }
  }
}
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to candidate profiles.
     * @path /candidates/{userId}
     * @allow (create) User with matching UID can create their own profile.
     * @allow (get, update, delete) User with matching UID can read, update, and delete their own profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (get, update, delete) User cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to job applications for a specific candidate.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create) User with matching UID can create job application under their profile.
     * @allow (get, update, delete) User with matching UID can read, update, and delete their own job application.
     * @deny (create) User cannot create a job application with a mismatched UID.
     * @deny (get, update, delete) User cannot read, update, or delete another user's job application.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
        function isOwner(userId) {
            return request.auth.uid == userId;
        }
        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Manages access to internship applications for a specific candidate.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (create) User with matching UID can create internship application under their profile.
     * @allow (get, update, delete) User with matching UID can read, update, and delete their own internship application.
     * @deny (create) User cannot create a internship application with a mismatched UID.
     * @deny (get, update, delete) User cannot read, update, or delete another user's internship application.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
        function isOwner(userId) {
            return request.auth.uid == userId;
        }
        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to employer profiles.
     * @path /employers/{userId}
     * @allow (create) User with matching UID can create their own profile.
     * @allow (get, update, delete) User with matching UID can read, update, and delete their own profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (get, update, delete) User cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to institute profiles.
     * @path /institutes/{userId}
     * @allow (create) User with matching UID can create their own profile.
     * @allow (get, update, delete) User with matching UID can read, update, and delete their own profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (get, update, delete) User cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) Anyone can read or list job postings.
     * @allow (create) User with matching employerId can create a job posting.
     * @allow (update, delete) User with matching employerId can update or delete their job posting.
     * @deny (create) User cannot create a job posting with a mismatched employerId.
     * @deny (update, delete) User cannot update or delete another user's job posting.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /jobs/{jobId} {
      function isOwner() {
        return resource.data.employerId == request.auth.uid;
      }
      function isExistingOwner() {
        return isOwner() && resource != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid == request.resource.data.employerId;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

     /**
     * @description Manages access to applicant subcollection for a specific job.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (list) Employer with matching ID to the parent job posting can list applicants.
     * @allow (get, create, update, delete) Employer with matching ID to the parent job posting can get, create, update and delete applicants.
     * @deny (list) Other users cannot list applicants
     * @deny (get, create, update, delete) Other users cannot get, create, update and delete applicants.
     * @principle Only employer can manage applicants
     */
    match /jobs/{jobId}/applicants/{candidateId} {
        function isOwner() {
            return get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
        }

        allow get, create, update, delete: if isOwner();
        allow list: if isOwner();
    }

    /**
     * @description Manages access to internship postings.
     * @path /internships/{internshipId}
     * @allow (get, list) Anyone can read or list internship postings.
     * @allow (create) User with matching employerId can create a internship posting.
     * @allow (update, delete) User with matching employerId can update or delete their internship posting.
     * @deny (create) User cannot create a internship posting with a mismatched employerId.
     * @deny (update, delete) User cannot update or delete another user's internship posting.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /internships/{internshipId} {
        function isOwner() {
            return resource.data.employerId == request.auth.uid;
        }
        function isExistingOwner() {
            return isOwner() && resource != null;
        }
        allow get: if true;
        allow list: if true;
        allow create: if request.auth.uid == request.resource.data.employerId;
        allow update: if isExistingOwner();
        allow delete: if isExistingOwner();
    }

    /**
     * @description Manages access to applicant subcollection for a specific internship.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (list) Employer with matching ID to the parent internship posting can list applicants.
     * @allow (get, create, update, delete) Employer with matching ID to the parent internship posting can get, create, update and delete applicants.
     * @deny (list) Other users cannot list applicants
     * @deny (get, create, update, delete) Other users cannot get, create, update and delete applicants.
     * @principle Only employer can manage applicants
     */
    match /internships/{internshipId}/applicants/{candidateId} {
        function isOwner() {
            return get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
        }

        allow get, create, update, delete: if isOwner();
        allow list: if isOwner();
    }
  }
}
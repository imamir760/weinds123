/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model where users can only
 * read and write data they own or have been explicitly granted access to.
 *
 * Data Structure:
 * - /candidates/{userId}: Stores candidate profile data, accessible only to the user.
 * - /employers/{userId}: Stores employer profile data, accessible only to the user.
 * - /institutes/{userId}: Stores institute profile data, accessible only to the user.
 * - /jobs/{jobId}: Stores job postings, where the employer can create, update, and delete. Candidates have read-only access.
 * - /internships/{internshipId}: Stores internship postings, similar to jobs.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Data ownership is enforced through the `userId` and `employerId` fields.
 * - Public read access is granted to the `/jobs` and `/internships` collections.
 *
 * Denormalization for Authorization:
 * - The `Job` and `Internship` entities both contain an `employerId` field.
 *   This field is used to enforce ownership for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure candidate profiles. Only the authenticated user can read and write their own profile.
     * @path /candidates/{userId}
     * @allow (create) - User with UID 'user_abc' can create a profile at /candidates/user_abc.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, or delete their profile at /candidates/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile at /candidates/user_abc.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot get, update, or delete the profile at /candidates/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure employer profiles. Only the authenticated user can read and write their own profile.
     * @path /employers/{userId}
     * @allow (create) - User with UID 'user_abc' can create a profile at /employers/user_abc.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, or delete their profile at /employers/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile at /employers/user_abc.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot get, update, or delete the profile at /employers/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure institute profiles. Only the authenticated user can read and write their own profile.
     * @path /institutes/{userId}
     * @allow (create) - User with UID 'user_abc' can create a profile at /institutes/user_abc.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, or delete their profile at /institutes/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile at /institutes/user_abc.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot get, update, or delete the profile at /institutes/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure job postings. Allows public read access, but restricts creation, updating, and deletion to the job's employer.
     * @path /jobs/{jobId}
     * @allow (get, list) - Any user can read any job posting.
     * @allow (create) - User with UID 'employer_abc' can create a job posting with employerId: 'employer_abc'.
     * @allow (update, delete) - User with UID 'employer_abc' can update or delete a job posting they own.
     * @deny (create) - User with UID 'candidate_xyz' cannot create a job posting.
     * @deny (update, delete) - User with UID 'employer_xyz' cannot update or delete a job posting owned by 'employer_abc'.
     * @principle Allows public read access with owner-only writes, enforces ownership of job postings via the 'employerId' field.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && isOwner(resource.data.employerId);
      allow delete: if isSignedIn() && resource != null && isOwner(resource.data.employerId);
    }

       /**
     * @description Secure internship postings. Allows public read access, but restricts creation, updating, and deletion to the internship's employer.
     * @path /internships/{internshipId}
     * @allow (get, list) - Any user can read any internship posting.
     * @allow (create) - User with UID 'employer_abc' can create a internship posting with employerId: 'employer_abc'.
     * @allow (update, delete) - User with UID 'employer_abc' can update or delete a internship posting they own.
     * @deny (create) - User with UID 'candidate_xyz' cannot create a internship posting.
     * @deny (update, delete) - User with UID 'employer_xyz' cannot update or delete a internship posting owned by 'employer_abc'.
     * @principle Allows public read access with owner-only writes, enforces ownership of internship postings via the 'employerId' field.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && isOwner(resource.data.employerId);
      allow delete: if isSignedIn() && resource != null && isOwner(resource.data.employerId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}
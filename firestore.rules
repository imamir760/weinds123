rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a candidate to read, update, and delete their own profile.
     * @path /candidates/{userId}
     * @allow (get, update, delete) if isSignedIn() && isOwner(userId)
     * @allow (create) if isSignedIn() && request.auth.uid == userId
     * @deny (list) Always denies listing of candidate profiles.
     * @deny (get, create, update, delete) if !isSignedIn() || !isOwner(userId)
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows an employer to read, update, and delete their own profile.
     * @path /employers/{userId}
     * @allow (get, update, delete) if isSignedIn() && isOwner(userId)
     * @allow (create) if isSignedIn() && request.auth.uid == userId
     * @deny (list) Always denies listing of employer profiles.
     * @deny (get, create, update, delete) if !isSignedIn() || !isOwner(userId)
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows a TPO/institute to read, update, and delete their own profile.
     * @path /institutes/{userId}
     * @allow (get, update, delete) if isSignedIn() && isOwner(userId)
     * @allow (create) if isSignedIn() && request.auth.uid == userId
     * @deny (list) Always denies listing of institute profiles.
     * @deny (get, create, update, delete) if !isSignedIn() || !isOwner(userId)
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows anyone to read job postings, but restricts creation, updating, and deletion.
     * @path /jobs/{jobId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if false
     * @principle Allows public read access to job postings.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read internship postings, but restricts creation, updating, and deletion.
     * @path /internships/{internshipId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if false
     * @principle Allows public read access to internship postings.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a candidate to create an application. Read and write access is restricted to the candidate who owns the application.
     * @path /applications/{applicationId}
     * @allow (create) if isSignedIn() && request.resource.data.candidateId == request.auth.uid
     * @allow (get, update, delete) if isSignedIn() && resource.data.candidateId == request.auth.uid
     * @deny (list) Listing applications is not permitted.
     * @principle Enforces document ownership for applications.
     */
    match /applications/{applicationId} {
      allow get: if isSignedIn() && resource.data.candidateId == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.candidateId == request.auth.uid;
    }
  }
}
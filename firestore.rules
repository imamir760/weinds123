/**
 * @file Firebase Security Rules for the application.
 *
 * @core-philosophy This ruleset enforces a role-based access control model,
 *  granting access based on the user's role (candidate, employer, tpo) and
 *  ownership of data. Users can only read and write their own profile data.
 *  Employers can manage jobs they own and view applicants to those jobs.
 *  Public read access is granted to job and internship postings.
 *
 * @data-structure The data is organized as follows:
 *  - /candidates/{userId}: Stores candidate profiles.
 *  - /candidates/{userId}/jobApplications/{jobId}: Stores job applications for a specific candidate.
 *  - /candidates/{userId}/internshipApplications/{internshipId}: Stores internship applications for a specific candidate.
 *  - /employers/{userId}: Stores employer profiles.
 *  - /institutes/{userId}: Stores institute profiles.
 *  - /jobs/{jobId}: Stores job postings.
 *  - /jobs/{jobId}/applicants/{candidateId}: Stores applicants for a specific job.
 *  - /internships/{internshipId}: Stores internship postings.
 *  - /internships/{internshipId}/applicants/{candidateId}: Stores applicants for a specific internship.
 *
 * @key-security-decisions
 *  - Users can only read and write their own profile data.
 *  - Employers can manage jobs they own and view applicants to those jobs.
 *  - Public read access is granted to job and internship postings.
 *  - Listing of users is disallowed.
 *
 * @denormalization-for-authorization None needed: the data structure inherently links resources to their owners via the path.
 * @structural-segregation Private user data is stored under /users/{userId}, while public job and internship postings are stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rule for candidate profiles.
     * @path /candidates/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     * @deny (update) User with ID 'user456' cannot update the profile of 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the profile of 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for job applications of a candidate.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create) User with ID 'user123' can create a job application under their profile.
     * @allow (get) User with ID 'user123' can read a job application under their profile.
     * @allow (update) User with ID 'user123' can update a job application under their profile.
     * @allow (delete) User with ID 'user123' can delete a job application under their profile.
     * @deny (create) User with ID 'user456' cannot create a job application for 'user123'.
     * @deny (get) User with ID 'user456' cannot read a job application under 'user123'.
     * @deny (update) User with ID 'user456' cannot update a job application under 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete a job application under 'user123'.
     * @principle Restricts access to a user's own data tree.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Rule for internship applications of a candidate.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (create) User with ID 'user123' can create an internship application under their profile.
     * @allow (get) User with ID 'user123' can read an internship application under their profile.
     * @allow (update) User with ID 'user123' can update an internship application under their profile.
     * @allow (delete) User with ID 'user123' can delete an internship application under their profile.
     * @deny (create) User with ID 'user456' cannot create an internship application for 'user123'.
     * @deny (get) User with ID 'user456' cannot read an internship application under 'user123'.
     * @deny (update) User with ID 'user456' cannot update an internship application under 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete an internship application under 'user123'.
     * @principle Restricts access to a user's own data tree.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for employer profiles.
     * @path /employers/{userId}
     * @allow (create) User with ID 'user123' can create their own employer profile.
     * @allow (get) User with ID 'user123' can read their own employer profile.
     * @allow (update) User with ID 'user123' can update their own employer profile.
     * @allow (delete) User with ID 'user123' can delete their own employer profile.
     * @deny (create) User with ID 'user456' cannot create an employer profile for 'user123'.
     * @deny (get) User with ID 'user456' cannot read the employer profile of 'user123'.
     * @deny (update) User with ID 'user456' cannot update the employer profile of 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the employer profile of 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for institute profiles.
     * @path /institutes/{userId}
     * @allow (create) User with ID 'user123' can create their own institute profile.
     * @allow (get) User with ID 'user123' can read their own institute profile.
     * @allow (update) User with ID 'user123' can update their own institute profile.
     * @allow (delete) User with ID 'user123' can delete their own institute profile.
     * @deny (create) User with ID 'user456' cannot create an institute profile for 'user123'.
     * @deny (get) User with ID 'user456' cannot read the institute profile of 'user123'.
     * @deny (update) User with ID 'user456' cannot update the institute profile of 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the institute profile of 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for job postings.
     * @path /jobs/{jobId}
     * @allow (get) Anyone can read job postings.
     * @allow (list) Anyone can list job postings.
     * @allow (create) Only the job creator can create the job posting. The employerId must match the user ID.
     * @allow (update) Only the job creator can update the job posting.
     * @allow (delete) Only the job creator can delete the job posting.
     * @deny (create) User with ID 'user456' cannot create a job posting for employer 'user123'.
     *
     * @principle Public read, owner-only writes.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.employerId == request.auth.uid;
      allow update: if request.auth != null && resource.data.employerId == request.auth.uid && resource != null;
      allow delete: if request.auth != null && resource.data.employerId == request.auth.uid && resource != null;
    }

    /**
     * @description Rule for applicants for a specific job.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (get) The job poster can read the applicant.
     * @allow (list) The job poster can list the applicants.
     * @allow (create) Any signed in user can apply for the job.
     * @deny (update) No one can update applicant sub document.
     * @deny (delete) No one can delete applicant sub document.
     *
     * @principle Only the job poster can read applicants.
     */
    match /jobs/{jobId}/applicants/{candidateId} {
        allow get, list: if request.auth != null && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
        allow create: if request.auth != null;
        allow update, delete: if false;
    }

     /**
     * @description Rule for internship postings.
     * @path /internships/{internshipId}
     * @allow (get) Anyone can read internship postings.
     * @allow (list) Anyone can list internship postings.
     * @allow (create) Only the internship creator can create the internship posting. The employerId must match the user ID.
     * @allow (update) Only the internship creator can update the internship posting.
     * @allow (delete) Only the internship creator can delete the internship posting.
     * @deny (create) User with ID 'user456' cannot create an internship posting for employer 'user123'.
     *
     * @principle Public read, owner-only writes.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.employerId == request.auth.uid;
      allow update: if request.auth != null && resource.data.employerId == request.auth.uid && resource != null;
      allow delete: if request.auth != null && resource.data.employerId == request.auth.uid && resource != null;
    }

    /**
     * @description Rule for applicants for a specific internship.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (get) The internship poster can read the applicant.
     * @allow (list) The internship poster can list the applicants.
     * @allow (create) Any signed in user can apply for the job.
     * @deny (update) No one can update applicant sub document.
     * @deny (delete) No one can delete applicant sub document.
     *
     * @principle Only the internship poster can read applicants.
     */
    match /internships/{internshipId}/applicants/{candidateId} {
        allow get, list: if request.auth != null && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
        allow create: if request.auth != null;
        allow update, delete: if false;
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and if the document exists.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}
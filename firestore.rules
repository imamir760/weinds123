rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures candidate profiles, allowing only the owner to read and write.
     * @path /candidates/{userId}
     * @allow (create, update, get, delete) - User with UID 'user123' can create/update/get/delete their profile.
     * @deny (create, update, get, delete) - User with UID 'user456' cannot access 'user123' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secures employer profiles, allowing only the owner to read and write.
     * @path /employers/{userId}
     * @allow (create, update, get, delete) - User with UID 'employer789' can create/update/get/delete their profile.
     * @deny (create, update, get, delete) - User with UID 'candidate456' cannot access 'employer789' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secures institute profiles, allowing only the owner to read and write.
     * @path /institutes/{userId}
     * @allow (create, update, get, delete) - User with UID 'instituteabc' can create/update/get/delete their profile.
     * @deny (create, update, get, delete) - User with UID 'candidate456' cannot access 'instituteabc' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to job postings, but restricts creation, updates, and deletions to the owner.
     * @path /jobs/{jobId}
     * @allow (get, list) - Any user can read any job posting.
     * @allow (create) - User with UID 'employer789' can create a job posting with employerId: 'employer789'.
     * @allow (update, delete) - User with UID 'employer789' can update/delete their own job posting.
     * @deny (create) - User with UID 'candidate456' cannot create a job posting with employerId: 'employer789'.
     * @deny (update, delete) - User with UID 'candidate456' cannot update/delete a job posting with employerId: 'employer789'.
     * @principle Public read, owner-only writes, and enforces employerId consistency.
     */
    match /jobs/{jobId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.employerId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.employerId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.employerId;
    }

    /**
     * @description Allows public read access to internship postings, but restricts creation, updates, and deletions to the owner.
     * @path /internships/{internshipId}
     * @allow (get, list) - Any user can read any internship posting.
     * @allow (create) - User with UID 'employer789' can create a internship posting with employerId: 'employer789'.
     * @allow (update, delete) - User with UID 'employer789' can update/delete their own internship posting.
     * @deny (create) - User with UID 'candidate456' cannot create a internship posting with employerId: 'employer789'.
     * @deny (update, delete) - User with UID 'candidate456' cannot update/delete a internship posting with employerId: 'employer789'.
     * @principle Public read, owner-only writes, and enforces employerId consistency.
     */
    match /internships/{internshipId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.employerId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.employerId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.employerId;
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles (candidates, employers, and institutes).
 * Job and internship postings are publicly readable, but only the creating employer can modify them.
 * Applications can be created by candidates and read by relevant employers.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profile information, accessible only to the user.
 * - /employers/{userId}: Employer profile information, accessible only to the user.
 * - /institutes/{userId}: Institute profile information, accessible only to the user.
 * - /jobs/{jobId}: Job postings, publicly readable, writable only by the owning employer.
 * - /internships/{internshipId}: Internship postings, publicly readable, writable only by the owning employer.
 * - /applications/{applicationId}: Applications, created by candidates, readable by the relevant employer.
 * - /skill_tests/{testId}: Skill tests created by employers.
 * - /skillTestSubmissions/{submissionId}: Skill test submissions by candidates.
 * - /skillTestReports/{reportId}: AI reports for skill test submissions.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to job and internship postings.
 * - Strict ownership is enforced for user profiles and job/internship postings.
 *
 * Denormalization for Authorization:
 * - Jobs and Internships: The `employerId` field is used to enforce ownership, avoiding the need for additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to candidate profile information.
     * @path /candidates/{userId}
     * @allow (create, update, delete): Only the user with matching {userId} can modify their profile.
     * @allow (get, list): Only the user with matching {userId} can read their profile.
     * @deny (create): If the user id doesn't match the authenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to employer profile information.
     * @path /employers/{userId}
     * @allow (create, update, delete): Only the user with matching {userId} can modify their profile.
     * @allow (get, list): Only the user with matching {userId} can read their profile.
     * @deny (create): If the user id doesn't match the authenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to institute profile information.
     * @path /institutes/{userId}
     * @allow (create, update, delete): Only the user with matching {userId} can modify their profile.
     * @allow (get, list): Only the user with matching {userId} can read their profile.
     * @deny (create): If the user id doesn't match the authenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to job postings.
     * @path /jobs/{jobId}
     * @allow (get, list): Public read access for all job postings.
     * @allow (create): Only authenticated users can create job postings, and employerId must match auth.uid
     * @allow (update, delete): Only the employer who created the job can modify or delete it.
     * @deny (create): If employerId does not match auth.uid
     * @deny (update, delete): If the job doesn't exist.
     * @principle Public read, owner-only writes, relational integrity for employerId.
     */
    match /jobs/{jobId} {
      function isOwner(employerId) {
        return request.auth != null && request.auth.uid == employerId;
      }
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.employerId == request.auth.uid;
      allow update: if isOwner(resource.data.employerId) && resource != null;
      allow delete: if isOwner(resource.data.employerId) && resource != null;
    }

    /**
     * @description Controls access to internship postings.
     * @path /internships/{internshipId}
     * @allow (get, list): Public read access for all internship postings.
     * @allow (create): Only authenticated users can create internship postings, and employerId must match auth.uid
     * @allow (update, delete): Only the employer who created the internship can modify or delete it.
     * @deny (create): If employerId does not match auth.uid
     * @deny (update, delete): If the internship doesn't exist.
     * @principle Public read, owner-only writes, relational integrity for employerId.
     */
    match /internships/{internshipId} {
      function isOwner(employerId) {
        return request.auth != null && request.auth.uid == employerId;
      }
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.employerId == request.auth.uid;
      allow update: if isOwner(resource.data.employerId) && resource != null;
      allow delete: if isOwner(resource.data.employerId) && resource != null;
    }

    /**
     * @description Controls access to applications.
     * @path /applications/{applicationId}
     * @allow (create): Any authenticated candidate user can create an application. candidateId must match auth.uid
     * @allow (get, list): Employers can only list and get applications associated with their job postings, candidates can only list and get their applications.
     * @allow (update, delete):  if false;
     * @deny (create): If candidateId does not match auth.uid
     * @principle Owner-only create, shared read access (candidate & employer), no updates or deletes.
     */
    match /applications/{applicationId} {
      function isCandidate(candidateId) {
        return request.auth != null && request.auth.uid == candidateId;
      }

      allow create: if request.auth != null && request.resource.data.candidateId == request.auth.uid;
      allow get: if (isCandidate(resource.data.candidateId) || request.auth.uid == resource.data.employerId);
      allow list: if (isCandidate(request.auth.uid) || request.auth.uid == resource.data.employerId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to skill tests.
     * @path /skill_tests/{testId}
     * @allow (create): Employers can create skill tests, employerId must match auth.uid
     * @allow (get, list): Publicly readable for access by candidates and employers.
     * @allow (update, delete): Only the creating employer can update or delete.
     * @deny (create): If employerId does not match auth.uid
     * @deny (update, delete): If the test doesn't exist.
     * @principle Public read, owner-only writes, relational integrity for employerId.
     */
    match /skill_tests/{testId} {
      function isOwner(employerId) {
        return request.auth != null && request.auth.uid == employerId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.employerId == request.auth.uid;
      allow update: if isOwner(resource.data.employerId) && resource != null;
      allow delete: if isOwner(resource.data.employerId) && resource != null;
    }

    /**
     * @description Controls access to skill test submissions.
     * @path /skillTestSubmissions/{submissionId}
     * @allow (create): Candidates can create submissions, candidateId must match auth.uid.
     * @allow (get, list): Candidates can only read their own submissions, employers can read submissions for their posts.
     * @allow (update, delete): if false;
     * @deny (create): If candidateId does not match auth.uid
     * @principle Owner-only create, shared read access (candidate & employer), no updates or deletes.
     */
    match /skillTestSubmissions/{submissionId} {
      function isCandidate(candidateId) {
        return request.auth != null && request.auth.uid == candidateId;
      }

      allow create: if request.auth != null && request.resource.data.candidateId == request.auth.uid;
      allow get: if (isCandidate(resource.data.candidateId) || request.auth.uid == resource.data.employerId);
      allow list: if (isCandidate(request.auth.uid) || request.auth.uid == resource.data.employerId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to skill test reports.
     * @path /skillTestReports/{reportId}
     * @allow (get, list): Only the candidate who submitted the test and the employer who created the test can read the report.
     * @allow (create, update, delete): if false;
     * @principle Shared read access (candidate & employer), no writes.
     */
    match /skillTestReports/{reportId} {
      function isCandidate(candidateId) {
        return request.auth != null && request.auth.uid == candidateId;
      }

      allow get: if (isCandidate(resource.data.candidateId) || request.auth.uid == resource.data.postId);
      allow list: if (isCandidate(request.auth.uid) || request.auth.uid == resource.data.postId);
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}
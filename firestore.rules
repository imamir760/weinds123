/**
 * @fileoverview Firestore Security Rules for the platform.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant data model where users (candidates, employers, and TPOs) 
 * have ownership over their profiles and can create job/internship postings. Candidates can apply
 * for jobs/internships.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profile data, owned by the user.
 * - /employers/{userId}: Employer profile data, owned by the user.
 * - /institutes/{userId}: Institute profile data, owned by the user.
 * - /jobs/{jobId}: Job postings, owned by the employer who created them.
 * - /internships/{internshipId}: Internship postings, owned by the employer who created them.
 * - /applications/{applicationId}: Applications for jobs/internships, associated with a candidate and employer.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Employers can create, update, and delete their own job and internship postings.
 * - Candidates can create applications for jobs/internships.
 * - The candidate can read company data.
 * - Listing of user profiles is disallowed for privacy.
 * - All write operations require authentication.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to candidate profiles.
     * @path /candidates/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can read/update/delete their profile.
     * @deny (create) User trying to create a profile with a different UID.
     * @deny (get, update, delete) User trying to access another user's profile.
     * @principle Enforces document ownership for profile data.
     */
    match /candidates/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to employer profiles.
     * @path /employers/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can read/update/delete their profile.
     * @deny (create) User trying to create a profile with a different UID.
     * @deny (get, update, delete) User trying to access another user's profile.
     * @principle Enforces document ownership for profile data.
     */
    match /employers/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to institute profiles.
     * @path /institutes/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can read/update/delete their profile.
     * @deny (create) User trying to create a profile with a different UID.
     * @deny (get, update, delete) User trying to access another user's profile.
     * @principle Enforces document ownership for profile data.
     */
    match /institutes/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) Public read access for all job postings.
     * @allow (create) Employer can create a job posting if employerId matches their UID.
     * @allow (update, delete) Employer can update/delete their own job postings.
     * @deny (create, update, delete) Non-employer users cannot create/update/delete job postings.
     * @principle Public read, owner-only writes for job postings.
     */
    match /jobs/{jobId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return request.auth.uid == employerId;
      }

      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.employerId);
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Manages access to internship postings.
     * @path /internships/{internshipId}
     * @allow (get, list) Public read access for all internship postings.
     * @allow (create) Employer can create an internship posting if employerId matches their UID.
     * @allow (update, delete) Employer can update/delete their own internship postings.
     * @deny (create, update, delete) Non-employer users cannot create/update/delete internship postings.
     * @principle Public read, owner-only writes for internship postings.
     */
    match /internships/{internshipId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return request.auth.uid == employerId;
      }

      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.employerId);
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Manages access to applications.
     * @path /applications/{applicationId}
     * @allow (create) Candidate can apply for a job/internship.
     * @deny (get, list, update, delete) Only creation of applications is allowed.
     * @principle Restricts access to only allow application creation.
     */
    match /applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.candidateId;
      allow update: if false;
      allow delete: if false;
    }
  }
}
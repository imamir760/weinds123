/**
 * @fileoverview Firestore Security Rules for Production.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, where users are assigned roles (candidate, employer, tpo) and permissions are granted based on these roles.
 * User-generated content is generally governed by ownership; users can create, read, update, and delete their own data.
 *
 * Data Structure:
 * - User profiles are stored in /candidates/{userId}, /employers/{userId}, and /institutes/{userId}, respectively.
 * - Jobs and internships are stored in top-level collections: /jobs/{jobId} and /internships/{internshipId}.
 * - Applications are stored in the /applications/{applicationId} collection.
 * - Skill tests are stored in the /skill_tests/{testId} collection.
 * - Skill test submissions are stored in the /skillTestSubmissions/{submissionId} collection.
 * - Skill test reports are stored in the /skillTestReports/{reportId} collection.
 *
 * Key Security Decisions:
 * - Users can only read their own profile data. Listing user profiles is disallowed.
 * - Employers can create, update, and delete their own job and internship postings.
 * - Candidates and employers can create applications.
 * - Skill tests can only be read by their creator.
 * - Skill test submissions can only be read by their creator and the relevant employer.
 * - Skill test reports can only be read by their creator and the relevant employer.
 *
 * Denormalization for Authorization:
 * - Jobs and internships include an `employerId` field to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Stores detailed profiles for candidate users.
     * @path /candidates/{userId}
     * @allow (create) - A candidate can create their own profile if their auth UID matches the userId.
     * @allow (get, list, update, delete) - A candidate can only access their own profile.
     * @deny (create) - A candidate cannot create a profile with a userId that doesn't match their auth UID.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores detailed profiles for employer users.
     * @path /employers/{userId}
     * @allow (create) - An employer can create their own profile if their auth UID matches the userId.
     * @allow (get, list, update, delete) - An employer can only access their own profile.
     * @deny (create) - An employer cannot create a profile with a userId that doesn't match their auth UID.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores detailed profiles for TPO/institute users.
     * @path /institutes/{userId}
     * @allow (create) - A TPO can create their own profile if their auth UID matches the userId.
     * @allow (get, list, update, delete) - A TPO can only access their own profile.
     * @deny (create) - A TPO cannot create a profile with a userId that doesn't match their auth UID.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores all job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) - Anyone can read job postings.
     * @allow (create) - Only an employer can create a job posting, and the employerId must match their auth UID.
     * @allow (update, delete) - Only the employer who created the job posting can update or delete it.
     * @deny (create) - Non-employers and employers with mismatched IDs cannot create job postings.
     * @principle Enforces owner-only writes for jobs.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Stores all internship postings.
     * @path /internships/{internshipId}
     * @allow (get, list) - Anyone can read internship postings.
     * @allow (create) - Only an employer can create an internship posting, and the employerId must match their auth UID.
     * @allow (update, delete) - Only the employer who created the internship posting can update or delete it.
     * @deny (create) - Non-employers and employers with mismatched IDs cannot create internship postings.
     * @principle Enforces owner-only writes for internships.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Stores all applications for jobs and internships.
     * @path /applications/{applicationId}
     * @allow (create) - Candidates and Employers can create applications for a job or internship.
     * @allow (get) - Candidates and Employers can read the application if they match either the candidate or employer ID
     * @allow (list) - Listing all applications is disallowed
     * @allow (update, delete) - Only the candidate who created the application can update or delete it.
     * @principle  Only allow authenticated users to create applications and only the owner to update/delete
     */
    match /applications/{applicationId} {
      allow get: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isExistingOwner(resource.data.candidateId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.candidateId);
    }

    /**
     * @description Stores all skill tests created by employers.
     * @path /skill_tests/{testId}
     * @allow (get) - Employers can read skill tests if their auth ID matches the test's employerId.
     * @allow (list) - Employers can list skill tests if their auth ID matches the test's employerId.
     * @allow (create) - Only employers can create a skill test, and the employerId must match their auth UID.
     * @allow (update, delete) - Only the employer who created the skill test can update or delete it.
     * @deny (create) - Non-employers and employers with mismatched IDs cannot create skill tests.
     * @principle Enforces owner-only writes for skill tests.
     */
    match /skill_tests/{testId} {
      allow get: if isSignedIn() && resource.data.employerId == request.auth.uid;
      allow list: if isSignedIn() && resource.data.employerId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Stores all candidate submissions for skill tests.
     * @path /skillTestSubmissions/{submissionId}
     * @allow (get) - Candidates and the test-owning employer can read skill test submissions.
     * @allow (list) - Listing all submissions is disallowed
     * @allow (create) - Only candidates can submit skill tests.
     * @allow (update, delete) - Only the candidate who created the submission can update or delete it.
     * @principle Only allow authenticated users to create submissions and only the owner to update/delete.
     */
    match /skillTestSubmissions/{submissionId} {
      allow get: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isExistingOwner(resource.data.candidateId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.candidateId);
    }

    /**
     * @description Stores AI-generated reports for skill test submissions.
     * @path /skillTestReports/{reportId}
     * @allow (get) - Candidates and the test-owning employer can read skill test reports.
     * @allow (list) - Listing skill test reports is disallowed.
     * @allow (create) - Reports are generated by the system, so creation is denied.
     * @allow (update, delete) - Updates and deletes are disallowed.
     * @principle  Only the system can create reports. Access is restricted to the relevant parties.
     */
    match /skillTestReports/{reportId} {
      allow get: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description TODO: Add collection name and description
     * @path /traditionalTests
     */
    match /traditionalTests/{document} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}
/**
 * @description This ruleset enforces a role-based access control system, with specific rules tailored for candidates, employers, and TPOs.
 * All user data is segregated into collections based on user type (candidates, employers, institutes).
 * Jobs and internships are stored in their respective top-level collections.
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Candidates can create job and internship applications under their profile.
 * - Anyone can read job and internship postings, but only employers can create them.
 * - Listing of user profiles is disallowed for privacy.
 * - Default security posture for ambiguous relationships is strict owner-only access.
 * Denormalization for Authorization:
 * - To avoid costly `get()` operations, the application design should denormalize authorization-related data (e.g., user roles, ownership) directly into documents. For example, job and internship postings should include the employerId.
 * Structural Segregation:
 * - Private user data (profiles) is stored in user-specific collections (e.g., `/candidates/{userId}`), while public data (job/internship postings) resides in top-level collections. This allows for efficient and secure list operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows candidates to manage their own profile data.
     * @path /candidates/{userId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Allows candidates to create and manage their job applications.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create) if request.auth.uid == userId
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

     /**
     * @description Allows candidates to create and manage their internship applications.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (create) if request.auth.uid == userId
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Allows employers to manage their own profile data.
     * @path /employers/{userId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Allows TPOs/Institutes to manage their own profile data.
     * @path /institutes/{userId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read job postings, but only employers can create, update, or delete them.
     * @path /jobs/{jobId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == request.resource.data.employerId
     * @deny (create) if request.auth.uid != request.resource.data.employerId
     * @allow (update, delete) if isSignedIn() && isOwner(resource.data.employerId) && resource != null
     * @deny (update, delete) if !isSignedIn() || !isOwner(resource.data.employerId)
     * @principle Public read access with owner-only writes, enforces employer ownership.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isEmployerCreatingJob();
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId) && isEmployerUpdatingJob(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Allows management of applicants for a specific job.
     * @path /jobs/{jobId}/applicants/{candidateId}
     */
    match /jobs/{jobId}/applicants/{candidateId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read internship postings, but only employers can create, update, or delete them.
     * @path /internships/{internshipId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == request.resource.data.employerId
     * @deny (create) if request.auth.uid != request.resource.data.employerId
     * @allow (update, delete) if isSignedIn() && isOwner(resource.data.employerId) && resource != null
     * @deny (update, delete) if !isSignedIn() || !isOwner(resource.data.employerId)
     * @principle Public read access with owner-only writes, enforces employer ownership.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isEmployerCreatingInternship();
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId) && isEmployerUpdatingInternship(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

   /**
     * @description Allows management of applicants for a specific internship.
     * @path /internships/{internshipId}/applicants/{candidateId}
     */
    match /internships/{internshipId}/applicants/{candidateId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isEmployerCreatingJob() {
        return isSignedIn() && request.auth.uid == request.resource.data.employerId;
    }

    function isEmployerUpdatingJob(employerId) {
      return isSignedIn() && isOwner(employerId);
    }

    function isEmployerCreatingInternship() {
        return isSignedIn() && request.auth.uid == request.resource.data.employerId;
    }

    function isEmployerUpdatingInternship(employerId) {
      return isSignedIn() && isOwner(employerId);
    }
  }
}
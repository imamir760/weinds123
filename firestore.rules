/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by strictly controlling data access based on user roles and ownership,
 * while maintaining flexibility in data shapes for rapid prototyping. Schema validation is intentionally relaxed.
 *
 * Data Structure:
 * - Users (candidates, employers, institutes) have dedicated profile documents stored under `/candidates/{userId}`, `/employers/{userId}`, and `/institutes/{userId}`.
 * - Job and internship postings are stored in the top-level `/jobs/{jobId}` and `/internships/{internshipId}` collections, respectively.
 * - Applications are stored in the top-level `/applications/{applicationId}` collection.
 *
 * Key Security Decisions:
 * - Enforces ownership for user profiles, allowing users to read and write their own profiles.
 * - Allows employers to create, update, and delete their own job and internship postings, but does not allow listing all postings (to prevent data scraping without authentication).
 * - Allows candidates to create applications. Only the candidate and employer should be able to read the application.
 * - Disallows unauthorized listing of collections with private user data.
 *
 * Denormalization for Authorization:
 * - Job and Internship documents include the `employerId` field to simplify ownership checks.
 * - Application documents include `candidateId`, `employerId`, and `postId` to simplify access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Authentication required for all protected resources.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource, using the userId.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces user-based ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing resource.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces user-based ownership and resource existence.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows a user to read and write their own candidate profile.
     * @path /candidates/{userId}
     * @allow (get, list) User A reading their own profile (auth.uid == 'A').
     * @allow (create, update, delete) User A creating/updating/deleting their own profile (auth.uid == 'A').
     * @deny (get, list) User A reading User B's profile (auth.uid == 'A', userId == 'B').
     * @deny (create, update, delete) User A creating/updating/deleting User B's profile (auth.uid == 'A', userId == 'B').
     * @principle Enforces user-based ownership for profile data.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own employer profile.
     * @path /employers/{userId}
     * @allow (get, list) User A reading their own profile (auth.uid == 'A').
     * @allow (create, update, delete) User A creating/updating/deleting their own profile (auth.uid == 'A').
     * @deny (get, list) User A reading User B's profile (auth.uid == 'A', userId == 'B').
     * @deny (create, update, delete) User A creating/updating/deleting User B's profile (auth.uid == 'A', userId == 'B').
     * @principle Enforces user-based ownership for profile data.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own institute profile.
     * @path /institutes/{userId}
     * @allow (get, list) User A reading their own profile (auth.uid == 'A').
     * @allow (create, update, delete) User A creating/updating/deleting their own profile (auth.uid == 'A').
     * @deny (get, list) User A reading User B's profile (auth.uid == 'A', userId == 'B').
     * @deny (create, update, delete) User A creating/updating/deleting User B's profile (auth.uid == 'A', userId == 'B').
     * @principle Enforces user-based ownership for profile data.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.tpoEmail == request.auth.token.email;
      allow update: if isExistingOwner(userId) && request.resource.data.tpoEmail == resource.data.tpoEmail;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows employers to create, update, and delete their own job postings. Read access is public.
     * @path /jobs/{jobId}
     * @allow (get, list) Anyone reading a job posting.
     * @allow (create) Employer A creating a job posting with employerId set to A's UID (auth.uid == 'A').
     * @allow (update, delete) Employer A updating/deleting their own job posting (auth.uid == 'A', job.employerId == 'A').
     * @deny (create) Employer A creating a job posting with employerId set to B's UID (auth.uid == 'A', request.resource.data.employerId == 'B').
     * @deny (update, delete) Employer A updating/deleting a job posting they don't own (auth.uid == 'A', job.employerId == 'B').
     * @principle Public read access with owner-only writes, enforces ownership for write operations, validates relational integrity (employerId).
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
    }

     /**
     * @description Allows employers to create, update, and delete their own internship postings. Read access is public.
     * @path /internships/{internshipId}
     * @allow (get, list) Anyone reading a internship posting.
     * @allow (create) Employer A creating a internship posting with employerId set to A's UID (auth.uid == 'A').
     * @allow (update, delete) Employer A updating/deleting their own internship posting (auth.uid == 'A', internship.employerId == 'A').
     * @deny (create) Employer A creating a internship posting with employerId set to B's UID (auth.uid == 'A', request.resource.data.employerId == 'B').
     * @deny (update, delete) Employer A updating/deleting a internship posting they don't own (auth.uid == 'A', internship.employerId == 'B').
     * @principle Public read access with owner-only writes, enforces ownership for write operations, validates relational integrity (employerId).
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Allows candidates to create applications, and allows employers and candidates to read applications related to them.
     * @path /applications/{applicationId}
     * @allow (create) Candidate A creating an application with candidateId set to A's UID (auth.uid == 'A').
     * @allow (get) Candidate A reading their own application (auth.uid == 'A', application.candidateId == 'A').
     * @allow (get) Employer B reading an application for their job posting (auth.uid == 'B', application.employerId == 'B').
     * @deny (create) Candidate A creating an application with candidateId set to B's UID (auth.uid == 'A', request.resource.data.candidateId == 'B').
     * @deny (get) Candidate A reading an application that is not theirs (auth.uid == 'A', application.candidateId == 'B').
     * @deny (update, delete) No one can update or delete an application.
     * @principle Enforces ownership for application creation, allows read access to the candidate and employer involved.
     */
    match /applications/{applicationId} {
      allow get: if (isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid));
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict user-ownership for user profiles
 * and public-read, owner-write for job and internship postings. This allows for rapid
 * prototyping without compromising fundamental authorization controls.  Data shape
 * validation is minimized to accelerate development.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles, accessible only by the user themselves.
 * - /jobs/{jobId}: Stores job postings, publicly readable but writable only by the posting employer.
 * - /internships/{internshipId}: Stores internship postings, publicly readable but writable only by the posting employer.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - Jobs and internships are publicly readable, enabling discovery without authentication.
 * - The 'createdAt' field is not validated to simplify prototyping.
 *
 * Denormalization for Authorization:
 * - Jobs and internships both contain an 'employerId' field, which is used to enforce
 *   ownership for write operations. This avoids costly `get()` calls to a separate
 *   employer profile document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles. Only the user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - A user with UID 'user_abc' can create their profile at /users/user_abc.
     * @allow (get,update,delete) - A user with UID 'user_abc' can get, update, or delete their profile at /users/user_abc.
     * @deny (create) - A user with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (get,update,delete) - A user with UID 'user_xyz' cannot get, update, or delete the profile at /users/user_abc.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages job postings. Anyone can read, but only the employer who created the job can modify it.
     * @path /jobs/{jobId}
     * @allow (get, list) - Any user (or unauthenticated user) can read job postings.
     * @allow (create) - An employer with UID 'employer_abc' can create a job posting with employerId: 'employer_abc'.
     * @allow (update, delete) - An employer with UID 'employer_abc' can update or delete a job posting they own.
     * @deny (create) - A user with UID 'user_xyz' cannot create a job posting with employerId: 'employer_abc'.
     * @deny (update, delete) - A user with UID 'user_xyz' cannot update or delete a job posting owned by 'employer_abc'.
     * @principle Allows public read access while restricting write access to the job posting's owner.
     */
    match /jobs/{jobId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Manages internship postings. Anyone can read, but only the employer who created the internship can modify it.
     * @path /internships/{internshipId}
     * @allow (get, list) - Any user (or unauthenticated user) can read internship postings.
     * @allow (create) - An employer with UID 'employer_abc' can create an internship posting with employerId: 'employer_abc'.
     * @allow (update, delete) - An employer with UID 'employer_abc' can update or delete an internship posting they own.
     * @deny (create) - A user with UID 'user_xyz' cannot create an internship posting with employerId: 'employer_abc'.
     * @deny (update, delete) - A user with UID 'user_xyz' cannot update or delete an internship posting owned by 'employer_abc'.
     * @principle Allows public read access while restricting write access to the internship posting's owner.
     */
    match /internships/{internshipId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid;
    }
  }
}
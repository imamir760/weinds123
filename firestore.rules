/**
 * @fileoverview Firestore Security Rules for the prototype application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * allowing users to manage their own profiles. Employers, candidates, and TPOs can read Employer profiles for job applications/listings.
 *
 * Data Structure:
 * - /candidates/{userId}: Stores candidate profiles, accessible only to the owning user.
 * - /employers/{userId}: Stores employer profiles, accessible only to the owning user, but is readable for all users.
 * - /institutes/{userId}: Stores institute profiles, accessible only to the owning user.
 * - /jobs/{jobId}: Stores job postings. Only employers can create jobs, and only the owner can modify/delete them. Publicly readable.
 * - /internships/{internshipId}: Stores internship postings. Only employers can create internships, and only the owner can modify/delete them. Publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - get access to employers is public (fixed the error).
 * - All write operations require a verified, authenticated user.
 *
 * Denormalization for Authorization:
 * - Jobs and Internships include an `employerId` field to simplify ownership checks.
 *
 * Structural Segregation:
 * - Private user profiles are stored under user-specific paths (e.g., /candidates/{userId}) while public listings are in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Secure user profiles for candidates.
     * @path /candidates/{userId}
     * @allow (create) - A candidate can create their own profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - Only the candidate can read, update, or delete their own profile.
     * @deny (create) - A candidate cannot create a profile with a mismatched userId.
     * @principle Enforces document ownership for all operations on candidate profiles.
     */
    match /candidates/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure employer profiles.
     * @path /employers/{userId}
     * @allow (create) - An employer can create their own profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - Only the employer can read, update, or delete their own profile.
     * @deny (create) - An employer cannot create a profile with a mismatched userId.
     * @principle Enforces document ownership for all operations on employer profiles.
     */
    match /employers/{userId} {
      allow get, list: if true;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure institute profiles for TPOs.
     * @path /institutes/{userId}
     * @allow (create) - A TPO can create their own profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - Only the TPO can read, update, or delete their own profile.
     * @deny (create) - A TPO cannot create a profile with a mismatched userId.
     * @principle Enforces document ownership for all operations on institute profiles.
     */
    match /institutes/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) - Anyone can read job postings.
     * @allow (create) - Only employers can create job postings, and the employerId must match their UID.
     * @allow (update, delete) - Only the employer who created the job can update or delete it.
     * @deny (create) - Non-employers cannot create job postings.
     * @deny (update, delete) - Other users cannot update or delete job postings.
     * @principle Allows public read access but restricts write access to the job posting's owner.
     */
    match /jobs/{jobId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid;
    }

        /**
         * @description Secure internship postings.
         * @path /internships/{internshipId}
         * @allow (get, list) - Anyone can read internship postings.
         * @allow (create) - Only employers can create internship postings, and the employerId must match their UID.
         * @allow (update, delete) - Only the employer who created the internship can update or delete it.
         * @deny (create) - Non-employers cannot create internship postings.
         * @deny (update, delete) - Other users cannot update or delete internship postings.
         * @principle Allows public read access but restricts write access to the internship posting's owner.
         */
    match /internships/{internshipId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid;
    }
  }
}
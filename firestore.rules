/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for profiles and allows employers to manage their own job/internship postings and applications.
 *
 * Data Structure:
 * - User profiles are stored under `/candidates/{userId}`, `/employers/{userId}`, and `/institutes/{userId}`.
 * - Job postings are stored under `/jobs/{jobId}` and internship postings under `/internships/{internshipId}`.
 * - Applications are stored under `/applications/{applicationId}`.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed.
 * - Ownership is validated on both create and update operations to prevent unauthorized data modification.
 * - Public read access is not generally granted, except where explicitly specified for public listings.
 *
 * Denormalization for Authorization:
 *  - Jobs and Internships store the `employerId` directly on the document.
 *  - Applications store both `candidateId` and `employerId` directly on the document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures candidate profiles, allowing only the owner to read and write.
     * @path /candidates/{userId}
     * @allow (create, update, get, list, delete) User with matching {userId} can perform all operations.
     * @deny (create, update, get, list, delete) User with non-matching {userId} cannot perform any operations.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.auth.token.email == request.resource.data.email;
      allow update: if isSignedIn() && isOwner(userId) && request.auth.token.email == resource.data.email;
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secures employer profiles, allowing only the owner to read and write.
     * @path /employers/{userId}
     * @allow (create, update, get, list, delete) User with matching {userId} can perform all operations.
     * @deny (create, update, get, list, delete) User with non-matching {userId} cannot perform any operations.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.auth.token.email == request.resource.data.email;
      allow update: if isSignedIn() && isOwner(userId) && request.auth.token.email == resource.data.email;
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secures institute profiles, allowing only the owner to read and write.
     * @path /institutes/{userId}
     * @allow (create, update, get, list, delete) User with matching {userId} can perform all operations.
     * @deny (create, update, get, list, delete) User with non-matching {userId} cannot perform any operations.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.auth.token.email == request.resource.data.tpoEmail;
      allow update: if isSignedIn() && isOwner(userId) && request.auth.token.email == resource.data.tpoEmail;
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secures job postings, allowing only the employer to create, update, and delete.  Anyone can read.
     * @path /jobs/{jobId}
     * @allow (get, list) Anyone can read job postings.
     * @allow (create) Employer with matching employerId can create a job posting.
     * @allow (update, delete) Employer with matching employerId can update or delete the job posting.
     * @deny (create, update, delete) Non-employer users cannot create, update, or delete job postings.
     * @principle Enforces employer ownership for job postings.
     */
    match /jobs/{jobId} {
        function isOwner(employerId) {
            return request.auth.uid == employerId;
        }
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && isOwner(request.resource.data.employerId);
        allow update: if isSignedIn() && isOwner(resource.data.employerId);
        allow delete: if isSignedIn() && isOwner(resource.data.employerId);
    }

     /**
      * @description Secures internship postings, allowing only the employer to create, update, and delete. Anyone can read.
      * @path /internships/{internshipId}
      * @allow (get, list) Anyone can read internship postings.
      * @allow (create) Employer with matching employerId can create an internship posting.
      * @allow (update, delete) Employer with matching employerId can update or delete the internship posting.
      * @deny (create, update, delete) Non-employer users cannot create, update, or delete internship postings.
      * @principle Enforces employer ownership for internship postings.
      */
    match /internships/{internshipId} {
        function isOwner(employerId) {
            return request.auth.uid == employerId;
        }
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && isOwner(request.resource.data.employerId);
        allow update: if isSignedIn() && isOwner(resource.data.employerId);
        allow delete: if isSignedIn() && isOwner(resource.data.employerId);
    }

    /**
     * @description Secures applications, allowing only the candidate or employer to read and the employer or candidate to create.
     * @path /applications/{applicationId}
     * @allow (get, list) Employer or candidate with matching employerId or candidateId can read the application.
     * @allow (create) Candidate with matching candidateId or employer with matching employerId can create an application.
     * @allow (update, delete) No one can update or delete an application.
     * @deny (create, get, list) Non-candidate and non-employer users cannot create, read, or list applications.
     * @principle Enforces candidate or employer ownership for applications.
     */
    match /applications/{applicationId} {
      function isCandidate(candidateId) {
        return request.auth.uid == candidateId;
      }
      function isEmployer(employerId) {
        return request.auth.uid == employerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && (isCandidate(resource.data.candidateId) || isEmployer(resource.data.employerId));
      allow list: if isSignedIn() && (isCandidate(resource.data.candidateId) || isEmployer(resource.data.employerId)); // Fix: Employer can list applications related to their jobs
      allow create: if isSignedIn() && (isCandidate(request.resource.data.candidateId) || isEmployer(request.resource.data.employerId));
      allow update: if false;
      allow delete: if false;
    }
  }
}
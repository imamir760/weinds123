/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a strict user-ownership model for user profiles and public read access with owner-only writes for job and internship postings.
 *
 * Data Structure:
 * - User profiles (candidates, employers, institutes) are stored in collections named after their role, with documents keyed by userId.
 * - Jobs and internships are stored in top-level collections with public read access.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Jobs and Internships are publicly readable but only editable by their owner (employerId).
 * - Listing of user profiles is disallowed to prevent data scraping.
 *
 * Denormalization for Authorization:
 * - Job and Internship documents MUST contain an `employerId` field to enforce ownership for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to candidate profiles. Candidates can only read and write their own profile data.
     * @path /candidates/{userId}
     * @allow (create) - Authenticated user with UID matching {userId} can create their profile.
     * @allow (get, update, delete) - Authenticated user with UID matching {userId} can read, update, and delete their profile.
     * @deny (create) - Authenticated user with UID not matching {userId} cannot create a profile.
     * @deny (get, update, delete) - Authenticated user with UID not matching {userId} cannot read, update, or delete a profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to employer profiles. Employers can only read and write their own profile data.
     * @path /employers/{userId}
     * @allow (create) - Authenticated user with UID matching {userId} can create their profile.
     * @allow (get, update, delete) - Authenticated user with UID matching {userId} can read, update, and delete their profile.
     * @deny (create) - Authenticated user with UID not matching {userId} cannot create a profile.
     * @deny (get, update, delete) - Authenticated user with UID not matching {userId} cannot read, update, or delete a profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to institute profiles. Institutes (TPOs) can only read and write their own profile data.
     * @path /institutes/{userId}
     * @allow (create) - Authenticated user with UID matching {userId} can create their profile.
     * @allow (get, update, delete) - Authenticated user with UID matching {userId} can read, update, and delete their profile.
     * @deny (create) - Authenticated user with UID not matching {userId} cannot create a profile.
     * @deny (get, update, delete) - Authenticated user with UID not matching {userId} cannot read, update, or delete a profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to job postings. Jobs are publicly readable but only the owner (employer) can create, update, or delete them.
     * @path /jobs/{jobId}
     * @allow (get, list) - Any user can read/list job postings.
     * @allow (create) - Authenticated user can create a job posting if `employerId` matches their UID.
     * @allow (update, delete) - Authenticated user can update/delete a job posting if they are the owner (employerId matches their UID) and the document exists.
     * @deny (create) - Authenticated user cannot create a job posting if `employerId` does not match their UID.
     * @deny (update, delete) - Authenticated user cannot update/delete a job posting if they are not the owner or the document does not exist.
     * @principle Allows public read access while enforcing document ownership for writes. Validates relational integrity.
     */
    match /jobs/{jobId} {
      function isOwner(employerId) {
        return request.auth != null && request.auth.uid == employerId;
      }

      function isExistingOwner(employerId) {
          return isOwner(employerId) && resource != null;
      }
        
      allow get, list: if true;
      allow create: if isOwner(request.resource.data.employerId);
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

      /**
       * @description Controls access to internship postings. Internships are publicly readable but only the owner (employer) can create, update, or delete them.
       * @path /internships/{internshipId}
       * @allow (get, list) - Any user can read/list internship postings.
       * @allow (create) - Authenticated user can create an internship posting if `employerId` matches their UID.
       * @allow (update, delete) - Authenticated user can update/delete an internship posting if they are the owner (employerId matches their UID) and the document exists.
       * @deny (create) - Authenticated user cannot create an internship posting if `employerId` does not match their UID.
       * @deny (update, delete) - Authenticated user cannot update/delete an internship posting if they are not the owner or the document does not exist.
       * @principle Allows public read access while enforcing document ownership for writes. Validates relational integrity.
       */
      match /internships/{internshipId} {
          function isOwner(employerId) {
              return request.auth != null && request.auth.uid == employerId;
          }

          function isExistingOwner(employerId) {
              return isOwner(employerId) && resource != null;
          }

          allow get, list: if true;
          allow create: if isOwner(request.resource.data.employerId);
          allow update: if isExistingOwner(resource.data.employerId);
          allow delete: if isExistingOwner(resource.data.employerId);
      }
  }
}
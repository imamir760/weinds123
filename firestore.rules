/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to job and internship postings while restricting
 * write access to authorized employers. Applications are secured to allow only
 * the candidate and employer to access specific application documents.
 *
 * Data Structure:
 * - /candidates/{userId}: Stores candidate profiles, accessible only by the user.
 * - /employers/{userId}: Stores employer profiles, accessible only by the user.
 * - /institutes/{userId}: Stores institute profiles, accessible only by the user.
 * - /jobs/{jobId}: Stores job postings, publicly readable, writeable only by authorized employers.
 * - /internships/{internshipId}: Stores internship postings, publicly readable, writeable only by authorized employers.
 * - /applications/{applicationId}: Stores applications, accessible only by the candidate and the employer.
 *
 * Key Security Decisions:
 * - User profiles (candidate, employer, institute) are strictly private and only accessible
 *   by the authenticated user with the matching ID.
 * - Job and internship postings are publicly readable, but write access is restricted to the
 *   posting employer.
 * - Applications are accessible to both the candidate and employer involved.
 * - Data shape validation is relaxed to allow for rapid prototyping but critical
 *   relational integrity checks (e.g., ownership) are enforced.
 *
 * Denormalization for Authorization:
 * - Job and Internship documents include an `employerId` field for ownership checks.
 * - Application documents include `candidateId` and `employerId` for access control.
 *
 * Structural Segregation:
 * - Separate collections are used for candidate, employer, and institute profiles to
 *   maintain clear access control boundaries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to candidate profiles.
     * @path /candidates/{userId}
     * @allow (get, list) Authenticated user with matching userId.
     * @allow (create) Authenticated user creating their own profile (userId matches auth.uid).
     * @allow (update, delete) Authenticated user with matching userId.
     * @deny (get, list) Authenticated user trying to access another user's profile.
     * @deny (create) Authenticated user attempting to create a profile with a mismatched userId.
     * @deny (update, delete) Unauthenticated user or user attempting to modify another user's profile.
     * @principle Enforces document ownership for candidate profiles.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to employer profiles.
     * @path /employers/{userId}
     * @allow (get, list) Authenticated user with matching userId.
     * @allow (create) Authenticated user creating their own profile (userId matches auth.uid).
     * @allow (update, delete) Authenticated user with matching userId.
     * @deny (get, list) Authenticated user trying to access another user's profile.
     * @deny (create) Authenticated user attempting to create a profile with a mismatched userId.
     * @deny (update, delete) Unauthenticated user or user attempting to modify another user's profile.
     * @principle Enforces document ownership for employer profiles.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to institute profiles.
     * @path /institutes/{userId}
     * @allow (get, list) Authenticated user with matching userId.
     * @allow (create) Authenticated user creating their own profile (userId matches auth.uid).
     * @allow (update, delete) Authenticated user with matching userId.
     * @deny (get, list) Authenticated user trying to access another user's profile.
     * @deny (create) Authenticated user attempting to create a profile with a mismatched userId.
     * @deny (update, delete) Unauthenticated user or user attempting to modify another user's profile.
     * @principle Enforces document ownership for institute profiles.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) Public read access to all job postings.
     * @allow (create) Authenticated employer creating a job posting with a matching employerId.
     * @allow (update, delete) Authenticated employer with matching employerId, ensuring the document exists.
     * @deny (create) Unauthenticated user or user attempting to create a job posting with a mismatched employerId.
     * @deny (update, delete) Unauthenticated user or user attempting to modify a job posting they don't own.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /jobs/{jobId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }
      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Controls access to internship postings.
     * @path /internships/{internshipId}
     * @allow (get, list) Public read access to all internship postings.
     * @allow (create) Authenticated employer creating an internship posting with a matching employerId.
     * @allow (update, delete) Authenticated employer with matching employerId, ensuring the document exists.
     * @deny (create) Unauthenticated user or user attempting to create an internship posting with a mismatched employerId.
     * @deny (update, delete) Unauthenticated user or user attempting to modify an internship posting they don't own.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /internships/{internshipId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }
      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Controls access to applications.
     * @path /applications/{applicationId}
     * @allow (get, list) Authenticated candidate or employer accessing their own applications.
     * @allow (create) Authenticated candidate creating an application with matching candidateId.
     * @allow (update, delete) No updates or deletes allowed.
     * @deny (get, list) Unauthenticated user or user trying to access another user's application.
     * @deny (create) Unauthenticated user or user attempting to create an application with a mismatched candidateId.
     * @principle Restricts access to applications based on candidate and employer IDs.
     */
    match /applications/{applicationId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isCandidateOrEmployer(candidateId, employerId) {
            return isSignedIn() && (request.auth.uid == candidateId || request.auth.uid == employerId);
        }
        function isCandidate(candidateId) {
            return isSignedIn() && request.auth.uid == candidateId;
        }

        allow get: if isCandidateOrEmployer(resource.data.candidateId, resource.data.employerId);
        allow list: if isCandidateOrEmployer(resource.data.candidateId, resource.data.employerId);
        allow create: if isCandidate(request.resource.data.candidateId);
        allow update: if false;
        allow delete: if false;
    }
  }
}
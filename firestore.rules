/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy: This ruleset prioritizes secure data access based on user roles and ownership.
 * It enforces strict access control, allowing users to manage their own data while restricting
 * unauthorized access to sensitive information.
 *
 * Data Structure: The Firestore database is structured with separate collections for users
 * (candidates, employers, institutes), job/internship postings, and applications.
 * User profiles are stored under `/candidates/{userId}`, `/employers/{userId}`, and
 * `/institutes/{userId}` respectively. Job and internship postings are stored in the
 * `/jobs/{jobId}` and `/internships/{internshipId}` collections. Applications are stored in
 * `/applications/{applicationId}`.
 *
 * Key Security Decisions:
 * - User listing is explicitly disallowed.
 * - Data validation is limited to fields crucial for authorization and relational integrity.
 * - Public read access is granted to the `/jobs` and `/internships` collections, while
 *   write access is restricted to authorized employers.
 * - The `/applications` collection enforces ownership-based access, ensuring that only the
 *   relevant candidate or employer can access application data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to check against.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of an existing document.
     * @param {string} userId - The user ID to check against.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Grants access to candidate profiles.
     * @path /candidates/{userId}
     * @allow (create) - A candidate can create their own profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - A candidate can only access/modify their own profile.
     * @deny (create) - A candidate cannot create a profile with a userId that does not match their auth.uid.
     * @principle Enforces user ownership for profile management.
     */
    match /candidates/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to employer profiles.
     * @path /employers/{userId}
     * @allow (create) - An employer can create their own profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - An employer can only access/modify their own profile.
     * @deny (create) - An employer cannot create a profile with a userId that does not match their auth.uid.
     * @principle Enforces user ownership for profile management.
     */
    match /employers/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to institute profiles.
     * @path /institutes/{userId}
     * @allow (create) - A TPO/institute can create their own profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - A TPO/institute can only access/modify their own profile.
     * @deny (create) - A TPO/institute cannot create a profile with a userId that does not match their auth.uid.
     * @principle Enforces user ownership for profile management.
     */
    match /institutes/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) - Allows public read access to job postings.
     * @allow (create) - Allows employers to create job postings with validated ownership.
     * @allow (update, delete) - Allows employers to modify/delete their own job postings with validated ownership.
     * @deny (create) - Denies job creation if the employerId does not match the authenticated user.
     * @deny (update, delete) - Denies modification/deletion if the user is not the owner of the job posting.
     * @principle Allows public read access with owner-only writes.
     */
    match /jobs/{jobId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.employerId;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

   /**
     * @description Grants access to internship postings.
     * @path /internships/{internshipId}
     * @allow (get, list) - Allows public read access to internship postings.
     * @allow (create) - Allows employers to create internship postings with validated ownership.
     * @allow (update, delete) - Allows employers to modify/delete their own internship postings with validated ownership.
     * @deny (create) - Denies internship creation if the employerId does not match the authenticated user.
     * @deny (update, delete) - Denies modification/deletion if the user is not the owner of the internship posting.
     * @principle Allows public read access with owner-only writes.
     */
    match /internships/{internshipId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.employerId;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

   /**
     * @description Grants access to applications.
     * @path /applications/{applicationId}
     * @allow (get) - Allows the candidate or employer involved in the application to read it.
     * @allow (list) - Allows the candidate or employer to list applications related to them.
     * @allow (create) - Allows candidates to create applications with validated ownership.
     * @allow (update, delete) - Allows the candidate or employer to update/delete the application (if necessary, based on app logic).
     * @deny (create) - Denies application creation if the candidateId does not match the authenticated user.
     * @deny (update, delete) - Denies modification/deletion if the user is not the candidate or employer associated with the application.
     * @principle Enforces ownership-based access for application data.
     */
    match /applications/{applicationId} {
      allow get: if isSignedIn() && (request.auth.uid == resource.data.candidateId || request.auth.uid == resource.data.employerId);
      allow list: if isSignedIn() && (request.auth.uid == resource.data.candidateId || request.auth.uid == resource.data.employerId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.candidateId;
      allow update: if isSignedIn() && (request.auth.uid == resource.data.candidateId || request.auth.uid == resource.data.employerId) && resource != null;
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.candidateId || request.auth.uid == resource.data.employerId) && resource != null;
    }
  }
}
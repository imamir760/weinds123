/**
 * @description This ruleset enforces a strict user-ownership model for user profiles and requires ownership validation for job/internship postings and applications.
 * Public read access is granted for job and internship postings. Skill test submissions and reports are secured with owner-only access.
 * @dataStructure
 * - User profiles (candidate, employer, institute) are stored under their respective collections: `/candidates/{userId}`, `/employers/{userId}`, and `/institutes/{userId}`.
 * - Job and internship postings are stored in the top-level collections `/jobs/{jobId}` and `/internships/{internshipId}`, respectively.
 * - Applications are stored in the top-level collection `/applications/{applicationId}`.
 * - Skill test submissions and reports are stored in the top-level collections `/skillTestSubmissions/{submissionId}` and `/skillTestReports/{reportId}`, respectively.
 * @keySecurityDecisions
 * - User listing is disallowed for all user profile collections (`candidates`, `employers`, `institutes`).
 * - Job and internship postings are publicly readable but only creatable, updatable, and deletable by the owning employer.
 * - Applications can be created by candidates, but only employers can update or delete them.
 * @denormalizationForAuthorization
 * - Jobs and Internships: Each document has an `employerId` field, which is used to control write access.
 * - Applications: Each document has `candidateId` and `employerId` fields, used to control create and update/delete access, respectively.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces ownership for candidate profiles.
     * @path /candidates/{userId}
     * @allow (create) User with UID 'user_abc' can create a profile at /candidates/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile at /candidates/user_abc.
     * @allow (get) User with UID 'user_abc' can get their profile at /candidates/user_abc.
     * @deny (get) User with UID 'user_xyz' cannot get the profile at /candidates/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces ownership for employer profiles.
     * @path /employers/{userId}
     * @allow (create) User with UID 'user_abc' can create a profile at /employers/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile at /employers/user_abc.
     * @allow (get) User with UID 'user_abc' can get their profile at /employers/user_abc.
     * @deny (get) User with UID 'user_xyz' cannot get the profile at /employers/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces ownership for institute profiles.
     * @path /institutes/{userId}
     * @allow (create) User with UID 'user_abc' can create a profile at /institutes/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile at /institutes/user_abc.
     * @allow (get) User with UID 'user_abc' can get their profile at /institutes/user_abc.
     * @deny (get) User with UID 'user_xyz' cannot get the profile at /institutes/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to job postings, but restricts writes to the owning employer.
     * @path /jobs/{jobId}
     * @allow (get) Any user can read a job posting.
     * @allow (list) Any user can list job postings.
     * @allow (create) Employer with UID 'employer_abc' can create a job posting with employerId: 'employer_abc'.
     * @deny (create) Employer with UID 'employer_xyz' cannot create a job posting with employerId: 'employer_abc'.
     * @allow (update) Employer with UID 'employer_abc' can update a job posting with employerId: 'employer_abc'.
     * @deny (update) Employer with UID 'employer_xyz' cannot update a job posting with employerId: 'employer_abc'.
     * @principle Grants public read access while enforcing ownership for writes.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid == request.resource.data.employerId;
      allow update: if request.auth.uid == resource.data.employerId;
      allow delete: if request.auth.uid == resource.data.employerId;
    }

    /**
     * @description Allows public read access to internship postings, but restricts writes to the owning employer.
     * @path /internships/{internshipId}
     * @allow (get) Any user can read an internship posting.
     * @allow (list) Any user can list internship postings.
     * @allow (create) Employer with UID 'employer_abc' can create an internship posting with employerId: 'employer_abc'.
     * @deny (create) Employer with UID 'employer_xyz' cannot create an internship posting with employerId: 'employer_abc'.
     * @allow (update) Employer with UID 'employer_abc' can update an internship posting with employerId: 'employer_abc'.
     * @deny (update) Employer with UID 'employer_xyz' cannot update an internship posting with employerId: 'employer_abc'.
     * @principle Grants public read access while enforcing ownership for writes.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid == request.resource.data.employerId;
      allow update: if request.auth.uid == resource.data.employerId;
      allow delete: if request.auth.uid == resource.data.employerId;
    }

    /**
     * @description Allows candidates to create applications, and employers to update/delete them.
     * @path /applications/{applicationId}
     * @allow (create) Candidate with UID 'candidate_abc' can create an application with candidateId: 'candidate_abc'.
     * @deny (create) Candidate with UID 'candidate_xyz' cannot create an application with candidateId: 'candidate_abc'.
     * @allow (update) Employer with UID 'employer_abc' can update an application with employerId: 'employer_abc'.
     * @deny (update) Employer with UID 'employer_xyz' cannot update an application with employerId: 'employer_abc'.
     * @principle Allows candidate-created applications with employer-managed updates and deletes.
     */
    match /applications/{applicationId} {
      allow get: if false; // Applications should not be publicly readable
      allow list: if false;
      allow create: if request.auth.uid == request.resource.data.candidateId;
      allow update: if request.auth.uid == resource.data.employerId;
      allow delete: if request.auth.uid == resource.data.employerId;
    }

     /**
     * @description Enforces ownership for skill test submissions.
     * @path /skillTestSubmissions/{submissionId}
     * @allow (create) User with UID 'user_abc' can create a submission at /skillTestSubmissions/submission_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a submission at /skillTestSubmissions/submission_abc.
     * @allow (get) User with UID 'user_abc' can get their submission at /skillTestSubmissions/submission_abc.
     * @deny (get) User with UID 'user_xyz' cannot get the submission at /skillTestSubmissions/submission_abc.
     */
    match /skillTestSubmissions/{submissionId} {
      allow get: if request.auth.uid == resource.data.candidateId;
      allow list: if false;
      allow create: if request.auth.uid == request.resource.data.candidateId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces ownership for skill test reports.
     * @path /skillTestReports/{reportId}
     */
    match /skillTestReports/{reportId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

  }
}
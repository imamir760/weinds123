/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles
 * (candidates, employers, institutes). Job and internship postings are publicly
 * readable but only createable, updatable, or deletable by their owners
 * (employers).
 *
 * Data Structure:
 * - /candidates/{userId}: Stores candidate profiles.
 * - /employers/{userId}: Stores employer profiles.
 * - /institutes/{userId}: Stores institute profiles.
 * - /jobs/{jobId}: Stores job postings.
 * - /internships/{internshipId}: Stores internship postings.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Job and internship postings are publicly readable.
 * - Only the employer who created a job or internship can modify or delete it.
 * - Listing of user profiles (candidates, employers, institutes) is disallowed for privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to candidate profiles. Only the user themselves can read and write their own profile.
     * @path /candidates/{userId}
     * @allow (create, update, get, delete, list) if request.auth.uid == userId
     * @deny (create, update, get, delete, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to employer profiles. Only the user themselves can read and write their own profile.
     * @path /employers/{userId}
     * @allow (create, update, get, delete, list) if request.auth.uid == userId
     * @deny (create, update, get, delete, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to institute profiles. Only the user themselves can read and write their own profile.
     * @path /institutes/{userId}
     * @allow (create, update, get, delete, list) if request.auth.uid == userId
     * @deny (create, update, get, delete, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to job postings. Allows public read access, but restricts create, update, and delete to the job's owner (employer).
     * @path /jobs/{jobId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == request.resource.data.employerId
     * @allow (update, delete) if request.auth.uid == resource.data.employerId
     * @deny (create, update, delete) if request.auth.uid != resource.data.employerId
     * @principle Allows public reads, but enforces owner-only writes and validates the employerId on create.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid == request.resource.data.employerId;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Controls access to internship postings. Allows public read access, but restricts create, update, and delete to the internship's owner (employer).
     * @path /internships/{internshipId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == request.resource.data.employerId
     * @allow (update, delete) if request.auth.uid == resource.data.employerId
     * @deny (create, update, delete) if request.auth.uid != resource.data.employerId
     * @principle Allows public reads, but enforces owner-only writes and validates the employerId on create.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid == request.resource.data.employerId;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the authenticated user's ID matches the provided userId, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource, and that the resource exists
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the authenticated user's ID matches the provided userId, and the resource exists.
     */
     function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
     }
  }
}
/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for profile data,
 * ensuring that users can only read and write their own profile information.
 * For job and internship postings, employers have full control over their own postings.
 * Candidates can apply to jobs and internships.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profile data, owned by the user.
 * - /candidates/{userId}/jobApplications/{jobId}: Job applications submitted by the candidate.
 * - /candidates/{userId}/internshipApplications/{internshipId}: Internship applications submitted by the candidate.
 * - /employers/{userId}: Employer profile data, owned by the user.
 * - /institutes/{userId}: Institute profile data, owned by the user.
 * - /jobs/{jobId}: Job postings, owned by the employer who created them.
 * - /jobs/{jobId}/applicants/{candidateId}: Applicants for a specific job.
 * - /internships/{internshipId}: Internship postings, owned by the employer who created them.
 * - /internships/{internshipId}/applicants/{candidateId}: Applicants for a specific internship.
 *
 * Key Security Decisions:
 * - Users can only create their own profile document (self-creation).
 * - Users cannot list all users.
 * - Employers can only manage their own job and internship postings.
 * - Candidates can only create applications for jobs and internships.
 * - Denormalization is not currently used, but could be implemented for simpler rules in the future if needed.
 */

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows candidates to manage their own profile data.
     * @path /candidates/{userId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // prevent listing all candidates
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows candidates to manage their job applications.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create) if request.auth.uid == userId
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

     /**
     * @description Allows candidates to manage their internship applications.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (create) if request.auth.uid == userId
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows employers to manage their own profile data.
     * @path /employers/{userId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // prevent listing all employers
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows institutes to manage their own profile data.
     * @path /institutes/{userId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // prevent listing all institutes
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read job postings, but only employers can create, update, or delete them.
     * @path /jobs/{jobId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == request.resource.data.employerId
     * @allow (update, delete) if resource.data.employerId == request.auth.uid
     * @deny (create) if request.auth.uid != request.resource.data.employerId
     * @deny (update, delete) if resource.data.employerId != request.auth.uid
     * @principle Public read, owner-only writes.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwnerByField(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwnerByField(resource.data.employerId);
    }

    /**
     * @description Allows employers to view applicants for their jobs. Candidates cannot list applicants.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (get, list) if resource.data.candidateId == request.auth.uid || get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid
     * @allow (create) if request.auth.uid != null
     * @deny (create) if request.auth.uid == null
     * @principle Restricts access to job applicants to the job poster.
     */
    match /jobs/{jobId}/applicants/{candidateId} {
      allow get: if isSignedIn() && (isOwnerByField(resource.data.candidateId) || isEmployerOfJob(jobId));
      allow list: if isSignedIn() && isEmployerOfJob(jobId);
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read internship postings, but only employers can create, update, or delete them.
     * @path /internships/{internshipId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == request.resource.data.employerId
     * @allow (update, delete) if resource.data.employerId == request.auth.uid
     * @deny (create) if request.auth.uid != request.resource.data.employerId
     * @deny (update, delete) if resource.data.employerId != request.auth.uid
     * @principle Public read, owner-only writes.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwnerByField(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwnerByField(resource.data.employerId);
    }

    /**
     * @description Allows employers to view applicants for their internships. Candidates cannot list applicants.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (get, list) if resource.data.candidateId == request.auth.uid || get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid
     * @allow (create) if request.auth.uid != null
     * @deny (create) if request.auth.uid == null
     * @principle Restricts access to internship applicants to the internship poster.
     */
    match /internships/{internshipId}/applicants/{candidateId} {
      allow get: if isSignedIn() && (isOwnerByField(resource.data.candidateId) || isEmployerOfInternship(internshipId));
      allow list: if isSignedIn() && isEmployerOfInternship(internshipId);
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isOwnerByField(ownerId) {
      return request.auth.uid == ownerId;
    }

    function isExistingOwnerByField(ownerId) {
      return isSignedIn() && request.auth.uid == ownerId && resource != null;
    }

    function isEmployerOfJob(jobId) {
      return get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
    }

    function isEmployerOfInternship(internshipId) {
      return get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
    }
  }
}
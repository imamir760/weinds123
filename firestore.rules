/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model, with specific rules for candidates, employers, and TPOs.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profiles, owned by the user.
 * - /candidates/{userId}/jobApplications/{jobId}: Job applications submitted by the candidate.
 * - /candidates/{userId}/internshipApplications/{internshipId}: Internship applications submitted by the candidate.
 * - /employers/{userId}: Employer profiles, owned by the user.
 * - /institutes/{userId}: Institute profiles, owned by the user (TPOs).
 * - /jobs/{jobId}: Job postings, owned by the employer who created them.
 * - /jobs/{jobId}/applicants/{candidateId}: Applicants for a specific job.
 * - /internships/{internshipId}: Internship postings, owned by the employer who created them.
 * - /internships/{internshipId}/applicants/{candidateId}: Applicants for a specific internship.
 *
 * Key Security Decisions:
 * - Candidates can only read their own profile data and create application docs for the jobs/internships they are applying to.
 * - Employers can read candidate profiles.
 * - Employers can only create, update, and delete job and internship postings they own.
 * - Employers can only read and manage applicants for their own job and internship postings.
 * - Listing of all candidates, employers, institutes, jobs, and internships is generally disallowed to prevent data scraping.
 * - TPOs can only read and update their own institute profiles.
 *
 * Denormalization for Authorization:
 * - Job and Internship documents contain an `employerId` field, which is used to quickly verify ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows candidates to read their own profile and employers to read candidate profiles.
     * @path /candidates/{userId}
     * @allow (get) Authenticated user (employer) can read candidate profiles.
     * @deny (list) No one can list all candidate profiles.
     * @deny (create) Only the user themselves can create their own profile, enforced by another rule.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      // Allow other signed-in users (e.g., employers) to read candidate profiles.
      // Change to `if true` if you want public read (not recommended for sensitive fields).
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a candidate to create, read, update, and delete their own job applications.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create) Candidate creates an application with the correct userId.
     * @allow (get) Candidate reads their own application.
     * @deny (create) Candidate attempts to create an application for another user.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

     /**
     * @description Allows a candidate to create, read, update, and delete their own internship applications.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (create) Candidate creates an application with the correct userId.
     * @allow (get) Candidate reads their own application.
     * @deny (create) Candidate attempts to create an application for another user.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows employers to manage their own profiles.
     * @path /employers/{userId}
     * @allow (create) Employer creates their own profile with the correct userId.
     * @allow (get) Employer reads their own profile.
     * @deny (create) Employer attempts to create a profile for another user.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows TPOs to manage their own institute profiles.
     * @path /institutes/{userId}
     * @allow (create) TPO creates their own profile with the correct userId.
     * @allow (get) TPO reads their own profile.
     * @deny (create) TPO attempts to create a profile for another user.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows employers to manage their own job postings.
     * @path /jobs/{jobId}
     * @allow (create) Employer creates a job posting with the correct employerId.
     * @allow (get) Anyone can read job postings.
     * @deny (create) Employer attempts to create a job posting for another employer.
     * @principle Enforces document ownership for writes and public read access.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if false;
      allow create: if request.auth != null && request.resource.data.employerId == request.auth.uid;
      allow update: if request.auth != null && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
      allow delete: if request.auth != null && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
    }

    /**
     * @description Allows the job owner to list applicants.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (list) Employer who owns the job can get and list applicants
     * @deny (list) Other users cannot list applicants.
     * @principle Enforces that only the job owner can view applicants.
     */
    match /jobs/{jobId}/applicants/{candidateId} {
      function getJobEmployerId() {
        return get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId;
      }

      // Employer who owns the job can get and list applicants
      allow get:  if request.auth != null && getJobEmployerId() == request.auth.uid;
      allow list: if false;

      // Employer can create/update/delete applicants if you intend that behaviour.
      // If candidates create applicant docs themselves, you should allow create by the candidate.
      allow create: if request.auth != null && getJobEmployerId() == request.auth.uid;
      allow update: if request.auth != null && getJobEmployerId() == request.auth.uid;
      allow delete: if request.auth != null && getJobEmployerId() == request.auth.uid;
    }

    /**
     * @description Allows employers to manage their own internship postings.
     * @path /internships/{internshipId}
     * @allow (create) Employer creates an internship posting with the correct employerId.
     * @allow (get) Anyone can read internship postings.
     * @deny (create) Employer attempts to create an internship posting for another employer.
     */
    match /internships/{internshipId} {
        allow get: if true;
        allow list: if false;
        allow create: if request.auth != null && request.resource.data.employerId == request.auth.uid;
        allow update: if request.auth != null && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
        allow delete: if request.auth != null && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
    }

    /**
     * @description Allows the internship owner to list applicants.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (list) Employer who owns the internship can get and list applicants
     * @deny (list) Other users cannot list applicants.
     * @principle Enforces that only the job owner can view applicants.
     */
    match /internships/{internshipId}/applicants/{candidateId} {
        function getInternshipEmployerId() {
            return get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId;
        }

        allow get:  if request.auth != null && getInternshipEmployerId() == request.auth.uid;
        allow list: if false;

        allow create: if request.auth != null && getInternshipEmployerId() == request.auth.uid;
        allow update: if request.auth != null && getInternshipEmployerId() == request.auth.uid;
        allow delete: if request.auth != null && getInternshipEmployerId() == request.auth.uid;
    }
  }
}
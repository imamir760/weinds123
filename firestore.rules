/**
 * @description This ruleset enforces a strict user-ownership model for user profiles
 *              and allows public read access to job and internship postings, with write
 *              access restricted to authorized employers.
 * @dataStructure
 *   - /users/{userId}: Stores public user profiles, accessible only to the owner.
 *   - /jobs/{jobId}: Stores job postings, publicly readable but writable only by the posting employer.
 *   - /internships/{internshipId}: Stores internship postings, publicly readable but writable only by the posting employer.
 * @keySecurityDecisions
 *   - Users can only read and write their own profile data. Listing all users is disallowed.
 *   - Job and internship postings are publicly readable, enabling wide discoverability.
 *   - Only the employer who created a job or internship can modify or delete it.
 * @denormalizationForAuthorization
 *   - Jobs and Internships have an 'employerId' field which is used to restrict write access to the employer who created the job/internship.
 *   - User documents are accessed by their user id `/users/{userId}` which allows matching `request.auth.uid` to the path.
 * @structuralSegregation
 *   - Public postings (jobs, internships) are stored in top-level collections for easy public listing.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching userId.
     * @allow (get) - Authenticated user reads their own profile.
     * @allow (update) - Authenticated user updates their own profile.
     * @allow (delete) - Authenticated user deletes their own profile.
     * @deny (list) - Prevents listing all user profiles.
     * @deny (create) - Prevents creating a user with a mismatched userId.
     * @deny (update) - Prevents updating another user's profile.
     * @deny (delete) - Prevents deleting another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to job posting documents.
     * @path /jobs/{jobId}
     * @allow (get, list) - Anyone can read job postings.
     * @allow (create) - Authenticated user creates a job with their employerId.
     * @allow (update) - Only the employer who created the job can update it.
     * @allow (delete) - Only the employer who created the job can delete it.
     * @deny (create) - Prevents creating a job with a mismatched employerId.
     * @deny (update) - Prevents updating a job by someone other than the original employer.
     * @deny (delete) - Prevents deleting a job by someone other than the original employer.
     * @principle Public read access with owner-only writes.
     */
    match /jobs/{jobId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return request.auth.uid == employerId;
      }

      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Controls access to internship posting documents.
     * @path /internships/{internshipId}
     * @allow (get, list) - Anyone can read internship postings.
     * @allow (create) - Authenticated user creates an internship with their employerId.
     * @allow (update) - Only the employer who created the internship can update it.
     * @allow (delete) - Only the employer who created the internship can delete it.
     * @deny (create) - Prevents creating an internship with a mismatched employerId.
     * @deny (update) - Prevents updating an internship by someone other than the original employer.
     * @deny (delete) - Prevents deleting an internship by someone other than the original employer.
     * @principle Public read access with owner-only writes.
     */
    match /internships/{internshipId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return request.auth.uid == employerId;
      }

      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }
  }
}
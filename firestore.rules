/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and associated data
 * (job/internship applications). Employers can create and manage their own job and internship postings.
 * TPOs/Institutes can create and manage their own institute profiles.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profiles, owned by the user.
 * - /candidates/{userId}/jobApplications/{jobId}: Job applications submitted by a candidate.
 * - /candidates/{userId}/internshipApplications/{internshipId}: Internship applications submitted by a candidate.
 * - /employers/{userId}: Employer profiles, owned by the user.
 * - /institutes/{userId}: Institute profiles, owned by the user (TPO).
 * - /jobs/{jobId}: Job postings, owned by the employer who created them.
 * - /jobs/{jobId}/applicants/{candidateId}: Applicants for a specific job, managed by the employer.
 * - /internships/{internshipId}: Internship postings, owned by the employer who created them.
 * - /internships/{internshipId}/applicants/{candidateId}: Applicants for a specific internship, managed by the employer.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Employers can create, read, update, and delete their own job/internship postings.
 * - Employers can manage applicants for their own job/internship postings.
 * - TPOs can create, read, update, and delete their own institute profiles.
 * - Listing of job/internship applications is allowed only to the owning candidate.
 *
 * Denormalization for Authorization:
 * - Jobs and Internships have an `employerId` field to denote ownership by an employer.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to candidate profiles.
     * @path /candidates/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - A user can only access their own profile.
     * @deny (create) - A user cannot create a profile with a userId that doesn't match their auth UID.
     * @deny (update, delete) - A user cannot modify or delete someone else's profile.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages access to job applications submitted by a candidate.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create) - A user can create a job application under their own profile.
     * @allow (get, list, update, delete) - A user can only access their own job applications.
     * @deny (create) - A user cannot create a job application under someone else's profile.
     * @deny (update, delete) - A user cannot modify or delete someone else's job application.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId);
        allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages access to internship applications submitted by a candidate.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (create) - A user can create an internship application under their own profile.
     * @allow (get, list, update, delete) - A user can only access their own internship applications.
     * @deny (create) - A user cannot create an internship application under someone else's profile.
     * @deny (update, delete) - A user cannot modify or delete someone else's internship application.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId);
        allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages access to employer profiles.
     * @path /employers/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - A user can only access their own profile.
     * @deny (create) - A user cannot create a profile with a userId that doesn't match their auth UID.
     * @deny (update, delete) - A user cannot modify or delete someone else's profile.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages access to institute profiles (TPO).
     * @path /institutes/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - A user can only access their own profile.
     * @deny (create) - A user cannot create a profile with a userId that doesn't match their auth UID.
     * @deny (update, delete) - A user cannot modify or delete someone else's profile.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn() && isOwner(userId);
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId);
        allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages access to job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) - Anyone can read job postings.
     * @allow (create) - Only an employer can create a job posting, and `employerId` must match their UID.
     * @allow (update, delete) - Only the owning employer can update or delete a job posting.
     * @deny (create) - Non-employers cannot create job postings.
     * @deny (update, delete) - Non-owners cannot update or delete job postings.
     * @principle Public read with owner-only writes, enforces ownership on writes.
     */
    match /jobs/{jobId} {
      function isOwner() {
        return request.auth.uid == resource.data.employerId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

    /**
     * @description Manages access to applicants for a specific job.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (get, list) - Only the owning employer can read applicants for their jobs.
     * @allow (create) - Employers can create applicants for a job posting they own.
     * @allow (update, delete) - Only the owning employer can update or delete applicants for a job.
     * @deny (create) - Non-employers cannot create applicants.
     * @deny (update, delete) - Non-owners cannot update or delete applicants.
     * @principle Enforces employer ownership for applicants.
     */
     match /jobs/{jobId}/applicants/{candidateId} {
        function isJobOwner(jobId) {
          return get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
        }

        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn() && isJobOwner(jobId);
        allow list: if isSignedIn() && isJobOwner(jobId);
        allow create: if isSignedIn() && isJobOwner(jobId);
        allow update: if isSignedIn() && isJobOwner(jobId);
        allow delete: if isSignedIn() && isJobOwner(jobId);
    }

    /**
     * @description Manages access to internship postings.
     * @path /internships/{internshipId}
     * @allow (get, list) - Anyone can read internship postings.
     * @allow (create) - Only an employer can create an internship posting, and `employerId` must match their UID.
     * @allow (update, delete) - Only the owning employer can update or delete an internship posting.
     * @deny (create) - Non-employers cannot create internship postings.
     * @deny (update, delete) - Non-owners cannot update or delete internship postings.
     * @principle Public read with owner-only writes, enforces ownership on writes.
     */
    match /internships/{internshipId} {
      function isOwner() {
        return request.auth.uid == resource.data.employerId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

   /**
     * @description Manages access to applicants for a specific internship.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (get, list) - Only the owning employer can read applicants for their internships.
     * @allow (create) - Employers can create applicants for an internship posting they own.
     * @allow (update, delete) - Only the owning employer can update or delete applicants for an internship.
     * @deny (create) - Non-employers cannot create applicants.
     * @deny (update, delete) - Non-owners cannot update or delete applicants.
     * @principle Enforces employer ownership for applicants.
     */
    match /internships/{internshipId}/applicants/{candidateId} {
        function isInternshipOwner(internshipId) {
          return get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
        }

        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn() && isInternshipOwner(internshipId);
        allow list: if isSignedIn() && isInternshipOwner(internshipId);
        allow create: if isSignedIn() && isInternshipOwner(internshipId);
        allow update: if isSignedIn() && isInternshipOwner(internshipId);
        allow delete: if isSignedIn() && isInternshipOwner(internshipId);
    }
  }
}
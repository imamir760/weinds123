rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure candidate profiles. Only the authenticated user can read/write their own profile.
     * @path /candidates/{userId}
     * @allow (create, update, get, delete) - User 'candidate_abc' can create, update, get, or delete their own profile at /candidates/candidate_abc when authenticated.
     * @deny (create, update, get, delete) - User 'candidate_xyz' cannot create, update, get, or delete the profile of user 'candidate_abc' at /candidates/candidate_abc.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /candidates/{userId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure employer profiles. Only the authenticated user can read/write their own profile.
     * @path /employers/{userId}
     * @allow (create, update, get, delete) - User 'employer_abc' can create, update, get, or delete their own profile at /employers/employer_abc when authenticated.
     * @deny (create, update, get, or delete) - User 'employer_xyz' cannot create, update, get, or delete the profile of user 'employer_abc' at /employers/employer_abc.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /employers/{userId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure institute profiles. Only the authenticated user can read/write their own profile.
     * @path /institutes/{userId}
     * @allow (create, update, get, delete) - User 'institute_abc' can create, update, get, or delete their own profile at /institutes/institute_abc when authenticated.
     * @deny (create, update, get, delete) - User 'institute_xyz' cannot create, update, get, or delete the profile of user 'institute_abc' at /institutes/institute_abc.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /institutes/{userId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to job postings with owner-only writes.
     * @path /jobs/{jobId}
     * @allow (get, list) - Any user can read job postings.
     * @allow (create) - An authenticated user can create a job posting if the employerId matches their UID.
     * @allow (update, delete) - Only the employer who created the job posting can update or delete it.
     * @deny (create) - An unauthenticated user cannot create a job posting.
     * @deny (update, delete) - A user cannot update or delete a job posting they don't own.
     * @principle Public read with owner-only writes.
     */
    match /jobs/{jobId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.employerId == request.auth.uid && resource.data.employerId == get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId;
      allow delete: if isSignedIn() && resource.data.employerId == get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId;
    }

    /**
     * @description Allows public read access to internship postings with owner-only writes.
     * @path /internships/{internshipId}
     * @allow (get, list) - Any user can read internship postings.
     * @allow (create) - An authenticated user can create an internship posting if the employerId matches their UID.
     * @allow (update, delete) - Only the employer who created the internship posting can update or delete it.
     * @deny (create) - An unauthenticated user cannot create an internship posting.
     * @deny (update, delete) - A user cannot update or delete an internship posting they don't own.
     * @principle Public read with owner-only writes.
     */
    match /internships/{internshipId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.employerId == request.auth.uid && resource.data.employerId == get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId;
      allow delete: if isSignedIn() && resource.data.employerId == get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId;
    }
  }
}
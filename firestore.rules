/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for user profiles
 * and a public-read, owner-write model for job and internship postings.  It also implements
 * role-based access control for administrative functions where appropriate.  Data shape is not validated
 * beyond ensuring relational integrity for ownership.
 *
 * Data Structure:
 * - /candidates/{userId}: Stores candidate profiles, accessible only to the owning user.
 * - /candidates/{userId}/jobApplications/{jobId}: Stores job applications, accessible only to the owning user.
 * - /candidates/{userId}/internshipApplications/{internshipId}: Stores internship applications, accessible only to the owning user.
 * - /employers/{userId}: Stores employer profiles, accessible only to the owning user.
 * - /institutes/{userId}: Stores institute profiles, accessible only to the owning user.
 * - /jobs/{jobId}: Stores job postings, publicly readable, writable only by the owning employer.
 * - /jobs/{jobId}/applicants/{candidateId}: Stores applicants for a job, writable only by the owning employer.
 * - /internships/{internshipId}: Stores internship postings, publicly readable, writable only by the owning employer.
 * - /internships/{internshipId}/applicants/{candidateId}: Stores applicants for an internship, writable only by the owning employer.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent enumeration.
 * - All write operations are explicitly denied unless an allow condition is met.
 * - The rules prioritize security and assume data integrity is handled at the application level.
 *
 * Denormalization for Authorization:
 * - Jobs and Internships MUST contain an `employerId` field to allow for ownership checks.
 *
 * Structural Segregation:
 * - Private user data (profiles, applications) is stored under user-specific subcollections.
 * - Public job and internship data is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the authenticated user's ID matches the provided user ID and the resource exists.
      * @param {string} userId The user ID to compare against.
      * @return {boolean} True if the user is the existing owner, false otherwise.
      */
    function isExistingOwner(userId) {
       return isOwner(userId) && resource != null;
    }

    /**
     * @description Candidate profiles are private and only accessible to the owning user.
     * @path /candidates/{userId}
     * @allow (read) User 'test_user' with ID 'test_user' can read their own profile.
     * @allow (create) User 'test_user' with ID 'test_user' can create their own profile.
     * @allow (update) User 'test_user' with ID 'test_user' can update their own profile.
     * @allow (delete) User 'test_user' with ID 'test_user' can delete their own profile.
     * @deny (read) User 'other_user' with ID 'other_user' cannot read 'test_user's profile.
     * @deny (create) User 'other_user' with ID 'other_user' cannot create a profile with ID 'test_user'.
     * @deny (update) User 'other_user' with ID 'other_user' cannot update 'test_user's profile.
     * @deny (delete) User 'other_user' with ID 'other_user' cannot delete 'test_user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Job applications are private and only accessible to the owning candidate.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (read) User 'test_user' with ID 'test_user' can read their own job application.
     * @allow (create) User 'test_user' with ID 'test_user' can create their own job application.
     * @allow (update) User 'test_user' with ID 'test_user' can update their own job application.
     * @allow (delete) User 'test_user' with ID 'test_user' can delete their own job application.
     * @deny (read) User 'other_user' with ID 'other_user' cannot read 'test_user's job application.
     * @deny (create) User 'other_user' with ID 'other_user' cannot create a job application with ID 'test_user'.
     * @deny (update) User 'other_user' with ID 'other_user' cannot update 'test_user's job application.
     * @deny (delete) User 'other_user' with ID 'other_user' cannot delete 'test_user's job application.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Internship applications are private and only accessible to the owning candidate.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (read) User 'test_user' with ID 'test_user' can read their own internship application.
     * @allow (create) User 'test_user' with ID 'test_user' can create their own internship application.
     * @allow (update) User 'test_user' with ID 'test_user' can update their own internship application.
     * @allow (delete) User 'test_user' with ID 'test_user' can delete their own internship application.
     * @deny (read) User 'other_user' with ID 'other_user' cannot read 'test_user's internship application.
     * @deny (create) User 'other_user' with ID 'other_user' cannot create a internship application with ID 'test_user'.
     * @deny (update) User 'other_user' with ID 'other_user' cannot update 'test_user's internship application.
     * @deny (delete) User 'other_user' with ID 'other_user' cannot delete 'test_user's internship application.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Employer profiles are private and only accessible to the owning user.
     * @path /employers/{userId}
     * @allow (read) User 'test_user' with ID 'test_user' can read their own profile.
     * @allow (create) User 'test_user' with ID 'test_user' can create their own profile.
     * @allow (update) User 'test_user' with ID 'test_user' can update their own profile.
     * @allow (delete) User 'test_user' with ID 'test_user' can delete their own profile.
     * @deny (read) User 'other_user' with ID 'other_user' cannot read 'test_user's profile.
     * @deny (create) User 'other_user' with ID 'other_user' cannot create a profile with ID 'test_user'.
     * @deny (update) User 'other_user' with ID 'other_user' cannot update 'test_user's profile.
     * @deny (delete) User 'other_user' with ID 'other_user' cannot delete 'test_user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Institute profiles are private and only accessible to the owning user.
     * @path /institutes/{userId}
     * @allow (read) User 'test_user' with ID 'test_user' can read their own profile.
     * @allow (create) User 'test_user' with ID 'test_user' can create their own profile.
     * @allow (update) User 'test_user' with ID 'test_user' can update their own profile.
     * @allow (delete) User 'test_user' with ID 'test_user' can delete their own profile.
     * @deny (read) User 'other_user' with ID 'other_user' cannot read 'test_user's profile.
     * @deny (create) User 'other_user' with ID 'other_user' cannot create a profile with ID 'test_user'.
     * @deny (update) User 'other_user' with ID 'other_user' cannot update 'test_user's profile.
     * @deny (delete) User 'other_user' with ID 'other_user' cannot delete 'test_user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Job postings are publicly readable but only writable by the owning employer.
     * @path /jobs/{jobId}
     * @allow (read) Any user can read any job posting.
     * @allow (create) User 'test_employer' with ID 'test_employer' can create a job posting if employerId matches.
     * @allow (update) User 'test_employer' with ID 'test_employer' can update a job posting they own.
     * @allow (delete) User 'test_employer' with ID 'test_employer' can delete a job posting they own.
     * @deny (create) User 'test_candidate' cannot create a job posting.
     * @deny (update) User 'test_candidate' cannot update a job posting.
     * @deny (delete) User 'test_candidate' cannot delete a job posting.
     * @principle Public read, owner-only writes, enforces ownership via employerId.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

     /**
     * @description Applicants for a specific job are only writable by the owning employer.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (create) User 'test_employer' with ID 'test_employer' can create an applicant if they own the job.
     * @allow (update) User 'test_employer' with ID 'test_employer' can update an applicant if they own the job.
     * @allow (delete) User 'test_employer' with ID 'test_employer' can delete an applicant if they own the job.
     * @deny (read) Any user cannot read the applicants
     * @deny (create) User 'test_candidate' cannot create a applicant.
     * @deny (update) User 'test_candidate' cannot update a applicant.
     * @deny (delete) User 'test_candidate' cannot delete a applicant.
     * @principle Owner-only writes, enforces ownership via employerId.
     */
    match /jobs/{jobId}/applicants/{candidateId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid && resource != null;
    }

    /**
     * @description Internship postings are publicly readable but only writable by the owning employer.
     * @path /internships/{internshipId}
     * @allow (read) Any user can read any internship posting.
     * @allow (create) User 'test_employer' with ID 'test_employer' can create a internship posting if employerId matches.
     * @allow (update) User 'test_employer' with ID 'test_employer' can update a internship posting they own.
     * @allow (delete) User 'test_employer' with ID 'test_employer' can delete a internship posting they own.
     * @deny (create) User 'test_candidate' cannot create a internship posting.
     * @deny (update) User 'test_candidate' cannot update a internship posting.
     * @deny (delete) User 'test_candidate' cannot delete a internship posting.
     * @principle Public read, owner-only writes, enforces ownership via employerId.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Applicants for a specific internship are only writable by the owning employer.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (create) User 'test_employer' with ID 'test_employer' can create an applicant if they own the internship.
     * @allow (update) User 'test_employer' with ID 'test_employer' can update an applicant if they own the internship.
     * @allow (delete) User 'test_employer' with ID 'test_employer' can delete an applicant if they own the internship.
     * @deny (read) Any user cannot read the applicants.
     * @deny (create) User 'test_candidate' cannot create a applicant.
     * @deny (update) User 'test_candidate' cannot update a applicant.
     * @deny (delete) User 'test_candidate' cannot delete a applicant.
     * @principle Owner-only writes, enforces ownership via employerId.
     */
    match /internships/{internshipId}/applicants/{candidateId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid && resource != null;
    }
  }
}
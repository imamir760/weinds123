/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for profiles and applications,
 * while allowing public read access to job and internship postings. Only authenticated
 * users can create, update, or delete data, and they can only manage data they own.
 *
 * Data Structure:
 * - /candidates/{userId}: Stores candidate profiles, owned by the user with ID {userId}.
 * - /candidates/{userId}/jobApplications/{jobId}: Stores job applications, owned by the user.
 * - /candidates/{userId}/internshipApplications/{internshipId}: Stores internship applications, owned by the user.
 * - /employers/{userId}: Stores employer profiles, owned by the user with ID {userId}.
 * - /institutes/{userId}: Stores institute profiles, owned by the user with ID {userId}.
 * - /jobs/{jobId}: Stores job postings, publicly readable, but create/update/delete restricted to the owner (employerId).
 * - /jobs/{jobId}/applicants/{candidateId}: Stores applicants for a job, only accessible by the employer who owns the job posting.
 * - /internships/{internshipId}: Stores internship postings, publicly readable, but create/update/delete restricted to the owner (employerId).
 * - /internships/{internshipId}/applicants/{candidateId}: Stores applicants for an internship, only accessible by the employer who owns the internship posting.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to protect privacy.
 * - Job and internship postings are publicly readable to maximize visibility.
 * - Profile creation is restricted to authenticated users creating their own profiles.
 *
 * Denormalization for Authorization:
 * - Job and Internship documents contain the `employerId` field, which is used to
 *   enforce ownership for write operations. This avoids the need for complex queries
 *   or additional reads to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to candidate profiles.
     * @path /candidates/{userId}
     * @allow (create) - Authenticated user with ID matching {userId} can create their profile.
     * @allow (get, list, update, delete) - Authenticated user with ID matching {userId} can read, update, and delete their profile.
     * @deny (create) - Unauthenticated users cannot create profiles.
     * @deny (update, delete) - Other users cannot update or delete this profile.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Allows access to a candidate's job applications.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create) - Authenticated user with ID matching {userId} can create job applications.
     * @allow (get, list, update, delete) - Authenticated user with ID matching {userId} can read, update, and delete their job applications.
     * @deny (create) - Unauthenticated users cannot create job applications.
     * @deny (update, delete) - Other users cannot update or delete this job application.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Allows access to a candidate's internship applications.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (create) - Authenticated user with ID matching {userId} can create internship applications.
     * @allow (get, list, update, delete) - Authenticated user with ID matching {userId} can read, update, and delete their internship applications.
     * @deny (create) - Unauthenticated users cannot create internship applications.
     * @deny (update, delete) - Other users cannot update or delete this internship application.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Allows access to employer profiles.
     * @path /employers/{userId}
     * @allow (create) - Authenticated user with ID matching {userId} can create their profile.
     * @allow (get, list, update, delete) - Authenticated user with ID matching {userId} can read, update, and delete their profile.
     * @deny (create) - Unauthenticated users cannot create profiles.
     * @deny (update, delete) - Other users cannot update or delete this profile.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Allows access to institute profiles.
     * @path /institutes/{userId}
     * @allow (create) - Authenticated user with ID matching {userId} can create their profile.
     * @allow (get, list, update, delete) - Authenticated user with ID matching {userId} can read, update, and delete their profile.
     * @deny (create) - Unauthenticated users cannot create profiles.
     * @deny (update, delete) - Other users cannot update or delete this profile.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.tpoEmail == request.auth.token.email;
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Allows read access to job postings and restricts write access to the owner.
     * @path /jobs/{jobId}
     * @allow (get, list) - Anyone can read job postings.
     * @allow (create) - Authenticated user can create job postings if `employerId` matches their UID.
     * @allow (update, delete) - Authenticated user can update/delete job postings if `employerId` matches their UID.
     * @deny (create) - Creating a job with an `employerId` that doesn't match the user's UID is disallowed.
     * @deny (update, delete) - Updating/deleting a job owned by another user is disallowed.
     * @principle Allows public read access with owner-only writes, enforces document ownership for writes.
     */
    match /jobs/{jobId} {
      function isOwner(employerId) {
        return request.auth.uid == employerId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.employerId);
      allow update: if isSignedIn() && isOwner(resource.data.employerId) && resource != null;
      allow delete: if isSignedIn() && isOwner(resource.data.employerId) && resource != null;
    }

    /**
     * @description Allows access to applicants for a specific job, restricted to the job's owner.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (get, list) - Authenticated user with ID matching the job's `employerId` can read applicants.
     * @allow (create, update, delete) - Authenticated user with ID matching the job's `employerId` can create, update, and delete applicants.
     * @deny (create, update, delete) - Other users cannot create, update, or delete applicants.
     * @principle Enforces document ownership for writes, restricts access to the job owner.
     */
    match /jobs/{jobId}/applicants/{candidateId} {
        function getJobEmployerId() {
            return get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId;
        }

        function isJobOwner() {
            return request.auth.uid == getJobEmployerId();
        }

        function isSignedIn() {
          return request.auth != null;
        }
      allow get, list: if isSignedIn() && isJobOwner();
      allow create: if isSignedIn() && isJobOwner();
      allow update: if isSignedIn() && isJobOwner() && resource != null;
      allow delete: if isSignedIn() && isJobOwner() && resource != null;
    }

    /**
     * @description Allows read access to internship postings and restricts write access to the owner.
     * @path /internships/{internshipId}
     * @allow (get, list) - Anyone can read internship postings.
     * @allow (create) - Authenticated user can create internship postings if `employerId` matches their UID.
     * @allow (update, delete) - Authenticated user can update/delete internship postings if `employerId` matches their UID.
     * @deny (create) - Creating an internship with an `employerId` that doesn't match the user's UID is disallowed.
     * @deny (update, delete) - Updating/deleting an internship owned by another user is disallowed.
     * @principle Allows public read access with owner-only writes, enforces document ownership for writes.
     */
    match /internships/{internshipId} {
      function isOwner(employerId) {
        return request.auth.uid == employerId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.employerId);
      allow update: if isSignedIn() && isOwner(resource.data.employerId) && resource != null;
      allow delete: if isSignedIn() && isOwner(resource.data.employerId) && resource != null;
    }

    /**
     * @description Allows access to applicants for a specific internship, restricted to the internship's owner.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (get, list) - Authenticated user with ID matching the internship's `employerId` can read applicants.
     * @allow (create, update, delete) - Authenticated user with ID matching the internship's `employerId` can create, update, and delete applicants.
     * @deny (create, update, delete) - Other users cannot create, update, or delete applicants.
     * @principle Enforces document ownership for writes, restricts access to the internship owner.
     */
    match /internships/{internshipId}/applicants/{candidateId} {
          function getInternshipEmployerId() {
            return get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId;
        }

        function isInternshipOwner() {
            return request.auth.uid == getInternshipEmployerId();
        }

        function isSignedIn() {
          return request.auth != null;
        }
      allow get, list: if isSignedIn() && isInternshipOwner();
      allow create: if isSignedIn() && isInternshipOwner();
      allow update: if isSignedIn() && isInternshipOwner() && resource != null;
      allow delete: if isSignedIn() && isInternshipOwner() && resource != null;
    }
  }
}
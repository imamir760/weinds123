/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for profiles and allows public read access to job and internship postings,
 * but restricts write access to the owners (employers). Applications are publicly readable but only creatable and editable by the
 * candidate who owns it. Skill test submissions are similarly owner-only, and reports are read/write restricted.
 *
 * Data Structure:
 * - Users, Employers, and Institutes profiles are stored in their respective top-level collections, keyed by UID.
 * - Jobs and Internships are stored in top-level collections, with an `employerId` field indicating ownership.
 * - Applications are stored in a top-level collection.
 *
 * Key Security Decisions:
 * - User listing is disallowed for all collections.
 * - Public read access is granted for `jobs` and `internships` collections to allow browsing without authentication.
 * - The rules explicitly deny any write operations with `if false` where public access is not permitted.
 *
 * Denormalization for Authorization:
 * - Jobs and Internships include an `employerId` to enable ownership checks without needing to query the `/employers` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own candidate profile.
     * @path /candidates/{userId}
     * @allow (create) - Authenticated user with UID matching {userId}.
     * @allow (get, list, update, delete) - Authenticated user with UID matching {userId}.
     * @deny (create) - Authenticated user with UID not matching {userId}.
     * @deny (get, list, update, delete) - Authenticated user with UID not matching {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows an employer to read and write their own profile.
     * @path /employers/{userId}
     * @allow (create) - Authenticated user with UID matching {userId}.
     * @allow (get, list, update, delete) - Authenticated user with UID matching {userId}.
     * @deny (create) - Authenticated user with UID not matching {userId}.
     * @deny (get, list, update, delete) - Authenticated user with UID not matching {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows an institute (TPO) to read and write their own profile.
     * @path /institutes/{userId}
     * @allow (create) - Authenticated user with UID matching {userId}.
     * @allow (get, list, update, delete) - Authenticated user with UID matching {userId}.
     * @deny (create) - Authenticated user with UID not matching {userId}.
     * @deny (get, list, update, delete) - Authenticated user with UID not matching {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to job postings, but restricts writes to the owning employer.
     * @path /jobs/{jobId}
     * @allow (get, list) - Any user, authenticated or not.
     * @allow (create) - Authenticated user where request.auth.uid == request.resource.data.employerId
     * @allow (update, delete) - Authenticated user with UID matching the job's employerId.
     * @deny (create) - Authenticated user where request.auth.uid != request.resource.data.employerId
     * @deny (update, delete) - Authenticated user with UID not matching the job's employerId.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /jobs/{jobId} {
      function isOwner(employerId) {
        return request.auth.uid == employerId;
      }
       function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }
      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.employerId;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Allows public read access to internship postings, but restricts writes to the owning employer.
     * @path /internships/{internshipId}
     * @allow (get, list) - Any user, authenticated or not.
     * @allow (create) - Authenticated user where request.auth.uid == request.resource.data.employerId
     * @allow (update, delete) - Authenticated user with UID matching the internship's employerId.
     * @deny (create) - Authenticated user where request.auth.uid != request.resource.data.employerId
     * @deny (update, delete) - Authenticated user with UID not matching the internship's employerId.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /internships/{internshipId} {
      function isOwner(employerId) {
        return request.auth.uid == employerId;
      }
       function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }
      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.employerId;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Allows public read access to applications but restricts write access to the candidate who created it.
     * @path /applications/{applicationId}
     * @allow (get, list) - Any user, authenticated or not.
     * @allow (create) - Authenticated user where request.auth.uid == request.resource.data.candidateId
     * @allow (update, delete) - Authenticated user with UID matching the application's candidateId.
     * @deny (create) - Authenticated user where request.auth.uid != request.resource.data.candidateId
     * @deny (update, delete) - Authenticated user with UID not matching the application's candidateId.
     * @principle Allows public read, enforces ownership for writes.
     */
    match /applications/{applicationId} {
      function isOwner(candidateId) {
        return request.auth.uid == candidateId;
      }
       function isExistingOwner(candidateId) {
        return isOwner(candidateId) && resource != null;
      }
      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.candidateId;
      allow update: if isExistingOwner(resource.data.candidateId);
      allow delete: if isExistingOwner(resource.data.candidateId);
    }

    /**
     * @description Restricts read and write access to skill test submissions to the candidate who created it.
     * @path /skillTestSubmissions/{submissionId}
     * @allow (create) - Authenticated user where request.auth.uid == request.resource.data.candidateId
     * @allow (get, list, update, delete) - Authenticated user with UID matching the submission's candidateId.
     * @deny (create) - Authenticated user where request.auth.uid != request.resource.data.candidateId
     * @deny (get, list, update, delete) - Authenticated user with UID not matching the submission's candidateId.
     * @principle Enforces document ownership for all operations.
     */
    match /skillTestSubmissions/{submissionId} {
      function isOwner(candidateId) {
        return request.auth.uid == candidateId;
      }
       function isExistingOwner(candidateId) {
        return isOwner(candidateId) && resource != null;
      }
      allow get, list: if isOwner(resource.data.candidateId);
      allow create: if request.auth.uid == request.resource.data.candidateId;
      allow update: if isExistingOwner(resource.data.candidateId);
      allow delete: if isExistingOwner(resource.data.candidateId);
    }

    /**
     * @description Restricts read and write access to skill test reports (generated by AI).
     * @path /skillTestReports/{reportId}
     * @allow (create, get, list, update, delete) - if false
     * @principle No one has access.
     */
    match /skillTestReports/{reportId} {
      allow get, list, create, update, delete: if false;
    }
  }
}
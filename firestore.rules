/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system where users can only
 * access their own profiles and employers/TPOs can only manage their own job and internship postings.
 *
 * Data Structure:
 * - /candidates/{userId}: Stores candidate profiles, accessible only by the respective user.
 * - /employers/{userId}: Stores employer profiles, accessible only by the respective user.
 * - /institutes/{userId}: Stores institute profiles, accessible only by the respective user.
 * - /jobs/{jobId}: Stores job postings, writeable only by the posting employer.
 * - /internships/{internshipId}: Stores internship postings, writeable only by the posting employer.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Employers and TPOs can only manage their own job/internship postings.
 * - Public listing of jobs and internships is allowed.
 *
 * Denormalization for Authorization:
 * - Jobs and Internships include an `employerId` field to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to candidate profiles.
     * @path /candidates/{userId}
     * @allow (read, write) if the user is the owner of the profile.
     * @deny (read, write) if the user is not authenticated or is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to employer profiles.
     * @path /employers/{userId}
     * @allow (read, write) if the user is the owner of the profile.
     * @deny (read, write) if the user is not authenticated or is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to institute profiles (TPOs).
     * @path /institutes/{userId}
     * @allow (read, write) if the user is the owner of the profile.
     * @deny (read, write) if the user is not authenticated or is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to job postings.
     * @path /jobs/{jobId}
     * @allow (read) to anyone.
     * @allow (write) if the user is the owner of the job posting (employerId matches).
     * @deny (write) if the user is not authenticated or is not the owner of the job posting.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwnerOfJob(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwnerOfJob(resource.data.employerId);
    }

      /**
       * @description Controls access to internship postings.
       * @path /internships/{internshipId}
       * @allow (read) to anyone.
       * @allow (write) if the user is the owner of the internship posting (employerId matches).
       * @deny (write) if the user is not authenticated or is not the owner of the internship posting.
       * @principle Allows public read access but restricts write access to the owner.
       */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwnerOfInternship(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwnerOfInternship(resource.data.employerId);
    }

    // --- Helper functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isExistingOwnerOfJob(employerId) {
        return isSignedIn() && request.auth.uid == employerId && resource != null;
    }

    function isExistingOwnerOfInternship(employerId) {
        return isSignedIn() && request.auth.uid == employerId && resource != null;
    }
  }
}
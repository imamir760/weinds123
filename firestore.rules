/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 *              and allows public read access to job and internship postings with owner-only write access.
 *
 * Data Structure:
 * - User profiles (candidates, employers, institutes) are stored in collections named after their roles
 *   and are secured via the user's UID.
 * - Job and internship postings are stored in top-level collections, readable by anyone, but only
 *   creatable/modifiable by the posting employer.
 *
 * Key Security Decisions:
 * - User listing is disallowed for all user profile collections (candidates, employers, institutes).
 * - Read-only access for job and internship postings is granted to everyone.
 * - All write operations (create, update, delete) are strictly controlled to prevent unauthorized data modification.
 * - Data validation is minimal, focusing on ownership and relational integrity checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure candidate profiles, allowing only the owning user to read and write.
     * @path /candidates/{userId}
     * @allow (get, create, update, delete) - User with UID 'user123' can read/write their own profile at /candidates/user123.
     * @deny (get, create, update, delete) - User with UID 'user456' cannot read/write the profile at /candidates/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      //  candidates can only view candidate data
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secure employer profiles, allowing only the owning user to read and write.
     * @path /employers/{userId}
     * @allow (get, create, update, delete) - User with UID 'employer789' can read/write their own profile at /employers/employer789.
     * @deny (get, create, update, delete) - User with UID 'candidate123' cannot read/write the profile at /employers/employer789.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secure institute profiles, allowing only the owning user to read and write.
     * @path /institutes/{userId}
     * @allow (get, create, update, delete) - User with UID 'institute456' can read/write their own profile at /institutes/institute456.
     * @deny (get, create, update, delete) - User with UID 'candidate123' cannot read/write the profile at /institutes/institute456.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to job postings, but restricts creation, updates, and deletion to the job poster.
     * @path /jobs/{jobId}
     * @allow (get, list) - Any user can read any job posting.
     * @allow (create) - Employer 'employer123' can create a job posting with employerId: 'employer123'.
     * @allow (update, delete) - Employer 'employer123' can update/delete their own job posting (identified via job.employerId).
     * @deny (create) - Candidate 'candidate456' cannot create a job posting.
     * @deny (update, delete) - Employer 'employer789' cannot update/delete a job posted by 'employer123'.
     * @principle Grants public read access with owner-only write access, validating that the employerId matches the authenticated user's ID.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && isOwner(resource.data.employerId);
      allow delete: if isSignedIn() && resource != null && isOwner(resource.data.employerId);
    }

       /**
     * @description Allows public read access to internship postings, but restricts creation, updates, and deletion to the internship poster.
     * @path /internships/{internshipId}
     * @allow (get, list) - Any user can read any internship posting.
     * @allow (create) - Employer 'employer123' can create a internship posting with employerId: 'employer123'.
     * @allow (update, delete) - Employer 'employer123' can update/delete their own internship posting (identified via internship.employerId).
     * @deny (create) - Candidate 'candidate456' cannot create a internship posting.
     * @deny (update, delete) - Employer 'employer789' cannot update/delete a job posted by 'employer123'.
     * @principle Grants public read access with owner-only write access, validating that the employerId matches the authenticated user's ID.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && isOwner(resource.data.employerId);
      allow delete: if isSignedIn() && resource != null && isOwner(resource.data.employerId);
    }

    // --- Helper functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * (candidates, employers, and institutes).  Job and internship postings are
 * publicly readable but only writable by the owning employer. Applications
 * can only be created by the candidate and are readable/writeable only by
 * the employer who owns the post.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate user profiles.
 * - /employers/{userId}: Employer user profiles.
 * - /institutes/{userId}: Institute user profiles.
 * - /jobs/{jobId}: Job postings.
 * - /internships/{internshipId}: Internship postings.
 * - /applications/{applicationId}: Job/Internship applications.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Job and internship postings are publicly readable.
 * - Job and internship postings can only be created, updated, or deleted by the employer who owns them.
 * - Applications can be created by candidates.
 * - Applications are only readable and updateable by the employer who owns the corresponding job or internship post.
 * - Listing of user documents (candidates, employers, institutes) is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * The 'Job' and 'Internship' entities both contain an `employerId` field. This
 * denormalization is CRITICAL for securing write access to these documents,
 * allowing us to easily verify the owner. The 'Application' entity contains `candidateId`, `employerId`, and `postId` fields to associate the application to a user and a specific job.
 *
 * Structural Segregation:
 * The separation of candidate, employer, and institute profiles into separate
 * collections enables role-based access control and avoids the need for complex
 * queries or document flags to differentiate user types.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents unauthenticated access to the database.
     * @path /databases/{database}/documents
     * @allow (get, list, create, update, delete) if false
     * @deny (get, list, create, update, delete) if true
     * @principle Requires authentication for all operations.
     */
    match /{document=**} {
      allow read, write: if isSignedIn();
    }

    /**
     * @description Manages access to candidate profiles.
     * @path /candidates/{userId}
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (create, update) User with ID 'user123' can create or update their profile.
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     * @deny (create, update) User with ID 'user456' cannot create or update the profile of user 'user123'.
     * @deny (delete) No one can delete a candidate profile (deletion should be handled via account deletion).
     * @principle Enforces document ownership for reads and writes.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId) && isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Manages access to employer profiles.
     * @path /employers/{userId}
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (create, update) User with ID 'user123' can create or update their profile.
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     * @deny (create, update) User with ID 'user456' cannot create or update the profile of user 'user123'.
     * @deny (delete) No one can delete an employer profile (deletion should be handled via account deletion).
     * @principle Enforces document ownership for reads and writes.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId) && isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Manages access to institute profiles.
     * @path /institutes/{userId}
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (create, update) User with ID 'user123' can create or update their profile.
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     * @deny (create, update) User with ID 'user456' cannot create or update the profile of user 'user123'.
     * @deny (delete) No one can delete an institute profile (deletion should be handled via account deletion).
     * @principle Enforces document ownership for reads and writes.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.tpoEmail == request.auth.token.email;
      allow update: if isOwner(userId) && isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Manages access to job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) Any user can read job postings.
     * @allow (create) User with ID 'employer123' can create a job posting with employerId 'employer123'.
     * @allow (update, delete) User with ID 'employer123' can update/delete a job posting they own.
     * @deny (create) User with ID 'candidate456' cannot create a job posting.
     * @deny (update, delete) User with ID 'employer456' cannot update/delete a job posting owned by 'employer123'.
     * @principle Public read access with owner-only writes, enforces employer ownership.
     */
    match /jobs/{jobId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Manages access to internship postings.
     * @path /internships/{internshipId}
     * @allow (get, list) Any user can read internship postings.
     * @allow (create) User with ID 'employer123' can create an internship posting with employerId 'employer123'.
     * @allow (update, delete) User with ID 'employer123' can update/delete an internship posting they own.
     * @deny (create) User with ID 'candidate456' cannot create an internship posting.
     * @deny (update, delete) User with ID 'employer456' cannot update/delete an internship posting owned by 'employer123'.
     * @principle Public read access with owner-only writes, enforces employer ownership.
     */
    match /internships/{internshipId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Manages access to job/internship applications.
     * @path /applications/{applicationId}
     * @allow (create) User with ID 'candidate123' can create an application with candidateId 'candidate123'.
     * @allow (get, list) Employer with ID 'employer456' can read applications for their own jobs/internships.
     * @allow (update) Employer with ID 'employer456' can update application for their own jobs/internships.
     * @deny (get, list) Candidate with ID 'candidate123' cannot read all applications.
     * @deny (update) Candidate with ID 'candidate123' cannot update applications.
     * @principle Candidates can apply, Employers can manage applications for their jobs/internships.
     */
    match /applications/{applicationId} {
        allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
        allow get, list: if isSignedIn() && request.auth.uid == resource.data.employerId;
        allow update: if isSignedIn() && request.auth.uid == resource.data.employerId && isExistingOwner(resource.data.employerId);
        allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}
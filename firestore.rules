/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for profiles and
 *  restricts write access to jobs and internships based on employer ownership.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profiles, owned by the user.
 * - /employers/{userId}: Employer profiles, owned by the user.
 * - /institutes/{userId}: Institute profiles, owned by the user.
 * - /jobs/{jobId}: Job postings, owned by the employer who created them. The 'employerId' field MUST match the user ID of the creating employer.
 * - /internships/{internshipId}: Internship postings, owned by the employer who created them. The 'employerId' field MUST match the user ID of the creating employer.
 * - /applications/{applicationId}: Applications for jobs/internships. Restricted access.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Validation focuses on ownership and relational integrity (e.g., employerId on jobs/internships).
 *
 * Denormalization for Authorization:
 * - Jobs and Internships: 'employerId' is used to determine ownership, avoiding extra reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects candidate profiles. Only the user can read and write their own profile.
     * @path /candidates/{userId}
     * @allow (create) User with ID 'user123' creates their own profile at /candidates/user123.
     * @deny (create) User with ID 'user123' attempts to create a profile for another user at /candidates/user456.
     * @allow (get) User with ID 'user123' reads their own profile.
     * @deny (get) User with ID 'user123' attempts to read another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Protects employer profiles. Only the user can read and write their own profile.
     * @path /employers/{userId}
     * @allow (create) User with ID 'employer456' creates their own profile at /employers/employer456.
     * @deny (create) User with ID 'employer456' attempts to create a profile for another user at /employers/employer789.
     * @allow (get) User with ID 'employer456' reads their own profile.
     * @deny (get) User with ID 'employer456' attempts to read another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Protects institute profiles. Only the user can read and write their own profile.
     * @path /institutes/{userId}
     * @allow (create) User with ID 'institute789' creates their own profile at /institutes/institute789.
     * @deny (create) User with ID 'institute789' attempts to create a profile for another user at /institutes/institute012.
     * @allow (get) User with ID 'institute789' reads their own profile.
     * @deny (get) User with ID 'institute789' attempts to read another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.tpoEmail == request.auth.token.email;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to job postings.  Allows public read, restricts creation to employers, and enforces ownership for updates and deletes.
     * @path /jobs/{jobId}
     * @allow (get) Any user can read a job posting.
     * @allow (list) Any user can list job postings.
     * @allow (create) Employer 'employer456' creates a job posting with employerId: 'employer456'.
     * @deny (create) Candidate 'candidate123' attempts to create a job posting.
     * @deny (create) Employer 'employer456' creates a job posting with employerId: 'employer789'.
     * @allow (update) Employer 'employer456' updates a job posting they own.
     * @deny (update) Employer 'employer789' attempts to update a job posting owned by 'employer456'.
     * @principle Public read, owner-only writes, and validates relational integrity.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isEmployer() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isEmployer() && isExistingOwnerOfJob(resource.data.employerId);
      allow delete: if isSignedIn() && isEmployer() && isExistingOwnerOfJob(resource.data.employerId);
    }

    /**
     * @description Controls access to internship postings.  Allows public read, restricts creation to employers, and enforces ownership for updates and deletes.
     * @path /internships/{internshipId}
     * @allow (get) Any user can read an internship posting.
     * @allow (list) Any user can list internship postings.
     * @allow (create) Employer 'employer456' creates an internship posting with employerId: 'employer456'.
     * @deny (create) Candidate 'candidate123' attempts to create an internship posting.
     * @deny (create) Employer 'employer456' creates an internship posting with employerId: 'employer789'.
     * @allow (update) Employer 'employer456' updates an internship posting they own.
     * @deny (update) Employer 'employer789' attempts to update an internship posting owned by 'employer456'.
     * @principle Public read, owner-only writes, and validates relational integrity.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isEmployer() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isEmployer() && isExistingOwnerOfInternship(resource.data.employerId);
      allow delete: if isSignedIn() && isEmployer() && isExistingOwnerOfInternship(resource.data.employerId);
    }

       /**
        * @description Controls access to applications. Access is restricted to ensure data privacy.
        * @path /applications/{applicationId}
        * @deny (get) No one can get an application directly.
        * @deny (list) No one can list all applications.
        * @deny (create) No one can create an application directly through Firestore rules.
        * @deny (update) No one can update an application directly through Firestore rules.
        * @deny (delete) No one can delete an application directly through Firestore rules.
        * @principle  Data privacy: Applications are not directly accessible or modifiable via Firestore rules.  This collection is likely managed by a backend function or service.
        */
       match /applications/{applicationId} {
            allow get: if false;
            allow list: if false;
            allow create: if false;
            allow update: if false;
            allow delete: if false;
       }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }

  function isEmployer() {
    return request.auth.token.role == 'employer';
  }

  function isExistingOwnerOfJob(employerId) {
    return isEmployer() && request.auth.uid == employerId && resource != null;
  }

    function isExistingOwnerOfInternship(employerId) {
      return isEmployer() && request.auth.uid == employerId && resource != null;
    }
}
/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and public read access for job and internship postings.
 *
 * Data Structure:
 * - User profiles are stored under `/candidates/{userId}`, `/employers/{userId}`,
 *   and `/institutes/{userId}`, with access restricted to the owning user.
 * - Job and internship postings are stored under `/jobs/{jobId}` and `/internships/{internshipId}` respectively,
 *   and are publicly readable but only editable by the posting employer.
 * - Applications are stored under `/applications/{applicationId}` and are only accessible to the applicant.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Job and internship postings are publicly readable to maximize visibility but writes are limited to the owning employer.
 * - Listing of user profiles is disallowed.
 *
 * Denormalization for Authorization:
 * - The `Job` and `Internship` entities include an `employerId` field to simplify ownership checks.
 * - The `Application` entity includes a `candidateId` field to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that a user can only read/write their own profile.
     * @path /candidates/{userId}
     * @allow (get, create, update, delete) User 'candidate123' can access /candidates/candidate123.
     * @deny (get, create, update, delete) User 'candidate456' cannot access /candidates/candidate123.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that a user can only read/write their own profile.
     * @path /employers/{userId}
     * @allow (get, create, update, delete) User 'employer123' can access /employers/employer123.
     * @deny (get, create, update, delete) User 'employer456' cannot access /employers/employer123.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that a user can only read/write their own profile.
     * @path /institutes/{userId}
     * @allow (get, create, update, delete) User 'institute123' can access /institutes/institute123.
     * @deny (get, create, update, delete) User 'institute456' cannot access /institutes/institute123.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to job postings, but restricts writes to the owning employer.
     * @path /jobs/{jobId}
     * @allow (get, list) Any user can read job postings.
     * @allow (create) Employer 'employer123' can create a job posting with employerId set to 'employer123'.
     * @allow (update, delete) Employer 'employer123' can update/delete a job posting where resource.data.employerId == 'employer123'.
     * @deny (create) Employer 'employer456' cannot create a job posting with employerId set to 'employer123'.
     * @deny (update, delete) Employer 'employer456' cannot update/delete a job posting where resource.data.employerId == 'employer123'.
     * @principle Allows public reads while enforcing owner-only writes.
     */
    match /jobs/{jobId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Allows public read access to internship postings, but restricts writes to the owning employer.
     * @path /internships/{internshipId}
     * @allow (get, list) Any user can read internship postings.
     * @allow (create) Employer 'employer123' can create an internship posting with employerId set to 'employer123'.
     * @allow (update, delete) Employer 'employer123' can update/delete an internship posting where resource.data.employerId == 'employer123'.
     * @deny (create) Employer 'employer456' cannot create an internship posting with employerId set to 'employer123'.
     * @deny (update, delete) Employer 'employer456' cannot update/delete an internship posting where resource.data.employerId == 'employer123'.
     * @principle Allows public reads while enforcing owner-only writes.
     */
    match /internships/{internshipId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Allows a candidate to read/write their own applications.
     * @path /applications/{applicationId}
     * @allow (get, list) Candidate 'candidate123' can read their own applications.
     * @allow (create) Candidate 'candidate123' can create an application with candidateId set to 'candidate123'.
     * @allow (update, delete) Candidate 'candidate123' can update/delete their own applications where resource.data.candidateId == 'candidate123'.
     * @deny (get, list, create, update, delete) Candidate 'candidate456' cannot access applications belonging to 'candidate123'.
     * @principle Enforces document ownership for applications.
     */
    match /applications/{applicationId} {
      allow get: if isSignedIn() && isOwner(resource.data.candidateId);
      allow list: if isSignedIn() && isOwner(resource.data.candidateId);
      allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.candidateId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.candidateId);
    }
  }
}
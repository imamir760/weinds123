/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and applications,
 * with public read access to job and internship postings.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profiles, accessible only to the owning user.
 * - /candidates/{userId}/jobApplications/{jobId}: Job applications submitted by a candidate, accessible only to the candidate.
 * - /candidates/{userId}/internshipApplications/{internshipId}: Internship applications submitted by a candidate, accessible only to the candidate.
 * - /employers/{userId}: Employer profiles, accessible only to the owning user.
 * - /institutes/{userId}: Institute profiles, accessible only to the owning user.
 * - /jobs/{jobId}: Publicly readable job postings, writable only by the owning employer.
 * - /jobs/{jobId}/applicants/{candidateId}: Applicants for a specific job.
 * - /internships/{internshipId}: Publicly readable internship postings, writable only by the owning employer.
 * - /internships/{internshipId}/applicants/{candidateId}: Applicants for a specific internship.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Public read access is granted to the /jobs and /internships collections to allow open browsing of opportunities.
 * - All write operations are protected by authorization checks to prevent unauthorized data modification.
 * - All writes to user-owned documents enforce path consistency (the document ID must match the authenticated user's UID).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to candidate profiles. Only the user themselves can read or write their profile.
     * @path /candidates/{userId}
     * @allow (read, write) User 'test_user' with UID 'test_user' can access /candidates/test_user.
     * @deny (read, write) User 'other_user' with UID 'other_user' cannot access /candidates/test_user.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to job applications submitted by a candidate. Only the candidate can read or write their applications.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (read, write) User 'test_user' with UID 'test_user' can access /candidates/test_user/jobApplications/test_job.
     * @deny (read, write) User 'other_user' with UID 'other_user' cannot access /candidates/test_user/jobApplications/test_job.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Manages access to internship applications submitted by a candidate. Only the candidate can read or write their applications.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (read, write) User 'test_user' with UID 'test_user' can access /candidates/test_user/internshipApplications/test_internship.
     * @deny (read, write) User 'other_user' with UID 'other_user' cannot access /candidates/test_user/internshipApplications/test_internship.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to employer profiles. Only the user themselves can read or write their profile.
     * @path /employers/{userId}
     * @allow (read, write) User 'test_user' with UID 'test_user' can access /employers/test_user.
     * @deny (read, write) User 'other_user' with UID 'other_user' cannot access /employers/test_user.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to institute profiles. Only the user themselves can read or write their profile.
     * @path /institutes/{userId}
     * @allow (read, write) User 'test_user' with UID 'test_user' can access /institutes/test_user.
     * @deny (read, write) User 'other_user' with UID 'other_user' cannot access /institutes/test_user.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) Any user can read job postings.
     * @allow (create) Only the employer can create the job posting if employerId matches their uid.
     * @allow (update, delete) Only the employer who created the job posting can update or delete it.
     * @deny (create, update, delete) Any user who is not the owner cannot modify the job postings.
     * @principle Allows public reads but restricts writes to the owner.
     */
    match /jobs/{jobId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }

      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }
      
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Manages access to applicants for a specific job.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (read, write) Only the job poster and applicant can read, write and delete applicant
     * @deny (read, write) User who is not the job poster or applicant can read, write and delete applicant
     */
     match /jobs/{jobId}/applicants/{candidateId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(candidateId) {
        return isSignedIn() && request.auth.uid == candidateId;
      }

      function isExistingOwner(candidateId) {
        return isOwner(candidateId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(candidateId);
      allow delete: if isExistingOwner(candidateId);
    }

    /**
     * @description Manages access to internship postings.
     * @path /internships/{internshipId}
     * @allow (get, list) Any user can read internship postings.
     * @allow (create) Only the employer can create the internship posting if employerId matches their uid.
     * @allow (update, delete) Only the employer who created the internship posting can update or delete it.
     * @deny (create, update, delete) Any user who is not the owner cannot modify the internship postings.
     * @principle Allows public reads but restricts writes to the owner.
     */
    match /internships/{internshipId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }

      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Manages access to applicants for a specific internship.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (read, write) Only the internship poster and applicant can read, write and delete applicant
     * @deny (read, write) User who is not the internship poster or applicant can read, write and delete applicant
     */
     match /internships/{internshipId}/applicants/{candidateId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(candidateId) {
        return isSignedIn() && request.auth.uid == candidateId;
      }

      function isExistingOwner(candidateId) {
        return isOwner(candidateId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(candidateId);
      allow delete: if isExistingOwner(candidateId);
    }
  }
}
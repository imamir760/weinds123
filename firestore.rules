/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control system where users can only
 * read and write data associated with their respective roles (candidate, employer, tpo).
 * Users can only create their profiles, while Jobs, Internships, and Applications are publicly
 * available for listing but require authorization for creation, updates, and deletion.
 *
 * Data Structure:
 * - /candidates/{userId}: Stores candidate profiles. Only the user can read/write their profile.
 * - /employers/{userId}: Stores employer profiles. Only the user can read/write their profile.
 * - /institutes/{userId}: Stores institute profiles. Only the user can read/write their profile.
 * - /jobs/{jobId}: Stores job postings. Publicly listable, but create/update/delete restricted to the owning employer.
 * - /internships/{internshipId}: Stores internship postings. Publicly listable, but create/update/delete restricted to the owning employer.
 * - /applications/{applicationId}: Stores job/internship applications.
 *
 * Key Security Decisions:
 * - Users can only access their own profiles (candidates, employers, institutes).
 * - Jobs and Internships are publicly readable, but only employers can create, update, or delete them.
 * - Listing of user profiles (candidates, employers, institutes) is denied.
 * - Validation on writes will be limited to authorization checks and relational integrity.
 *
 * Denormalization for Authorization:
 * - Jobs and Internships include an `employerId` field to simplify ownership checks for writes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the UIDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user owns the resource and it exists.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the UIDs match and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for candidate profiles.
     * @path /candidates/{userId}
     * @allow (create) User 'candidate_abc' with auth, creates their own profile document with ID 'candidate_abc'.
     * @deny (create) User 'candidate_abc' attempts to create a profile with ID 'different_id'.
     * @allow (get, update, delete) User 'candidate_abc' with auth, reads/updates/deletes their own profile document with ID 'candidate_abc'.
     * @deny (get, update, delete) User 'different_id' with auth, attempts to read/update/delete the 'candidate_abc' profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for employer profiles.
     * @path /employers/{userId}
     * @allow (create) User 'employer_xyz' with auth, creates their own profile document with ID 'employer_xyz'.
     * @deny (create) User 'employer_xyz' attempts to create a profile with ID 'different_id'.
     * @allow (get, update, delete) User 'employer_xyz' with auth, reads/updates/deletes their own profile document with ID 'employer_xyz'.
     * @deny (get, update, delete) User 'different_id' with auth, attempts to read/update/delete the 'employer_xyz' profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for institute profiles.
     * @path /institutes/{userId}
     * @allow (create) User 'institute_123' with auth, creates their own profile document with ID 'institute_123'.
     * @deny (create) User 'institute_123' attempts to create a profile with ID 'different_id'.
     * @allow (get, update, delete) User 'institute_123' with auth, reads/updates/deletes their own profile document with ID 'institute_123'.
     * @deny (get, update, delete) User 'different_id' with auth, attempts to read/update/delete the 'institute_123' profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) Any user can read job postings.
     * @allow (create) User 'employer_xyz' with auth, creates a job posting where request.resource.data.employerId == 'employer_xyz'.
     * @deny (create) User 'employer_xyz' with auth, creates a job posting where request.resource.data.employerId != 'employer_xyz'.
     * @allow (update, delete) User 'employer_xyz' with auth, updates/deletes a job posting where resource.data.employerId == 'employer_xyz'.
     * @deny (update, delete) User 'different_id' with auth, attempts to update/delete a job posting where resource.data.employerId == 'employer_xyz'.
     * @principle Allows public reads, but restricts writes to the job posting owner (employer).
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Rule for internship postings.
     * @path /internships/{internshipId}
     * @allow (get, list) Any user can read internship postings.
     * @allow (create) User 'employer_xyz' with auth, creates an internship posting where request.resource.data.employerId == 'employer_xyz'.
     * @deny (create) User 'employer_xyz' with auth, creates an internship posting where request.resource.data.employerId != 'employer_xyz'.
     * @allow (update, delete) User 'employer_xyz' with auth, updates/deletes an internship posting where resource.data.employerId == 'employer_xyz'.
     * @deny (update, delete) User 'different_id' with auth, attempts to update/delete an internship posting where resource.data.employerId == 'employer_xyz'.
     * @principle Allows public reads, but restricts writes to the internship posting owner (employer).
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Rule for job/internship applications.
     * @path /applications/{applicationId}
     * @allow (create) Any signed-in user can create an application.
     * @allow (get, list) Any signed-in user can read applications.
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows any signed-in user to create and read applications, but restricts updates and deletes.
     */
    match /applications/{applicationId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}
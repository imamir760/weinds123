/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for profiles and applications,
 * while allowing public read access to job and internship postings.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profiles, owned by the user.
 * - /candidates/{userId}/jobApplications/{jobId}: Job applications submitted by a candidate.
 * - /candidates/{userId}/internshipApplications/{internshipId}: Internship applications submitted by a candidate.
 * - /employers/{userId}: Employer profiles, owned by the user.
 * - /institutes/{userId}: Institute profiles, owned by the user.
 * - /jobs/{jobId}: Publicly readable job postings, owned by the employer who created them.
 * - /jobs/{jobId}/applicants/{candidateId}: Applicants for a specific job, owned by the job posting.
 * - /internships/{internshipId}: Publicly readable internship postings, owned by the employer who created them.
 * - /internships/{internshipId}/applicants/{candidateId}: Applicants for a specific internship, owned by the internship posting.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Job and internship postings are publicly readable, but only the owner can create, update, or delete them.
 * - Applications are owned by the candidate and the job/internship posting, with validation ensuring the correct relationships.
 * - Listing of documents is generally allowed for owner-based collections, but not for other collections unless explicitly stated.
 *
 * Denormalization for Authorization:
 * - Job and Internship documents include an `employerId` field to enable owner-based access control for writes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to candidate profiles.
     * @path /candidates/{userId}
     * @allow (read, write) if the user is signed in and owns the profile. (e.g., request.auth.uid == userId)
     * @deny (read, write) if the user is not signed in or does not own the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all candidates is not permitted

      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to job applications submitted by a candidate.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create) if the user is signed in and the userId matches the candidateId.
     * @allow (read, update, delete) if the user is signed in and owns the profile.
     * @deny (read, write) if the user is not signed in or does not own the profile.
     * @principle Enforces document ownership, ensuring only the candidate can manage their applications.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
        function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);

        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to internship applications submitted by a candidate.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (create) if the user is signed in and the userId matches the candidateId.
     * @allow (read, update, delete) if the user is signed in and owns the profile.
     * @deny (read, write) if the user is not signed in or does not own the profile.
     * @principle Enforces document ownership, ensuring only the candidate can manage their applications.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
        function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);

        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to employer profiles.
     * @path /employers/{userId}
     * @allow (read, write) if the user is signed in and owns the profile.
     * @deny (read, write) if the user is not signed in or does not own the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all employers is not permitted

      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to institute profiles.
     * @path /institutes/{userId}
     * @allow (read, write) if the user is signed in and owns the profile.
     * @deny (read, write) if the user is not signed in or does not own the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all institutes is not permitted

      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to job postings.
     * @path /jobs/{jobId}
     * @allow (read) to anyone.
     * @allow (create) if the user is signed in and the employerId matches the user's ID.
     * @allow (update, delete) if the user is signed in and owns the job posting (employerId matches user's ID).
     * @deny (write) if the user is not signed in or does not own the job posting.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /jobs/{jobId} {
      function isOwner(employerId) {
        return request.auth != null && request.auth.uid == employerId;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isOwner(request.resource.data.employerId);
      allow update: if isOwner(resource.data.employerId);
      allow delete: if isOwner(resource.data.employerId);
    }

    /**
     * @description Controls access to applicants for a specific job.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (create) if the user is signed in.
     * @allow (read, update, delete) if the user is signed in and the employerId of the job matches the user's ID.
     * @deny (write) if the user is not signed in or does not have the right employerId.
     * @principle Enforces employer ownership to manage applicants.
     */
    match /jobs/{jobId}/applicants/{candidateId} {
        function isOwner(employerId) {
            return request.auth != null && request.auth.uid == employerId;
        }

        allow get: if get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
        allow list: if get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;

        allow create: if request.auth != null; // Any signed-in user can apply
        allow update: if isOwner(get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId);
        allow delete: if isOwner(get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId);
    }

    /**
     * @description Controls access to internship postings.
     * @path /internships/{internshipId}
     * @allow (read) to anyone.
     * @allow (create) if the user is signed in and the employerId matches the user's ID.
     * @allow (update, delete) if the user is signed in and owns the internship posting (employerId matches user's ID).
     * @deny (write) if the user is not signed in or does not own the internship posting.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /internships/{internshipId} {
        function isOwner(employerId) {
            return request.auth != null && request.auth.uid == employerId;
        }

        allow get: if true;
        allow list: if true;

        allow create: if isOwner(request.resource.data.employerId);
        allow update: if isOwner(resource.data.employerId);
        allow delete: if isOwner(resource.data.employerId);
    }

     /**
     * @description Controls access to applicants for a specific internship.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (create) if the user is signed in.
     * @allow (read, update, delete) if the user is signed in and the employerId of the internship matches the user's ID.
     * @deny (write) if the user is not signed in or does not have the right employerId.
     * @principle Enforces employer ownership to manage applicants.
     */
    match /internships/{internshipId}/applicants/{candidateId} {
        function isOwner(employerId) {
            return request.auth != null && request.auth.uid == employerId;
        }

        allow get: if get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
        allow list: if get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;

        allow create: if request.auth != null; // Any signed-in user can apply
        allow update: if isOwner(get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId);
        allow delete: if isOwner(get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId);
    }
  }
}
/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model,
 *              granting different levels of access based on the user's role
 *              (candidate, employer, or tpo).  It also supports public
 *              read access to job and internship postings while restricting
 *              write access to authorized employers.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profiles, only accessible by the
 *   corresponding user.
 * - /employers/{userId}: Employer profiles, only accessible by the
 *   corresponding user.
 * - /institutes/{userId}: Institute profiles, only accessible by the
 *   corresponding user.
 * - /jobs/{jobId}: Job postings, publicly readable, but create/update/delete
 *   are restricted to the posting employer.  The 'employerId' field within
 *   the job document is used to enforce ownership.
 * - /internships/{internshipId}: Internship postings, publicly readable,
 *   but create/update/delete are restricted to the posting employer.  The
 *   'employerId' field within the internship document is used to enforce
 *   ownership.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles.
 * - Job and internship postings are publicly readable.
 * - Only employers can create, update, or delete job and internship postings,
 *   and only if they are the owner (employerId matches their UID).
 * - Listing of user profiles (candidates, employers, institutes) is disallowed.
 *
 * Denormalization for Authorization:
 * - The 'Job' and 'Internship' entities MUST have an 'employerId' field to
 *   correctly enforce ownership for write operations. This avoids needing
 *   to perform expensive and potentially impossible `get()` operations
 *   to determine the posting employer.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the
     *              provided userId.
     * @param userId The user ID to check against the authenticated user's UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user owns the existing document
     *              (based on a denormalized ownerId field) AND that the
     *              document exists.  This is used for update/delete operations
     *              to prevent acting on non-existent documents.
     * @param ownerId The owner ID stored in the document.
     */
    function isExistingOwner(ownerId) {
      return isSignedIn() && request.auth.uid == ownerId && resource != null;
    }

    /**
     * @description Enforces that on create, the incoming 'employerId' field
     *              matches the authenticated user's UID.
     * @param ownerIdField The field in the request data that holds the owner's id.
     */
    function validateIncomingOwnerId(ownerIdField) {
        return request.resource.data[ownerIdField] == request.auth.uid;
    }

    /**
     * @description Candidate profiles are private and only accessible to the
     *              profile owner.
     * @path /candidates/{userId}
     * @allow (create) User 'candidate_abc' can create their profile if
     *        request.auth.uid == 'candidate_abc'.
     * @allow (get) User 'candidate_abc' can read their profile.
     * @deny (create) User 'employer_xyz' cannot create a candidate profile.
     * @deny (get) User 'employer_xyz' cannot read a candidate profile.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Employer profiles are private and only accessible to the
     *              profile owner.
     * @path /employers/{userId}
     * @allow (create) User 'employer_xyz' can create their profile if
     *        request.auth.uid == 'employer_xyz'.
     * @allow (get) User 'employer_xyz' can read their profile.
     * @deny (create) User 'candidate_abc' cannot create an employer profile.
     * @deny (get) User 'candidate_abc' cannot read an employer profile.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Institute profiles are private and only accessible to the
     *              profile owner.
     * @path /institutes/{userId}
     * @allow (create) User 'institute_123' can create their profile if
     *        request.auth.uid == 'institute_123'.
     * @allow (get) User 'institute_123' can read their profile.
     * @deny (create) User 'candidate_abc' cannot create an institute profile.
     * @deny (get) User 'candidate_abc' cannot read an institute profile.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Job postings are publicly readable, but create, update, and
     *              delete operations are restricted to the employer who created
     *              the posting.
     * @path /jobs/{jobId}
     * @allow (get) Any user can read a job posting.
     * @allow (list) Any user can list job postings.
     * @allow (create) User 'employer_xyz' can create a job posting if
     *        request.resource.data.employerId == 'employer_xyz'.
     * @deny (create) User 'candidate_abc' cannot create a job posting.
     * @deny (update) User 'candidate_abc' cannot update a job posting, even if
     *       they know the document ID.
     * @principle Allows public reads with owner-only writes, enforces
     *            document ownership for writes.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && validateIncomingOwnerId('employerId');
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Internship postings are publicly readable, but create, update, and
     *              delete operations are restricted to the employer who created
     *              the posting.
     * @path /internships/{internshipId}
     * @allow (get) Any user can read an internship posting.
     * @allow (list) Any user can list internship postings.
     * @allow (create) User 'employer_xyz' can create an internship posting if
     *        request.resource.data.employerId == 'employer_xyz'.
     * @deny (create) User 'candidate_abc' cannot create an internship posting.
     * @deny (update) User 'candidate_abc' cannot update an internship posting, even if
     *       they know the document ID.
     * @principle Allows public reads with owner-only writes, enforces
     *            document ownership for writes.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && validateIncomingOwnerId('employerId');
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }
  }
}
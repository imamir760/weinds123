/**
 * @file Firebase Security Rules for Production Prototyping
 *
 * @core-philosophy This ruleset employs a hybrid security model, balancing open access for read operations with strict ownership and role-based access control for write operations.
 *  It prioritizes a secure-by-default posture, assuming all write operations are sensitive unless explicitly proven otherwise.
 *
 * @data-structure
 * - `/candidates/{userId}`: Stores candidate profile data, accessible only to the user themselves.
 * - `/employers/{userId}`: Stores employer profile data, accessible only to the user themselves.
 * - `/institutes/{userId}`: Stores institute profile data, accessible only to the user themselves.
 * - `/jobs/{jobId}`: Stores job postings. Publicly readable, but writeable only by the posting employer.
 * - `/internships/{internshipId}`: Stores internship postings. Publicly readable, but writeable only by the posting employer.
 * - `/applications/{applicationId}`: Stores applications for jobs/internships. Accessible only to the candidate and the employer.
 * - `/skillTestSubmissions/{submissionId}`: Stores candidate's test submissions. Accessible only to the candidate and the employer.
 * - `/skillTestReports/{reportId}`: Stores AI-generated reports for skill tests. Accessible only to the candidate and the employer.
 *
 * @key-security-decisions
 * - User listing is explicitly denied to protect user privacy.
 * - Ambiguous relationships default to owner-only access.
 * - The rules are designed to be permissive on data shapes during prototyping.
 * - Public read access is granted to `/jobs` and `/internships` collections, enabling open discovery of opportunities.
 *
 * @denormalization-for-authorization
 * - Jobs and Internships store the `employerId` to allow write access control based on the posting employer.
 * - Applications store both `candidateId` and `employerId` to allow both parties to access the application data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that only the authenticated user can read or write their own candidate profile.
     * @path /candidates/{userId}
     * @allow (create) User with uid 'user_abc' can create their profile at /candidates/user_abc if request.auth.uid == 'user_abc'.
     * @allow (get) User with uid 'user_abc' can read their profile at /candidates/user_abc if request.auth.uid == 'user_abc'.
     * @allow (update) User with uid 'user_abc' can update their profile at /candidates/user_abc if request.auth.uid == 'user_abc'.
     * @allow (delete) User with uid 'user_abc' can delete their profile at /candidates/user_abc if request.auth.uid == 'user_abc'.
     * @deny (create) User with uid 'user_def' cannot create a profile at /candidates/user_abc.
     * @deny (get) User with uid 'user_def' cannot read the profile at /candidates/user_abc.
     * @deny (update) User with uid 'user_def' cannot update the profile at /candidates/user_abc.
     * @deny (delete) User with uid 'user_def' cannot delete the profile at /candidates/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the authenticated user can read or write their own employer profile.
     * @path /employers/{userId}
     * @allow (create) User with uid 'user_abc' can create their profile at /employers/user_abc if request.auth.uid == 'user_abc'.
     * @allow (get) User with uid 'user_abc' can read their profile at /employers/user_abc if request.auth.uid == 'user_abc'.
     * @allow (update) User with uid 'user_abc' can update their profile at /employers/user_abc if request.auth.uid == 'user_abc'.
     * @allow (delete) User with uid 'user_abc' can delete their profile at /employers/user_abc if request.auth.uid == 'user_abc'.
     * @deny (create) User with uid 'user_def' cannot create a profile at /employers/user_abc.
     * @deny (get) User with uid 'user_def' cannot read the profile at /employers/user_abc.
     * @deny (update) User with uid 'user_def' cannot update the profile at /employers/user_abc.
     * @deny (delete) User with uid 'user_def' cannot delete the profile at /employers/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the authenticated user can read or write their own institute profile.
     * @path /institutes/{userId}
     * @allow (create) User with uid 'user_abc' can create their profile at /institutes/user_abc if request.auth.uid == 'user_abc'.
     * @allow (get) User with uid 'user_abc' can read their profile at /institutes/user_abc if request.auth.uid == 'user_abc'.
     * @allow (update) User with uid 'user_abc' can update their profile at /institutes/user_abc if request.auth.uid == 'user_abc'.
     * @allow (delete) User with uid 'user_abc' can delete their profile at /institutes/user_abc if request.auth.uid == 'user_abc'.
     * @deny (create) User with uid 'user_def' cannot create a profile at /institutes/user_abc.
     * @deny (get) User with uid 'user_def' cannot read the profile at /institutes/user_abc.
     * @deny (update) User with uid 'user_def' cannot update the profile at /institutes/user_abc.
     * @deny (delete) User with uid 'user_def' cannot delete the profile at /institutes/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to job postings but restricts write access to the employer who created the job.
     * @path /jobs/{jobId}
     * @allow (get) Any user can read job postings.
     * @allow (list) Any user can list job postings.
     * @allow (create) An employer can create a job posting if request.auth.uid == request.resource.data.employerId.
     * @allow (update) The employer who created the job can update it if request.auth.uid == resource.data.employerId.
     * @allow (delete) The employer who created the job can delete it if request.auth.uid == resource.data.employerId.
     * @deny (create) A candidate cannot create a job posting.
     * @deny (update) A candidate cannot update a job posting.
     * @deny (delete) A candidate cannot delete a job posting.
     * @principle Public read, owner-only writes.
     */
    match /jobs/{jobId} {
      function isOwner(employerId) {
        return request.auth != null && request.auth.uid == employerId;
      }
      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

       /**
     * @description Allows public read access to internship postings but restricts write access to the employer who created the job.
     * @path /internships/{internshipId}
     * @allow (get) Any user can read internship postings.
     * @allow (list) Any user can list internship postings.
     * @allow (create) An employer can create an internship posting if request.auth.uid == request.resource.data.employerId.
     * @allow (update) The employer who created the internship can update it if request.auth.uid == resource.data.employerId.
     * @allow (delete) The employer who created the internship can delete it if request.auth.uid == resource.data.employerId.
     * @deny (create) A candidate cannot create an internship posting.
     * @deny (update) A candidate cannot update an internship posting.
     * @deny (delete) A candidate cannot delete an internship posting.
     * @principle Public read, owner-only writes.
     */
    match /internships/{internshipId} {
      function isOwner(employerId) {
        return request.auth != null && request.auth.uid == employerId;
      }
      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Restricts access to applications to only the candidate and the employer involved in the application.
     * @path /applications/{applicationId}
     * @allow (get) Candidate or Employer can get an application if request.auth.uid == resource.data.candidateId || request.auth.uid == resource.data.employerId.
     * @allow (list)  Candidate or Employer can list an application if request.auth.uid == resource.data.candidateId || request.auth.uid == resource.data.employerId.
     * @allow (create) A candidate can create an application.
     * @allow (update) Candidate or Employer can update an application if request.auth.uid == resource.data.candidateId || request.auth.uid == resource.data.employerId and document exists.
     * @allow (delete) Candidate or Employer can delete an application if request.auth.uid == resource.data.candidateId || request.auth.uid == resource.data.employerId and document exists.
     * @deny (get) A user who is not the candidate or employer cannot read the application.
     * @deny (update) A user who is not the candidate or employer cannot update the application.
     * @deny (delete) A user who is not the candidate or employer cannot delete the application.
     * @principle Shared Access (Closed Collaborators).
     */
    match /applications/{applicationId} {
      function isParticipant(candidateId, employerId) {
        return request.auth != null && (request.auth.uid == candidateId || request.auth.uid == employerId);
      }
      function isExistingParticipant(candidateId, employerId) {
        return isParticipant(candidateId, employerId) && resource != null;
      }
      allow get: if isParticipant(resource.data.candidateId, resource.data.employerId);
      allow list: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.auth.uid;
      allow update: if isExistingParticipant(resource.data.candidateId, resource.data.employerId);
      allow delete: if isExistingParticipant(resource.data.candidateId, resource.data.employerId);
    }

    /**
     * @description Restricts access to skill test submissions to only the candidate and the employer involved in the test.
     * @path /skillTestSubmissions/{submissionId}
     * @allow (get) Candidate or Employer can get a skill test submission if request.auth.uid == resource.data.candidateId || request.auth.uid == resource.data.employerId.
     * @allow (list) Candidate or Employer can list skill test submissions if request.auth.uid == resource.data.candidateId || request.auth.uid == resource.data.employerId.
     * @allow (create) A candidate can create a skill test submission if request.auth.uid == request.resource.data.candidateId.
     * @allow (update) Candidate or Employer can update a skill test submission if request.auth.uid == resource.data.candidateId || request.auth.uid == resource.data.employerId and document exists.
     * @allow (delete) Candidate or Employer can delete a skill test submission if request.auth.uid == resource.data.candidateId || request.auth.uid == resource.data.employerId and document exists.
     * @deny (get) A user who is not the candidate or employer cannot read the skill test submission.
     * @deny (update) A user who is not the candidate or employer cannot update the skill test submission.
     * @deny (delete) A user who is not the candidate or employer cannot delete the skill test submission.
     * @principle Shared Access (Closed Collaborators).
     */
    match /skillTestSubmissions/{submissionId} {
      function isParticipant(candidateId, employerId) {
        return request.auth != null && (request.auth.uid == candidateId || request.auth.uid == employerId);
      }
      function isExistingParticipant(candidateId, employerId) {
        return isParticipant(candidateId, employerId) && resource != null;
      }
      allow get: if isParticipant(resource.data.candidateId, resource.data.employerId);
      allow list: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.candidateId;
      allow update: if isExistingParticipant(resource.data.candidateId, resource.data.employerId);
      allow delete: if isExistingParticipant(resource.data.candidateId, resource.data.employerId);
    }

       /**
     * @description Restricts access to skill test reports to only the candidate and the employer involved in the test.
     * @path /skillTestReports/{reportId}
     * @allow (get) Candidate or Employer can get a skill test report if request.auth.uid == resource.data.candidateId.
     * @allow (list) Candidate or Employer can list skill test reports if request.auth.uid == resource.data.candidateId.
     * @allow (create) N/A - Reports are generated server-side.
     * @allow (update) Candidate or Employer can update a skill test report if request.auth.uid == resource.data.candidateId and document exists.
     * @allow (delete) Candidate or Employer can delete a skill test report if request.auth.uid == resource.data.candidateId and document exists.
     * @deny (get) A user who is not the candidate or employer cannot read the skill test report.
     * @deny (update) A user who is not the candidate or employer cannot update the skill test report.
     * @deny (delete) A user who is not the candidate or employer cannot delete the skill test report.
     * @principle Shared Access (Closed Collaborators).
     */
    match /skillTestReports/{reportId} {
      function isParticipant(candidateId) {
        return request.auth != null && (request.auth.uid == candidateId);
      }
        function isExistingParticipant(candidateId) {
        return isParticipant(candidateId) && resource != null;
      }

      allow get: if isParticipant(resource.data.candidateId);
      allow list: if request.auth != null;
      allow create: if false;
      allow update: if isExistingParticipant(resource.data.candidateId);
      allow delete: if isExistingParticipant(resource.data.candidateId);
    }
  }
}
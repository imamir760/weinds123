/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based and ownership-based access control model.
 * Users can only read and write their own profiles. Employers can create, update, and delete their own job and internship postings.
 * Any user can view job and internship postings but may only apply once to any given opening.
 *
 * Data Structure:
 * - /candidates/{userId}: Stores candidate profiles.
 * - /employers/{userId}: Stores employer profiles.
 * - /institutes/{userId}: Stores institute profiles.
 * - /jobs/{jobId}: Stores job postings.
 * - /internships/{internshipId}: Stores internship postings.
 * - /applications/{applicationId}: Stores job/internship applications.
 *
 * Key Security Decisions:
 * - Users (candidates, employers and institutes) can only read and write their own profile data.
 * - Listing of users is disallowed.
 * - Job and Internship postings are publicly readable, but only the creating employer can modify them.
 * - Applications can be created by any authenticated user, but only one application per user per job/internship is allowed.
 * - Applications can only be accessed by the applicant.
 *
 * Denormalization for Authorization:
 * - Jobs and Internships store the employerId to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that only the authenticated user can read and write their own profile.
     * @path /candidates/{userId}
     * @allow (get, list) User with matching UID can read profile data.
     * @allow (create, update, delete) User with matching UID can create, update, and delete profile data.
     * @deny (get, list) User attempts to read another user's profile.
     * @deny (create, update, delete) User attempts to modify another user's profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /candidates/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the authenticated user can read and write their own profile.
     * @path /employers/{userId}
     * @allow (get, list) User with matching UID can read profile data.
     * @allow (create, update, delete) User with matching UID can create, update, and delete profile data.
     * @deny (get, list) User attempts to read another user's profile.
     * @deny (create, update, delete) User attempts to modify another user's profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /employers/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Enforces that only the authenticated user can read and write their own profile.
     * @path /institutes/{userId}
     * @allow (get, list) User with matching UID can read profile data.
     * @allow (create, update, delete) User with matching UID can create, update, and delete profile data.
     * @deny (get, list) User attempts to read another user's profile.
     * @deny (create, update, delete) User attempts to modify another user's profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /institutes/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read job postings, but only the owner can create, update, or delete.
     * @path /jobs/{jobId}
     * @allow (get, list) Any user can read job postings.
     * @allow (create) Only the job creator (employer) can create a job posting. The employerId must match the user's UID.
     * @allow (update, delete) Only the job creator (employer) can update or delete a job posting.
     * @deny (create) A user attempts to create a job posting with an employerId that doesn't match their UID.
     * @deny (update, delete) A user attempts to update or delete a job posting they don't own.
     * @principle Public read, owner-only write access.
     */
    match /jobs/{jobId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Allows anyone to read internship postings, but only the owner can create, update, or delete.
     * @path /internships/{internshipId}
     * @allow (get, list) Any user can read internship postings.
     * @allow (create) Only the internship creator (employer) can create an internship posting. The employerId must match the user's UID.
     * @allow (update, delete) Only the internship creator (employer) can update or delete an internship posting.
     * @deny (create) A user attempts to create an internship posting with an employerId that doesn't match their UID.
     * @deny (update, delete) A user attempts to update or delete an internship posting they don't own.
     * @principle Public read, owner-only write access.
     */
    match /internships/{internshipId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Allows creation of application, read access only to the applicant.
     * @path /applications/{applicationId}
     * @allow (create) Any signed in user can apply for a job/internship.
     * @allow (get, list) Only the applicant can read their own application
     * @deny (update, delete) No one can update or delete an application
     * @principle Signed in user can apply for job, only applicant can read application data
     */
    match /applications/{applicationId} {
      allow get: if isSignedIn() && resource.data.candidateId == request.auth.uid;
      allow list: if isSignedIn() && resource.data.candidateId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
      allow update, delete: if false;
    }
  }
}
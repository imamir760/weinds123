/**
 * @fileoverview Firestore Security Rules
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model where users can only read and write their own data,
 * with exceptions for public job/internship postings and their associated applicant subcollections.
 *
 * Data Structure:
 * - User profiles are stored under `/candidates/{userId}`, `/employers/{userId}`, and `/institutes/{userId}`.
 * - Job postings are stored under `/jobs/{jobId}`, and internship postings under `/internships/{internshipId}`.
 * - Applications are stored as subcollections under `/candidates/{userId}/jobApplications/{jobId}` and `/candidates/{userId}/internshipApplications/{internshipId}`.
 * - Applicants for jobs are stored as subcollections under `/jobs/{jobId}/applicants/{candidateId}`.
 * - Applicants for internships are stored as subcollections under `/internships/{internshipId}/applicants/{candidateId}`.
 *
 * Key Security Decisions:
 * - Candidates can create their own profiles.
 * - Employers and Institutes can create their own profiles.
 * - Job and internship postings are publicly readable.
 * - Only the employer who created a job or internship can modify or delete it.
 * - Only the employer who created a job/internship can read/write applicant data.
 * - Candidates can create applicant documents for jobs/internships.
 * - Listing of user profiles is disabled for security and privacy.
 *
 * Denormalization for Authorization:
 * - Jobs and internships denormalize the `employerId` field to enable owner-based write rules.
 * - Applicant documents under jobs/internships use the document ID as the candidateId to allow a candidate to create the document.
 *
 * Structural Segregation:
 * - Public job and internship postings are stored in top-level collections, while private user data is stored under user-specific paths.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows signed-in users to read candidate profiles, but restricts writes to the profile owner.
     * @path /candidates/{userId}
     * @allow (get) User with any auth state can read
     * @allow (create) User (candidate) can create their own profile.
     * @allow (update) User (candidate) can update their own profile.
     * @allow (delete) User (candidate) can delete their own profile.
     * @deny (list) No one can list candidate profiles.
     * @deny (create) User cannot create a profile for another user.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a candidate to manage their job applications.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (get) User (candidate) can read their own job application.
     * @allow (create) User (candidate) can create their own job application.
     * @allow (update) User (candidate) can update their own job application.
     * @allow (delete) User (candidate) can delete their own job application.
     * @deny (list) No one can list job applications.
     * @deny (create) User cannot create a job application for another user.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a candidate to manage their internship applications.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (get) User (candidate) can read their own internship application.
     * @allow (create) User (candidate) can create their own internship application.
     * @allow (update) User (candidate) can update their own internship application.
     * @allow (delete) User (candidate) can delete their own internship application.
     * @deny (list) No one can list internship applications.
     * @deny (create) User cannot create an internship application for another user.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows an employer to manage their own profile.
     * @path /employers/{userId}
     * @allow (get) User (employer) can read their own profile.
     * @allow (create) User (employer) can create their own profile.
     * @allow (update) User (employer) can update their own profile.
     * @allow (delete) User (employer) can delete their own profile.
     * @deny (list) No one can list employer profiles.
     * @deny (create) User cannot create a profile for another user.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows an institute to manage their own profile.
     * @path /institutes/{userId}
     * @allow (get) User (institute) can read their own profile.
     * @allow (create) User (institute) can create their own profile.
     * @allow (update) User (institute) can update their own profile.
     * @allow (delete) User (institute) can delete their own profile.
     * @deny (list) No one can list institute profiles.
     * @deny (create) User cannot create a profile for another user.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read job postings, but restricts writes to the job owner (employer).
     * @path /jobs/{jobId}
     * @allow (get) Anyone can read job postings.
     * @allow (list) Anyone can list job postings.
     * @allow (create) User (employer) can create a job posting if they are the employer.
     * @allow (update) User (employer) can update a job posting if they are the employer.
     * @allow (delete) User (employer) can delete a job posting if they are the employer.
     * @deny (create) User cannot create a job posting for another employer.
     * @principle Public read, owner-only writes, enforces employerId consistency on create.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.employerId == request.auth.uid;
      allow update: if request.auth != null && resource.data.employerId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Allows the job owner (employer) to read and list applicants, and allows candidates to create their own applicant documents.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (get) User (employer) can read applicants for their job.
     * @allow (list) User (employer) can list applicants for their job.
     * @allow (create) User (candidate) can create their own applicant doc for the job.
     * @allow (update) User (employer) can update applicants for their job.
     * @allow (delete) User (employer) can delete applicants for their job.
     * @principle Shared Access (Employer/Candidate)
     */
    match /jobs/{jobId}/applicants/{candidateId} {
      function getJobEmployerId() {
        return get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId;
      }

      // Employer who owns the job can read and list applicants
      allow get:  if request.auth != null && getJobEmployerId() == request.auth.uid;
      allow list: if request.auth != null && getJobEmployerId() == request.auth.uid;

      // Allow candidate to create their own applicant doc for this job
      allow create: if request.auth != null && request.auth.uid == candidateId;

      // Allow employer to create/update/delete (if you also let employer write applicants)
      allow update: if request.auth != null && getJobEmployerId() == request.auth.uid;
      allow delete: if request.auth != null && getJobEmployerId() == request.auth.uid;
    }

    /**
     * @description Allows anyone to read internship postings, but restricts writes to the internship owner (employer).
     * @path /internships/{internshipId}
     * @allow (get) Anyone can read internship postings.
     * @allow (list) Anyone can list internship postings.
     * @allow (create) User (employer) can create an internship posting if they are the employer.
     * @allow (update) User (employer) can update an internship posting if they are the employer.
     * @allow (delete) User (employer) can delete an internship posting if they are the employer.
     * @deny (create) User cannot create an internship posting for another employer.
     * @principle Public read, owner-only writes, enforces employerId consistency on create.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.employerId == request.auth.uid;
      allow update: if request.auth != null && resource.data.employerId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Allows the internship owner (employer) to read and list applicants, and allows candidates to create their own applicant documents.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (get) User (employer) can read applicants for their internship.
     * @allow (list) User (employer) can list applicants for their internship.
     * @allow (create) User (candidate) can create their own applicant doc for the internship.
     * @allow (update) User (employer) can update applicants for their internship.
     * @allow (delete) User (employer) can delete applicants for their internship.
     * @principle Shared Access (Employer/Candidate)
     */
    match /internships/{internshipId}/applicants/{candidateId} {
      function getInternshipEmployerId() {
        return get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId;
      }

      allow get:  if request.auth != null && getInternshipEmployerId() == request.auth.uid;
      allow list: if request.auth != null && getInternshipEmployerId() == request.auth.uid;

      allow create: if request.auth != null && request.auth.uid == candidateId;
      allow update: if request.auth != null && getInternshipEmployerId() == request.auth.uid;
      allow delete: if request.auth != null && getInternshipEmployerId() == request.auth.uid;
    }
  }
}
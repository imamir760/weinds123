/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for profile data and a public-read, owner-write model for job/internship postings.
 * Applications and skill test submissions are also secured under an ownership model. AI Skill test reports are secured to be only created by backend, but readable by candidate, employer, and TPO roles.
 *
 * Data Structure:
 * - `/candidates/{userId}`: Candidate profile data, owned by the user.
 * - `/employers/{userId}`: Employer profile data, owned by the user.
 * - `/institutes/{userId}`: Institute profile data, owned by the user.
 * - `/jobs/{jobId}`: Job postings, publicly readable, but only writable by the owning employer.
 * - `/internships/{internshipId}`: Internship postings, publicly readable, but only writable by the owning employer.
 * - `/applications/{applicationId}`: Job/Internship applications, secured with an ownership model.
 * - `/skillTestSubmissions/{submissionId}`: Skill test submissions, secured with an ownership model.
 * - `/skillTestReports/{reportId}`: AI Skill test reports, secured to be only created by backend, but readable by candidate, employer, and TPO roles.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data (candidates, employers, institutes).
 * - Job and internship postings are publicly readable to maximize visibility. Only the owning employer can create, update, or delete them.
 * - Applications can be created by any user, but only read by the application creator or the job/internship poster.
 * - Skill test submissions can only be created by candidates for jobs/internships they have applied to.
 *
 * Denormalization for Authorization:
 * - Job and Internship documents denormalize the `employerId` to allow for simple ownership checks on writes.
 * - Application documents denormalize `candidateId` and `employerId` to allow for simpler authorization checks.
 * - SkillTestSubmission documents denormalize `candidateId` and `employerId` to allow for simpler authorization checks.
 *
 * Structural Segregation:
 * - Public job and internship postings are stored in top-level collections (`/jobs`, `/internships`) for easy public access, while private profile data is stored under user-specific paths (`/candidates/{userId}`, `/employers/{userId}`, `/institutes/{userId}`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @param None
     * @return {bool} - True if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {bool} - True if the user IDs match.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {bool} - True if the user IDs match and the resource exists.
     */
    function isExistingOwner(userId) {
        return (isOwner(userId) && resource != null);
    }

    /**
     * @description Rules for candidate profiles.
     * @path /candidates/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - A user can only access their own profile.
     * @deny (create) - A user cannot create a profile with a userId that doesn't match their auth.uid.
     * @deny (update, delete) - A user cannot modify or delete someone else's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for employer profiles.
     * @path /employers/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - A user can only access their own profile.
     * @deny (create) - A user cannot create a profile with a userId that doesn't match their auth.uid.
     * @deny (update, delete) - A user cannot modify or delete someone else's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for institute profiles.
     * @path /institutes/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - A user can only access their own profile.
     * @deny (create) - A user cannot create a profile with a userId that doesn't match their auth.uid.
     * @deny (update, delete) - A user cannot modify or delete someone else's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) - Any user can read job postings.
     * @allow (create) - Only an authenticated employer can create a job posting. The employerId field must match their auth.uid.
     * @allow (update, delete) - Only the employer who created the job posting can update or delete it.
     * @deny (create) - Prevent a user from creating a job posting with an employerId that doesn't match their auth.uid.
     * @deny (update, delete) - Prevent a user from updating or deleting a job posting they don't own.
     * @principle Allows public reads but restricts writes to the owner. Validates employerId on create.
     */
    match /jobs/{jobId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
    }

    /**
     * @description Rules for internship postings.
     * @path /internships/{internshipId}
     * @allow (get, list) - Any user can read internship postings.
     * @allow (create) - Only an authenticated employer can create an internship posting. The employerId field must match their auth.uid.
     * @allow (update, delete) - Only the employer who created the internship posting can update or delete it.
     * @deny (create) - Prevent a user from creating an internship posting with an employerId that doesn't match their auth.uid.
     * @deny (update, delete) - Prevent a user from updating or deleting an internship posting they don't own.
     * @principle Allows public reads but restricts writes to the owner. Validates employerId on create.
     */
    match /internships/{internshipId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
    }

    /**
     * @description Rules for applications.
     * @path /applications/{applicationId}
     * @allow (create) - Any signed-in user can create an application.
     * @allow (get, list) - Only the candidate or employer associated with the application can read it.
     * @allow (update, delete) - No one can update/delete an application after it is created.
     * @deny (get) - Prevent unauthorized users from reading applications.
     * @deny (update, delete) - Prevent anyone from updating or deleting applications.
     * @principle Restricts read access to the candidate and employer involved in the application.
     */
    match /applications/{applicationId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for skill test submissions.
     * @path /skillTestSubmissions/{submissionId}
     * @allow (create) - Only a signed-in candidate can create a skill test submission.
     * @allow (get, list) - Only the candidate or employer associated with the submission can read it.
     * @allow (update, delete) - No one can update/delete a skill test submission after it is created.
     * @deny (get) - Prevent unauthorized users from reading skill test submissions.
     * @deny (update, delete) - Prevent anyone from updating or deleting skill test submissions.
     * @principle Restricts read access to the candidate and employer involved in the submission.
     */
    match /skillTestSubmissions/{submissionId} {
      allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
      allow get, list: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
      allow update: if false;
      allow delete: if false;
    }

       /**
        * @description Rules for skill test reports.
        * @path /skillTestReports/{reportId}
        * @allow (create) - Only the service account can create skill test reports (TODO: Implement service account check).
        * @allow (get, list) - Candidates, Employers and TPOs can read test reports.
        * @allow (update, delete) - No one can update/delete an AI Skill test report after it is created.
        * @deny (get) - Prevent unauthorized users from reading skill test reports.
        * @deny (update, delete) - Prevent anyone from updating or deleting skill test reports.
        * @principle Only service accounts can create skill test reports. Restricts read access to candidates, employers and TPOs.
        */
    match /skillTestReports/{reportId} {
        allow create: if false; // TODO: Replace with service account check
        allow get, list: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Rules for traditional tests (skill-tests) - this fixes the error reported in src/app/employer/skill-tests/page.tsx
     * @path /traditionalTests/{testId}
     * @allow (get, list) - Only an authenticated employer can list traditional tests that are associated with their employer ID.
     * @allow (create, update, delete) - Not allowed.
     * @deny (create, update, delete) - Prevents writes.
     * @principle Restricts listing to the owner of the employer profile.
     */
    match /traditionalTests/{testId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}
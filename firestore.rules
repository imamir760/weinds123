/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and restricts access to jobs, internships and applications based on user roles and ownership.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profiles, accessible only by the owning user.
 * - /employers/{userId}: Employer profiles, accessible only by the owning user.
 * - /institutes/{userId}: Institute profiles, accessible only by the owning user.
 * - /jobs/{jobId}: Job postings, publicly readable but with owner-only writes.
 * - /internships/{internshipId}: Internship postings, publicly readable but with owner-only writes.
 * - /applications/{applicationId}: Applications, with access restricted to the candidate who created them.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Public read access is granted to job and internship postings to maximize visibility.
 * - Write access to job and internship postings is restricted to the owner (employer).
 *
 * Denormalization for Authorization:
 * - Jobs and Internships include an `employerId` field to enable owner-only write rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Candidate profile access is restricted to the owning user.
     * @path /candidates/{userId}
     * @allow (read, write) User with UID 'user123' can access /candidates/user123. (create) User with UID 'user123' can create /candidates/user123.
     * @deny (read, write) User with UID 'user456' cannot access /candidates/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Employer profile access is restricted to the owning user.
     * @path /employers/{userId}
     * @allow (read, write) User with UID 'user123' can access /employers/user123. (create) User with UID 'user123' can create /employers/user123.
     * @deny (read, write) User with UID 'user456' cannot access /employers/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Institute profile access is restricted to the owning user (TPO).
     * @path /institutes/{userId}
     * @allow (read, write) User with UID 'user123' can access /institutes/user123. (create) User with UID 'user123' can create /institutes/user123.
     * @deny (read, write) User with UID 'user456' cannot access /institutes/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Job postings are publicly readable, but only the employer can create, update, or delete them.
     * @path /jobs/{jobId}
     * @allow (read) Any user can read a job posting.
     * @allow (create) An employer can create a job posting with their employerId.
     * @allow (update, delete) Only the employer who created the job can update or delete it.
     * @deny (create) A candidate cannot create a job posting.
     * @deny (update, delete) An employer cannot update or delete a job posting they don't own.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Internship postings are publicly readable, but only the employer can create, update, or delete them.
     * @path /internships/{internshipId}
     * @allow (read) Any user can read an internship posting.
     * @allow (create) An employer can create an internship posting with their employerId.
     * @allow (update, delete) Only the employer who created the internship can update or delete it.
     * @deny (create) A candidate cannot create an internship posting.
     * @deny (update, delete) An employer cannot update or delete an internship posting they don't own.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Applications can be read and written only by the candidate who created them.
     * @path /applications/{applicationId}
     * @allow (read, write) A candidate can access their own application.
     * @deny (read, write) A candidate cannot access another candidate's application.
     * @principle Enforces document ownership for all operations.
     */
    match /applications/{applicationId} {
      allow get: if isSignedIn() && resource.data.candidateId == request.auth.uid;
      allow list: if isSignedIn() && true; // Assuming the owner can list their applications
      allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.candidateId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.candidateId);
    }
  }
}
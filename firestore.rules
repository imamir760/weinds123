/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control system with strict ownership for user profiles and public read access for jobs and internships.
 *
 * Data Structure:
 * - User profiles (candidate, employer, institute) are stored in separate top-level collections (`/candidates/{userId}`, `/employers/{userId}`, `/institutes/{userId}`).
 * - Jobs and internships are stored in top-level collections (`/jobs/{jobId}`, `/internships/{internshipId}`).
 * - Applications are stored in a top-level collection (`/applications/{applicationId}`).
 * - Skill test submissions are stored in a top-level collection (`/skillTestSubmissions/{submissionId}`).
 * - Skill test reports are stored in a top-level collection (`/skillTestReports/{reportId}`).
 *
 * Key Security Decisions:
 * - User profiles are only accessible and modifiable by the user themselves.
 * - Job and internship postings are publicly readable, but only the employer who created them can modify or delete them.
 * - Applications can be created by candidates, but only updated or deleted by either the candidate or the employer involved.
 * - Skill test submissions can be created by candidates, but only updated or deleted by either the candidate or the employer involved.
 *
 * Denormalization for Authorization:
 * - Job and Internship documents contain an `employerId` field, which is used to enforce ownership for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a candidate to read and write their own profile data.
     * @path /candidates/{userId}
     * @allow (get, list, create, update, delete) if request.auth.uid == userId
     * @deny (get, list, create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows an employer to read and write their own profile data.
     * @path /employers/{userId}
     * @allow (get, list, create, update, delete) if request.auth.uid == userId
     * @deny (get, list, create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows an institute (TPO) to read and write their own profile data.
     * @path /institutes/{userId}
     * @allow (get, list, create, update, delete) if request.auth.uid == userId
     * @deny (get, list, create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read job postings, but only the owner can modify or delete them.
     * @path /jobs/{jobId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == request.resource.data.employerId
     * @allow (update, delete) if request.auth.uid == resource.data.employerId
     * @deny (create, update, delete) if request.auth.uid != resource.data.employerId
     * @principle Allows public reads, enforces document ownership for writes.
     */
    match /jobs/{jobId} {
      function isSignedIn() {
          return request.auth != null;
      }
      
      function isOwner(employerId) {
          return isSignedIn() && request.auth.uid == employerId;
      }

      function isExistingOwner(employerId) {
          return isOwner(employerId) && resource.data != null && resource.data.employerId == employerId;
      }
      
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Allows anyone to read internship postings, but only the owner can modify or delete them.
     * @path /internships/{internshipId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == request.resource.data.employerId
     * @allow (update, delete) if request.auth.uid == resource.data.employerId
     * @deny (create, update, delete) if request.auth.uid != resource.data.employerId
     * @principle Allows public reads, enforces document ownership for writes.
     */
    match /internships/{internshipId} {
      function isSignedIn() {
          return request.auth != null;
      }
      
      function isOwner(employerId) {
          return isSignedIn() && request.auth.uid == employerId;
      }

      function isExistingOwner(employerId) {
          return isOwner(employerId) && resource.data != null && resource.data.employerId == employerId;
      }
      
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Allows candidates to create applications, and employers or the candidate to update/delete them.
     * @path /applications/{applicationId}
     * @allow (create) if request.auth.uid == request.resource.data.candidateId
     * @allow (get, list, update, delete) if request.auth.uid == resource.data.candidateId || request.auth.uid == resource.data.employerId
     * @deny (get, list, update, delete) if request.auth.uid != resource.data.candidateId && request.auth.uid != resource.data.employerId
     * @principle Allows application creation by candidates, and modification/deletion by either the candidate or employer.
     */
    match /applications/{applicationId} {
        function isSignedIn() {
            return request.auth != null;
        }
      
        function isCandidate(candidateId) {
            return isSignedIn() && request.auth.uid == candidateId;
        }

        function isEmployer(employerId) {
            return isSignedIn() && request.auth.uid == employerId;
        }
        
        function isRelatedParty(candidateId, employerId) {
            return isCandidate(candidateId) || isEmployer(employerId);
        }
        
        function isExistingRelatedParty(candidateId, employerId) {
            return isSignedIn() && resource.data != null && (resource.data.candidateId == candidateId || resource.data.employerId == employerId);
        }

        allow get, list: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
        allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
        allow update: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
        allow delete: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
    }

    /**
     * @description Allows candidates to create skill test submissions, and employers or the candidate to update/delete them.
     * @path /skillTestSubmissions/{submissionId}
     * @allow (create) if request.auth.uid == request.resource.data.candidateId
     * @allow (get, list, update, delete) if request.auth.uid == resource.data.candidateId || request.auth.uid == resource.data.employerId
     * @deny (get, list, update, delete) if request.auth.uid != resource.data.candidateId && request.auth.uid != resource.data.employerId
     * @principle Allows submission creation by candidates, and modification/deletion by either the candidate or employer.
     */
    match /skillTestSubmissions/{submissionId} {
        function isSignedIn() {
            return request.auth != null;
        }
      
        function isCandidate(candidateId) {
            return isSignedIn() && request.auth.uid == candidateId;
        }

        function isEmployer(employerId) {
            return isSignedIn() && request.auth.uid == employerId;
        }
        
        function isRelatedParty(candidateId, employerId) {
            return isCandidate(candidateId) || isEmployer(employerId);
        }
        
        function isExistingRelatedParty(candidateId, employerId) {
            return isSignedIn() && resource.data != null && (resource.data.candidateId == candidateId || resource.data.employerId == employerId);
        }

        allow get, list: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
        allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
        allow update: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
        allow delete: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
    }

    /**
     * @description Allows access to skill test reports for associated candidates and employers.
     * @path /skillTestReports/{reportId}
     * @allow (get, list) if request.auth.uid == resource.data.candidateId
     * @deny (create, update, delete)
     * @principle Restricts access to a user's own data tree.
     */
    match /skillTestReports/{reportId} {
        function isSignedIn() {
            return request.auth != null;
        }
      
        function isCandidate(candidateId) {
            return isSignedIn() && request.auth.uid == candidateId;
        }

        function isExistingCandidate(candidateId) {
            return isCandidate(candidateId) && resource.data != null && resource.data.candidateId == candidateId;
        }
      
        allow get, list: if isSignedIn() && resource.data.candidateId == request.auth.uid;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
    
    /**
     * @description Publicly listable collection that can be added to by authenticated users, but only updated/deleted by its owner
     * @path /traditionalTests
     * @allow get, list: if true
     */
    match /traditionalTests/{document} {
        allow get, list: if true;
        allow create: if request.auth != null;
        allow update: if false;
        allow delete: if false;
    }
  }
}
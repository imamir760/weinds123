/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for profiles and applications,
 *              allowing users to manage their own data while restricting access to others' data.
 *              Job and internship postings are publicly readable but only creatable/modifiable by authenticated employers.
 *              Applicants subcollections are secured to allow only authorized access based on the parent document.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profiles, owned by the user with matching UID.
 * - /candidates/{userId}/jobApplications/{jobId}: Job applications submitted by a candidate.
 * - /candidates/{userId}/internshipApplications/{internshipId}: Internship applications submitted by a candidate.
 * - /employers/{userId}: Employer profiles, owned by the user with matching UID.
 * - /institutes/{userId}: Institute profiles, owned by the user with matching UID.
 * - /jobs/{jobId}: Job postings, publicly readable, created and managed by employers.
 * - /jobs/{jobId}/applicants/{candidateId}: Applicants for a specific job.
 * - /internships/{internshipId}: Internship postings, publicly readable, created and managed by employers.
 * - /internships/{internshipId}/applicants/{candidateId}: Applicants for a specific internship.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Job and internship postings are publicly readable but only creatable/modifiable by authenticated employers.
 * - Listing of job and internship applications are restricted to the owner.
 * - Institutes can only access their own profile data.
 *
 * Denormalization for Authorization:
 *  -The rules leverage the document path (/candidates/{userId}...) to enforce ownership.
 *   No denormalization is explicitly used, but the path structure itself acts as a form of denormalization,
 *   associating resources with specific user IDs.
 *
 * Structural Segregation:
 *  -The rules use separate collections for different types of data (profiles, jobs, applications),
 *   each with its own access control rules. This segregation improves security and performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a candidate to manage their own profile.
     * @path /candidates/{userId}
     * @allow (create, update, delete): User with UID 'user_abc' can create, update, or delete their own profile at /candidates/user_abc.
     * @allow (get, list): User with UID 'user_abc' can get their profile at /candidates/user_abc and list.
     * @deny (create, update, delete): User with UID 'user_xyz' cannot create, update, or delete the profile at /candidates/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a candidate to manage their own job applications.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create, update, delete): User with UID 'user_abc' can create, update, or delete their own job application at /candidates/user_abc/jobApplications/job_123.
     * @allow (get, list): User with UID 'user_abc' can get their job application at /candidates/user_abc/jobApplications/job_123.
     * @deny (create, update, delete): User with UID 'user_xyz' cannot create, update, or delete the job application at /candidates/user_abc/jobApplications/job_123.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a candidate to manage their own internship applications.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (create, update, delete): User with UID 'user_abc' can create, update, or delete their own internship application at /candidates/user_abc/internshipApplications/intern_123.
     * @allow (get, list): User with UID 'user_abc' can get their internship application at /candidates/user_abc/internshipApplications/intern_123.
     * @deny (create, update, delete): User with UID 'user_xyz' cannot create, update, or delete the internship application at /candidates/user_abc/internshipApplications/intern_123.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows an employer to manage their own profile.
     * @path /employers/{userId}
     * @allow (create, update, delete): User with UID 'employer_abc' can create, update, or delete their own profile at /employers/employer_abc.
     * @allow (get, list): User with UID 'employer_abc' can get their profile at /employers/employer_abc.
     * @deny (create, update, delete): User with UID 'user_xyz' cannot create, update, or delete the profile at /employers/employer_abc.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows an institute to manage their own profile.
     * @path /institutes/{userId}
     * @allow (create, update, delete): User with UID 'institute_abc' can create, update, or delete their own profile at /institutes/institute_abc.
     * @allow (get, list): User with UID 'institute_abc' can get their profile at /institutes/institute_abc.
     * @deny (create, update, delete): User with UID 'user_xyz' cannot create, update, or delete the profile at /institutes/institute_abc.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read job postings, but only authenticated employers can create, update, or delete them.
     * @path /jobs/{jobId}
     * @allow (get, list): Any user can read any job posting.
     * @allow (create, update, delete): User with UID 'employer_abc' can create, update, or delete a job posting if they are authenticated.
     * @deny (create, update, delete): Unauthenticated users or users with the wrong UID cannot create, update, or delete job postings.
     * @principle Allows public read access with owner-only writes.
     */
    match /jobs/{jobId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

     /**
     * @description Allows authenticated employers to manage applicants for a specific job.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (create, update, delete): Authenticated employer can create, update, or delete applicants for a specific job.
     * @allow (get, list): Authenticated employer can get and list applicants for a specific job.
     * @deny (create, update, delete): Unauthenticated users cannot create, update, or delete applicants.
     * @principle Restricts access to applicants to authorized employers only.
     */
    match /jobs/{jobId}/applicants/{candidateId} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read internship postings, but only authenticated employers can create, update, or delete them.
     * @path /internships/{internshipId}
     * @allow (get, list): Any user can read any internship posting.
     * @allow (create, update, delete): User with UID 'employer_abc' can create, update, or delete an internship posting if they are authenticated.
     * @deny (create, update, delete): Unauthenticated users or users with the wrong UID cannot create, update, or delete internship postings.
     * @principle Allows public read access with owner-only writes.
     */
    match /internships/{internshipId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows authenticated employers to manage applicants for a specific internship.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (create, update, delete): Authenticated employer can create, update, or delete applicants for a specific internship.
     * @allow (get, list): Authenticated employer can get and list applicants for a specific internship.
     * @deny (create, update, delete): Unauthenticated users cannot create, update, or delete applicants.
     * @principle Restricts access to applicants to authorized employers only.
     */
    match /internships/{internshipId}/applicants/{candidateId} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }
  }
}
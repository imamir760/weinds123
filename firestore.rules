rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Retrieves the employer ID from a job document.
     * @return {string} The employer ID.
     */
    function getJobEmployerId(jobId) {
      return get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId;
    }

    /**
     * @description Retrieves the employer ID from an internship document.
     * @return {string} The employer ID.
     */
    function getInternshipEmployerId(internshipId) {
      return get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId;
    }

    /**
     * @description Defines security rules for candidate profiles.
     * @path /candidates/{userId}
     * @allow (get) Authenticated user with matching userId can read their own profile.
     * @deny (get) Authenticated user tries to read another user's profile.
     * @allow (create) Authenticated user with matching userId can create their own profile.
     * @deny (create) Authenticated user tries to create a profile with a mismatched userId.
     * @allow (update) Authenticated user with matching userId can update their own profile.
     * @deny (update) Authenticated user tries to update another user's profile.
     * @allow (delete) Authenticated user with matching userId can delete their own profile.
     * @deny (delete) Authenticated user tries to delete another user's profile.
     * @principle Enforces document ownership for all read and write operations.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines security rules for candidate job applications.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create) Authenticated user with matching userId can create job application
     * @deny (create) Authenticated user tries to create a job application with a mismatched userId.
     * @allow (update) Authenticated user with matching userId can update their job application
     * @deny (update) Authenticated user tries to update another user's job application.
     * @allow (delete) Authenticated user with matching userId can delete their job application
     * @deny (delete) Authenticated user tries to delete another user's job application.
     * @allow (get) Authenticated user with matching userId can get their job application.
     * @deny (get) Authenticated user tries to get another user's job application.
     * @principle Enforces document ownership for all read and write operations.
     */
     match /candidates/{userId}/jobApplications/{jobId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
     }

     /**
      * @description Defines security rules for candidate internship applications.
      * @path /candidates/{userId}/internshipApplications/{internshipId}
      * @allow (create) Authenticated user with matching userId can create internship application
      * @deny (create) Authenticated user tries to create a internship application with a mismatched userId.
      * @allow (update) Authenticated user with matching userId can update their internship application
      * @deny (update) Authenticated user tries to update another user's internship application.
      * @allow (delete) Authenticated user with matching userId can delete their internship application
      * @deny (delete) Authenticated user tries to delete another user's internship application.
      * @allow (get) Authenticated user with matching userId can get their internship application.
      * @deny (get) Authenticated user tries to get another user's internship application.
      * @principle Enforces document ownership for all read and write operations.
      */
     match /candidates/{userId}/internshipApplications/{internshipId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
     }

    /**
     * @description Defines security rules for employer profiles.
     * @path /employers/{userId}
     * @allow (get) Authenticated user with matching userId can read their own profile.
     * @deny (get) Authenticated user tries to read another user's profile.
     * @allow (create) Authenticated user with matching userId can create their own profile.
     * @deny (create) Authenticated user tries to create a profile with a mismatched userId.
     * @allow (update) Authenticated user with matching userId can update their own profile.
     * @deny (update) Authenticated user tries to update another user's profile.
     * @allow (delete) Authenticated user with matching userId can delete their own profile.
     * @deny (delete) Authenticated user tries to delete another user's profile.
     * @principle Enforces document ownership for all read and write operations.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines security rules for institute profiles.
     * @path /institutes/{userId}
     * @allow (get) Authenticated user with matching userId can read their own profile.
     * @deny (get) Authenticated user tries to read another user's profile.
     * @allow (create) Authenticated user with matching userId can create their own profile.
     * @deny (create) Authenticated user tries to create a profile with a mismatched userId.
     * @allow (update) Authenticated user with matching userId can update their own profile.
     * @deny (update) Authenticated user tries to update another user's profile.
     * @allow (delete) Authenticated user with matching userId can delete their own profile.
     * @deny (delete) Authenticated user tries to delete another user's profile.
     * @principle Enforces document ownership for all read and write operations.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines security rules for job postings.
     * @path /jobs/{jobId}
     * @allow (get) Anyone can read job postings.
     * @allow (list) Anyone can list job postings.
     * @allow (create) Only authenticated employers can create job postings.
     *                  The 'employerId' field must match the authenticated user's ID.
     * @deny (create) Unauthorized users try to create job postings.
     * @allow (update) Only the employer who created the job posting can update it.
     *                  The 'employerId' field must match the authenticated user's ID.
     * @deny (update) Unauthorized users try to update job postings.
     * @allow (delete) Only the employer who created the job posting can delete it.
     *                  The 'employerId' field must match the authenticated user's ID.
     * @deny (delete) Unauthorized users try to delete job postings.
     * @principle Allows public read access with owner-only writes, enforces ownership on create/update/delete.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.employerId;
      allow update: if isSignedIn() && getJobEmployerId(jobId) == request.auth.uid;
      allow delete: if isSignedIn() && getJobEmployerId(jobId) == request.auth.uid;
    }

    /**
     * @description Defines security rules for applicants of a job.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (get) Employer who owns the job can get applicants
     * @allow (list) Employer who owns the job can list applicants
     * @allow (create) Employer can create applicants (if intended).
     * @allow (update) Employer can update applicants (if intended).
     * @allow (delete) Employer can delete applicants (if intended).
     * @principle Allows job owner to manage applicants.
     */
    match /jobs/{jobId}/applicants/{candidateId} {
      // Employer who owns the job can get and list applicants
      allow get:  if isSignedIn() && getJobEmployerId(jobId) == request.auth.uid;
      allow list: if isSignedIn() && getJobEmployerId(jobId) == request.auth.uid;

      // Employer can create/update/delete applicants (if intended)
      allow create: if isSignedIn() && getJobEmployerId(jobId) == request.auth.uid;
      allow update: if isSignedIn() && getJobEmployerId(jobId) == request.auth.uid;
      allow delete: if isSignedIn() && getJobEmployerId(jobId) == request.auth.uid;
    }

    /**
     * @description Defines security rules for internship postings.
     * @path /internships/{internshipId}
     * @allow (get) Anyone can read internship postings.
     * @allow (list) Anyone can list internship postings.
     * @allow (create) Only authenticated employers can create internship postings.
     *                  The 'employerId' field must match the authenticated user's ID.
     * @deny (create) Unauthorized users try to create internship postings.
     * @allow (update) Only the employer who created the internship posting can update it.
     *                  The 'employerId' field must match the authenticated user's ID.
     * @deny (update) Unauthorized users try to update internship postings.
     * @allow (delete) Only the employer who created the internship posting can delete it.
     *                  The 'employerId' field must match the authenticated user's ID.
     * @deny (delete) Unauthorized users try to delete internship postings.
     * @principle Allows public read access with owner-only writes, enforces ownership on create/update/delete.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.employerId;
      allow update: if isSignedIn() && getInternshipEmployerId(internshipId) == request.auth.uid;
      allow delete: if isSignedIn() && getInternshipEmployerId(internshipId) == request.auth.uid;
    }

       /**
        * @description Defines security rules for applicants of an internship.
        * @path /internships/{internshipId}/applicants/{candidateId}
        * @allow (get) Employer who owns the internship can get applicants
        * @allow (list) Employer who owns the internship can list applicants
        * @allow (create) Employer can create applicants (if intended).
        * @allow (update) Employer can update applicants (if intended).
        * @allow (delete) Employer can delete applicants (if intended).
        * @principle Allows internship owner to manage applicants.
        */
    match /internships/{internshipId}/applicants/{candidateId} {
        allow get:  if isSignedIn() && getInternshipEmployerId(internshipId) == request.auth.uid;
        allow list: if isSignedIn() && getInternshipEmployerId(internshipId) == request.auth.uid;

        // Employer can create/update/delete applicants (if intended)
        allow create: if isSignedIn() && getInternshipEmployerId(internshipId) == request.auth.uid;
        allow update: if isSignedIn() && getInternshipEmployerId(internshipId) == request.auth.uid;
        allow delete: if isSignedIn() && getInternshipEmployerId(internshipId) == request.auth.uid;
    }
  }
}
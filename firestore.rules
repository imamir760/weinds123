/**
 * @fileoverview Firestore Security Rules for the platform.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model, balancing public readability with strict ownership and role-based access controls for writes.
 *
 * Data Structure:
 * - User profiles (candidates, employers, institutes) are stored in separate top-level collections, secured by owner-only access.
 * - Job and internship postings are stored in top-level collections and are publicly readable but writable only by the posting employer.
 * - Applications are stored in a top-level collection and are readable and writable by the involved candidate and employer.
 * - Skill test submissions and reports are stored in top-level collections, secured by specific rules that ensure only the candidate can submit, and reports are only generated by backend services.
 *
 * Key Security Decisions:
 * - Users can only create, update, or delete their own profile data.
 * - Job and internship postings are publicly readable, enabling a wide audience to view opportunities.
 * - Writes to job and internship postings are restricted to the owning employer.
 * - Applications can be created by candidates and updated by employers to manage the application process.
 * - Listing of users is disallowed to protect privacy.
 *
 * Denormalization for Authorization:
 * - Job and Internship documents require an `employerId` field to enforce ownership for write operations.
 * - Application documents require `candidateId` and `employerId` fields to manage access for both parties.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires authentication for secure access.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user-specific data access.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Combines ownership and existence checks for safer destructive operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule set for candidate profiles.
     * @path /candidates/{userId}
     * @allow (create) User with ID 'user123' creates their own profile.
     * @deny (create) User with ID 'user123' tries to create a profile for 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule set for employer profiles.
     * @path /employers/{userId}
     * @allow (create) Employer with ID 'employer123' creates their own profile.
     * @deny (create) Employer with ID 'employer123' tries to create a profile for 'employer456'.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule set for institute profiles.
     * @path /institutes/{userId}
     * @allow (create) Institute with ID 'institute123' creates their own profile.
     * @deny (create) Institute with ID 'institute123' tries to create a profile for 'institute456'.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule set for job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) Any user can read job postings.
     * @allow (create) Employer 'employer123' creates a job posting with employerId set to 'employer123'.
     * @deny (create) Employer 'employer123' creates a job posting with employerId set to 'employer456'.
     * @principle Allows public read access with owner-only writes, validating ownership on creation.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Rule set for internship postings.
     * @path /internships/{internshipId}
     * @allow (get, list) Any user can read internship postings.
     * @allow (create) Employer 'employer123' creates an internship posting with employerId set to 'employer123'.
     * @deny (create) Employer 'employer123' creates an internship posting with employerId set to 'employer456'.
     * @principle Allows public read access with owner-only writes, validating ownership on creation.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Rule set for applications.
     * @path /applications/{applicationId}
     * @allow (create) Candidate 'candidate123' creates an application with candidateId set to 'candidate123'.
     * @allow (update) Employer 'employer456' updates an application for a job they posted.
     * @deny (create) Candidate 'candidate123' creates an application with candidateId set to 'candidate456'.
     * @principle Enforces that only the candidate can create an application, and only the involved employer can update it.
     */
    match /applications/{applicationId} {
      allow get: if request.auth.uid == resource.data.candidateId || request.auth.uid == resource.data.employerId;
      allow list: if request.auth.uid == resource.data.candidateId || request.auth.uid == resource.data.employerId;
      allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid;
      allow delete: if false;
    }

    /**
     * @description Rule set for skill test submissions.
     * @path /skillTestSubmissions/{submissionId}
     * @allow (create) Candidate 'candidate123' creates a submission with candidateId set to 'candidate123'.
     * @deny (create) Candidate 'candidate123' creates a submission with candidateId set to 'candidate456'.
     * @principle Enforces that only the candidate can create a skill test submission.
     */
    match /skillTestSubmissions/{submissionId} {
      allow get: if resource.data.candidateId == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rule set for skill test reports.
     * @path /skillTestReports/{reportId}
     * @allow (get) Any authenticated user can read skill test reports.
     * @deny (create, update, delete) No client-side writes allowed; reports are generated by backend.
     * @principle Restricts report creation and modification to backend services.
     */
    match /skillTestReports/{reportId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}
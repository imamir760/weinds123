/**
 * @fileoverview Firestore Security Rules for the job board application.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, combining public read access for job and internship listings with strict user-ownership for profile data and application management.
 *
 * Data Structure:
 * - User profiles (candidates, employers, institutes) are stored in separate top-level collections, each secured by user ID.
 * - Job and internship postings are stored in top-level collections, readable by everyone, but creatable/modifiable only by authorized employers.
 * - Applications are stored in a top-level collection and are secured such that only the candidate can view/modify their own applications.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted for jobs and internships to maximize visibility.
 * - Role-based access control is NOT used in this version.
 *
 * Denormalization for Authorization:
 * - Jobs and Internships: `employerId` is denormalized onto the document, enabling owner-only writes.
 * - Applications: `candidateId` is denormalized, enabling owner-only access by candidates.
 *
 * Structural Segregation:
 * - User profiles are segregated into separate collections based on roles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the function to check if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines the function to check if the requesting user is the owner of the resource.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines the function to check if the requesting user is the owner of the resource and the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for candidate profiles.
     * @path /candidates/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *   `request.auth.uid == 'user123'`
     * @deny (create) User with ID 'user456' cannot create a profile for user 'user123'.
     *   `request.auth.uid == 'user456'`
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for employer profiles.
     * @path /employers/{userId}
     * @allow (create) User with ID 'employer123' can create their profile.
     *   `request.auth.uid == 'employer123'`
     * @deny (create) User with ID 'candidate456' cannot create a profile for employer 'employer123'.
     *   `request.auth.uid == 'candidate456'`
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for institute profiles.
     * @path /institutes/{userId}
     * @allow (create) User with ID 'institute123' can create their profile.
     *   `request.auth.uid == 'institute123'`
     * @deny (create) User with ID 'candidate456' cannot create a profile for institute 'institute123'.
     *   `request.auth.uid == 'candidate456'`
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.tpoEmail == request.auth.token.email;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for job postings.
     * @path /jobs/{jobId}
     * @allow (get) Anyone can read a job posting.
     *   `true`
     * @allow (create) Employer 'employer123' can create a job with `employerId: 'employer123'`.
     *   `request.auth.uid == 'employer123'`
     * @deny (create) Employer 'employer456' cannot create a job with `employerId: 'employer123'`.
     *   `request.auth.uid == 'employer456'`
     * @principle Allows public reads, enforces owner-only writes based on the `employerId` field.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
    }

    /**
     * @description Rules for internship postings.
     * @path /internships/{internshipId}
     * @allow (get) Anyone can read an internship posting.
     *   `true`
     * @allow (create) Employer 'employer123' can create an internship with `employerId: 'employer123'`.
     *   `request.auth.uid == 'employer123'`
     * @deny (create) Employer 'employer456' cannot create an internship with `employerId: 'employer123'`.
     *   `request.auth.uid == 'employer456'`
     * @principle Allows public reads, enforces owner-only writes based on the `employerId` field.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
    }

    /**
     * @description Rules for job and internship applications.
     * @path /applications/{applicationId}
     * @allow (get) Candidate 'candidate123' can read their application with `candidateId: 'candidate123'`.
     *   `request.auth.uid == 'candidate123'`
     * @allow (create) Candidate 'candidate123' can create an application with `candidateId: 'candidate123'`.
     *   `request.auth.uid == 'candidate123'`
     * @deny (create) Candidate 'candidate456' cannot create an application with `candidateId: 'candidate123'`.
     *   `request.auth.uid == 'candidate456'`
     * @principle Enforces owner-only access based on the `candidateId` field.
     */
    match /applications/{applicationId} {
      allow get: if isSignedIn() && resource.data.candidateId == request.auth.uid;
      allow list: if isSignedIn() && resource.data.candidateId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.candidateId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.candidateId == request.auth.uid && resource != null;
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for the job board application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and their associated data (applications). Employers and TPOs can manage
 * their own profiles and create job/internship postings. Applications are
 * managed on a per-candidate basis.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profiles, accessible only by the user.
 * - /candidates/{userId}/jobApplications/{jobId}: Job applications for a candidate.
 * - /candidates/{userId}/internshipApplications/{internshipId}: Internship applications for a candidate.
 * - /employers/{userId}: Employer profiles, accessible only by the employer.
 * - /institutes/{userId}: Institute profiles (TPOs), accessible only by the TPO.
 * - /jobs/{jobId}: Job postings, publicly readable but create/update/delete restricted to the owning employer.
 * - /jobs/{jobId}/applicants/{candidateId}: Applicants for a specific job, managed by the employer.
 * - /internships/{internshipId}: Internship postings, publicly readable but create/update/delete restricted to the owning employer.
 * - /internships/{internshipId}/applicants/{candidateId}: Applicants for a specific internship, managed by the employer.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations are protected by authorization checks.
 * - Data consistency is enforced between user IDs in the path and within the document.
 *
 * Denormalization for Authorization:
 *  - Job and Internship documents have an `employerId` field to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects candidate profiles, allowing only the owner to read and write.
     * @path /candidates/{userId}
     * @allow (get, list, create, update, delete) User with uid == userId can perform all operations.
     * @deny (get, list, create, update, delete) User with uid != userId cannot perform any operations.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects job applications, allowing only the owner to read and write.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (get, list, create, update, delete) User with uid == userId can perform all operations.
     * @deny (get, list, create, update, delete) User with uid != userId cannot perform any operations.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects internship applications, allowing only the owner to read and write.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (get, list, create, update, delete) User with uid == userId can perform all operations.
     * @deny (get, list, create, update, delete) User with uid != userId cannot perform any operations.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects employer profiles, allowing only the owner to read and write.
     * @path /employers/{userId}
     * @allow (get, list, create, update, delete) User with uid == userId can perform all operations.
     * @deny (get, list, create, update, delete) User with uid != userId cannot perform any operations.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects institute profiles (TPOs), allowing only the owner to read and write.
     * @path /institutes/{userId}
     * @allow (get, list, create, update, delete) User with uid == userId can perform all operations.
     * @deny (get, list, create, update, delete) User with uid != userId cannot perform any operations.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to job postings but restricts write access to the owning employer.
     * @path /jobs/{jobId}
     * @allow (get, list) Any user can read job postings.
     * @allow (create) Employer can create jobs if employerId matches their uid.
     * @allow (update, delete) Employer can update/delete jobs if they own the job.
     * @deny (create) Non-employer cannot create jobs.
     * @deny (update, delete) Non-owner cannot update/delete jobs.
     * @principle Public read access with owner-only writes, enforces employer ownership.
     */
    match /jobs/{jobId} {
      function isOwner(employerId) {
        return request.auth != null && request.auth.uid == employerId;
      }

      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isOwner(request.resource.data.employerId);
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Protects applicants for a specific job, allowing only the job's owning employer to read and write.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (get, list, create, update, delete) Employer who owns the job can manage applicants.
     * @deny (get, list, create, update, delete) Other users cannot manage applicants.
     * @principle Enforces employer ownership of job applicant data.
     */
    match /jobs/{jobId}/applicants/{candidateId} {
      function isJobOwner(jobId) {
        return get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
      }
      allow get: if isJobOwner(jobId);
      allow list: if isJobOwner(jobId);
      allow create: if isJobOwner(jobId);
      allow update: if isJobOwner(jobId) && resource != null;
      allow delete: if isJobOwner(jobId) && resource != null;
    }

    /**
     * @description Allows public read access to internship postings but restricts write access to the owning employer.
     * @path /internships/{internshipId}
     * @allow (get, list) Any user can read internship postings.
     * @allow (create) Employer can create internships if employerId matches their uid.
     * @allow (update, delete) Employer can update/delete internships if they own the internship.
     * @deny (create) Non-employer cannot create internships.
     * @deny (update, delete) Non-owner cannot update/delete internships.
     * @principle Public read access with owner-only writes, enforces employer ownership.
     */
    match /internships/{internshipId} {
      function isOwner(employerId) {
        return request.auth != null && request.auth.uid == employerId;
      }

      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isOwner(request.resource.data.employerId);
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Protects applicants for a specific internship, allowing only the internship's owning employer to read and write.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (get, list, create, update, delete) Employer who owns the internship can manage applicants.
     * @deny (get, list, create, update, delete) Other users cannot manage applicants.
     * @principle Enforces employer ownership of internship applicant data.
     */
    match /internships/{internshipId}/applicants/{candidateId} {
      function isInternshipOwner(internshipId) {
        return get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
      }
      allow get: if isInternshipOwner(internshipId);
      allow list: if isInternshipOwner(internshipId);
      allow create: if isInternshipOwner(internshipId);
      allow update: if isInternshipOwner(internshipId) && resource != null;
      allow delete: if isInternshipOwner(internshipId) && resource != null;
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for the job board application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and allows employers to manage applicants for their job postings.
 *
 * Data Structure:
 * - /candidates/{userId}: Stores candidate profile data, accessible only by the user.
 * - /candidates/{userId}/jobApplications/{jobId}: Stores job applications, accessible only by the user.
 * - /candidates/{userId}/internshipApplications/{internshipId}: Stores internship applications, accessible only by the user.
 * - /employers/{userId}: Stores employer profile data, accessible only by the user.
 * - /institutes/{userId}: Stores institute profile data, accessible only by the user.
 * - /jobs/{jobId}: Stores job postings, publicly readable but writable only by the employer who created them.
 * - /jobs/{jobId}/applicants/{candidateId}: Stores applicants for a job, accessible to the job's employer.
 * - /internships/{internshipId}: Stores internship postings, publicly readable but writable only by the employer who created them.
 * - /internships/{internshipId}/applicants/{candidateId}: Stores applicants for an internship, accessible to the internship's employer.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Employers can only create, update, and delete their own job postings.
 * - Employers can view applicants for their job postings.
 * - Listing of users or employer profiles is disallowed.
 *
 * Denormalization for Authorization:
 * - Jobs and Internships store the employerId to easily verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user owns the existing document, based on a given field.
     */
    function isExistingOwner(ownerId) {
      return isSignedIn() && resource.data[ownerId] == request.auth.uid;
    }

    /**
     * @description Checks if the authenticated user is creating a document and owns it, based on a given field.
     */
    function isCreatingOwner(ownerId) {
      return isSignedIn() && request.resource.data[ownerId] == request.auth.uid;
    }

    /**
     * @description Enforces that the requested document exists.
     */
    function isExisting() {
      return resource != null;
    }

    /**
     * @description Stores detailed profiles for candidate users.
     * @path /candidates/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (update) User with ID 'user456' cannot update the profile for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExisting() && isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExisting() && isOwner(userId);
    }

    /**
     * @description Stores a candidate's applications to jobs.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create) User 'user123' can create a job application.
     * @allow (get) User 'user123' can read their job application.
     * @deny (create) User 'user456' cannot create a job application for 'user123'.
     * @deny (update) User 'user456' cannot update a job application for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExisting() && isOwner(userId);
      allow delete: if isExisting() && isOwner(userId);
    }

     /**
     * @description Stores a candidate's applications to internships.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (create) User 'user123' can create an internship application.
     * @allow (get) User 'user123' can read their internship application.
     * @deny (create) User 'user456' cannot create an internship application for 'user123'.
     * @deny (update) User 'user456' cannot update an internship application for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExisting() && isOwner(userId);
      allow delete: if isExisting() && isOwner(userId);
    }

    /**
     * @description Stores detailed profiles for employer users.
     * @path /employers/{userId}
     * @allow (create) User with ID 'employer123' can create their profile.
     * @allow (get) User with ID 'employer123' can read their profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'employer123'.
     * @deny (update) User with ID 'user456' cannot update the profile for 'employer123'.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExisting() && isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExisting() && isOwner(userId);
    }

    /**
     * @description Stores detailed profiles for TPO/institute users.
     * @path /institutes/{userId}
     * @allow (create) User with ID 'institute123' can create their profile.
     * @allow (get) User with ID 'institute123' can read their profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'institute123'.
     * @deny (update) User with ID 'user456' cannot update the profile for 'institute123'.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExisting() && isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExisting() && isOwner(userId);
    }

    /**
     * @description Stores all job postings.
     * @path /jobs/{jobId}
     * @allow (get) Anyone can read a job posting.
     * @allow (create) Employer 'employer123' can create a job posting.
     * @deny (create) User 'candidate456' cannot create a job posting.
     * @deny (update) User 'candidate456' cannot update a job posting owned by 'employer123'.
     * @principle Public read with owner-only writes.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isCreatingOwner('employerId');
      allow update: if isExisting() && isExistingOwner('employerId');
      allow delete: if isExisting() && isExistingOwner('employerId');
    }

     /**
     * @description Stores applicants for a specific job.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (create) Anyone can create a applicant for a job.
     * @allow (get) Employer 'employer123' can get an applicant for their job.
     * @allow (list) Employer 'employer123' can list applicants for their job.
     * @deny (create) User 'candidate456' cannot create a applicant for job owned by 'employer123'.
     * @deny (update) User 'candidate456' cannot update applicant for job owned by 'employer123'.
     */
    match /jobs/{jobId}/applicants/{candidateId} {
      allow get: if get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
      allow list: if get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores all internship postings.
     * @path /internships/{internshipId}
     * @allow (get) Anyone can read an internship posting.
     * @allow (create) Employer 'employer123' can create an internship posting.
     * @deny (create) User 'candidate456' cannot create an internship posting.
     * @deny (update) User 'candidate456' cannot update an internship posting owned by 'employer123'.
     * @principle Public read with owner-only writes.
     */
    match /internships/{internshipId} {
        allow get: if true;
        allow list: if true;
        allow create: if isCreatingOwner('employerId');
        allow update: if isExisting() && isExistingOwner('employerId');
        allow delete: if isExisting() && isExistingOwner('employerId');
    }

    /**
     * @description Stores applicants for a specific internship.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (create) Anyone can create a applicant for a internship.
     * @allow (get) Employer 'employer123' can get an applicant for their internship.
     * @allow (list) Employer 'employer123' can list applicants for their internship.
     * @deny (create) User 'candidate456' cannot create a applicant for internship owned by 'employer123'.
     * @deny (update) User 'candidate456' cannot update applicant for internship owned by 'employer123'.
     */
    match /internships/{internshipId}/applicants/{candidateId} {
      allow get: if get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
      allow list: if get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for the TalentConnect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for profile data,
 * ensuring that users can only read and write their own profile information.
 * Job and internship postings are publicly readable but can only be created,
 * updated, or deleted by the owning employer.
 *
 * Data Structure:
 * - /candidates/{userId}: Stores candidate profile data.
 * - /employers/{userId}: Stores employer profile data.
 * - /institutes/{userId}: Stores institute profile data.
 * - /jobs/{jobId}: Stores job posting data.
 *   - Each job document contains an `employerId` field indicating ownership.
 * - /internships/{internshipId}: Stores internship posting data.
 *   - Each internship document contains an `employerId` field indicating ownership.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted for job and internship postings.
 * - Strict ownership is enforced for profile data and job/internship management.
 *
 * Denormalization for Authorization:
 * - The `Job` and `Internship` entities include an `employerId` field to
 *   denormalize the ownership relationship. This avoids costly `get()` calls
 *   to an `/employers/{employerId}` document to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure candidate profiles. Only the user can read/write their own profile.
     * @path /candidates/{userId}
     * @allow (create) - Authenticated user with UID 'user123' creates a profile document at /candidates/user123. The document data includes "id": "user123".
     * @allow (get, list) - Authenticated user with UID 'user123' reads their profile document at /candidates/user123.
     * @allow (update, delete) - Authenticated user with UID 'user123' updates/deletes their profile document at /candidates/user123.
     * @deny (create) - Authenticated user with UID 'user456' attempts to create a profile document at /candidates/user123.
     * @deny (get, list) - Authenticated user with UID 'user456' attempts to read profile document /candidates/user123.
     * @deny (update, delete) - Authenticated user with UID 'user456' attempts to update/delete profile document /candidates/user123.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /candidates/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure employer profiles. Only the user can read/write their own profile.
     * @path /employers/{userId}
     * @allow (create) - Authenticated user with UID 'user123' creates a profile document at /employers/user123. The document data includes "id": "user123".
     * @allow (get, list) - Authenticated user with UID 'user123' reads their profile document at /employers/user123.
     * @allow (update, delete) - Authenticated user with UID 'user123' updates/deletes their profile document at /employers/user123.
     * @deny (create) - Authenticated user with UID 'user456' attempts to create a profile document at /employers/user123.
     * @deny (get, list) - Authenticated user with UID 'user456' attempts to read profile document /employers/user123.
     * @deny (update, delete) - Authenticated user with UID 'user456' attempts to update/delete profile document /employers/user123.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /employers/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure institute profiles. Only the user can read/write their own profile.
     * @path /institutes/{userId}
     * @allow (create) - Authenticated user with UID 'user123' creates a profile document at /institutes/user123. The document data includes "id": "user123".
     * @allow (get, list) - Authenticated user with UID 'user123' reads their profile document at /institutes/user123.
     * @allow (update, delete) - Authenticated user with UID 'user123' updates/deletes their profile document at /institutes/user123.
     * @deny (create) - Authenticated user with UID 'user456' attempts to create a profile document at /institutes/user123.
     * @deny (get, list) - Authenticated user with UID 'user456' attempts to read profile document /institutes/user123.
     * @deny (update, delete) - Authenticated user with UID 'user456' attempts to update/delete profile document /institutes/user123.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /institutes/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure job postings. Anyone can read, but only the owner can create, update, or delete.
     * @path /jobs/{jobId}
     * @allow (get, list) - Any user (or no user) can read job postings.
     * @allow (create) - Authenticated user with UID 'employer123' creates a job document at /jobs/job456 where document data has "employerId": "employer123".
     * @allow (update, delete) - Authenticated user with UID 'employer123' updates/deletes job document /jobs/job456 where resource data has "employerId": "employer123".
     * @deny (create) - Authenticated user with UID 'candidate789' attempts to create a job document at /jobs/job456.
     * @deny (update, delete) - Authenticated user with UID 'candidate789' attempts to update/delete job document /jobs/job456.
     * @principle Enforces public read with owner-only writes, validating ownership on write operations.
     */
    match /jobs/{jobId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && isOwner(resource.data.employerId);
      allow delete: if isSignedIn() && resource != null && isOwner(resource.data.employerId);
    }

    /**
     * @description Secure internship postings. Anyone can read, but only the owner can create, update, or delete.
     * @path /internships/{internshipId}
     * @allow (get, list) - Any user (or no user) can read internship postings.
     * @allow (create) - Authenticated user with UID 'employer123' creates an internship document at /internships/internship456 where document data has "employerId": "employer123".
     * @allow (update, delete) - Authenticated user with UID 'employer123' updates/deletes internship document /internships/internship456 where resource data has "employerId": "employer123".
     * @deny (create) - Authenticated user with UID 'candidate789' attempts to create an internship document at /internships/internship456.
     * @deny (update, delete) - Authenticated user with UID 'candidate789' attempts to update/delete internship document /internships/internship456.
     * @principle Enforces public read with owner-only writes, validating ownership on write operations.
     */
    match /internships/{internshipId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && isOwner(resource.data.employerId);
      allow delete: if isSignedIn() && resource != null && isOwner(resource.data.employerId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}
/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model, with specific rules for candidates, employers, and TPOs/institutes.
 *
 * Data Structure:
 * - User profiles are stored in `/candidates/{userId}`, `/employers/{userId}`, and `/institutes/{userId}`.
 * - Job and internship postings are stored in `/jobs/{jobId}` and `/internships/{internshipId}` respectively.
 * - Applications are stored in `/applications/{applicationId}`.
 * - Skill test submissions are stored in `/skillTestSubmissions/{submissionId}`.
 * - Skill test reports are stored in `/skillTestReports/{reportId}`.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to job and internship postings.
 * - Ownership is enforced for user profiles, skill test submissions, and skill test reports.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for candidate profiles.
     * @path /candidates/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for employer profiles.
     * @path /employers/{userId}
     * @allow (create) User with ID 'employer123' can create their profile.
     * @deny (create) User with ID 'employer456' cannot create a profile with ID 'employer123'.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for institute profiles.
     * @path /institutes/{userId}
     * @allow (create) User with ID 'institute123' can create their profile.
     * @deny (create) User with ID 'institute456' cannot create a profile with ID 'institute123'.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for job postings.
     * @path /jobs/{jobId}
     * @allow (get) Any user can read job postings.
     * @allow (list) Any user can list job postings.
     * @allow (create) Only the job posting employer can create it.
     * @deny (create) Others user can't create it.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Rule for internship postings.
     * @path /internships/{internshipId}
     * @allow (get) Any user can read internship postings.
     * @allow (list) Any user can list internship postings.
     * @allow (create) Only the internship posting employer can create it.
     * @deny (create) Others user can't create it.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Rule for applications.
     * @path /applications/{applicationId}
     * @principle Not allowing to list the Applications, becaus this can contain sensitives informations
     */
    match /applications/{applicationId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
      allow update: if isSignedIn() && (request.resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
      allow delete: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
    }

    /**
     * @description Rule for skill test submissions.
     * @path /skillTestSubmissions/{submissionId}
     * @allow (create) User with ID 'user123' can create their submission.
     * @deny (create) User with ID 'user456' cannot create a submission with ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /skillTestSubmissions/{submissionId} {
      allow get: if isSignedIn() && resource.data.candidateId == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.candidateId) && request.resource.data.candidateId == resource.data.candidateId;
      allow delete: if isExistingOwner(resource.data.candidateId);
    }

    /**
     * @description Rule for skill test reports.
     * @path /skillTestReports/{reportId}
     * @allow (create) User with ID 'user123' can create their report.
     * @deny (create) User with ID 'user456' cannot create a report with ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /skillTestReports/{reportId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Placeholder rule for skill test files under skill test submissions.
     * @path /skillTestSubmissions/{submissionId}/traditionalTestFiles/{fileId}
     * @principle Only authenticated users can upload traditional test files.
     */
    match /skillTestSubmissions/{submissionId}/traditionalTestFiles/{fileId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}
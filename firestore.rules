/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model,
 *              allowing users to read all job postings but restricting
 *              write access based on user roles (candidate, employer, tpo).
 *
 * Data Structure:
 * - /candidates/{userId}: Stores candidate profiles, accessible only to the owner.
 * - /employers/{userId}: Stores employer profiles, accessible only to the owner.
 * - /institutes/{userId}: Stores institute profiles, accessible only to the owner.
 * - /jobs/{jobId}: Stores job postings, publicly readable, but writable only by authorized users (TODO: Implement role-based authorization).
 * - /internships/{internshipId}: Stores internship postings, publicly readable, but writable only by authorized users (TODO: Implement role-based authorization).
 * - /applications/{applicationId}: Stores job/internship applications, accessible only to the owner and the associated employer.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted for job and internship postings to facilitate discovery.
 * - Strict ownership is enforced for user profiles.
 *
 * Denormalization for Authorization:
 * - Applications store both candidateId and employerId to facilitate access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the existing owner of the resource.
     *              This function also verifies that the document exists to prevent
     *              operations on non-existent documents.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && existsAfter(/databases/$(database)/documents/candidates/$(userId));
    }

    /**
     * @description Defines a read-only role.
     * @return {bool} Always false, as the role is not implemented yet.
     */
    function isReadOnly() {
      return false;
    }
    
    /**
     * @description Rules for candidate profiles.
     * @path /candidates/{userId}
     * @allow (create) Signed-in user can create their own profile.
     * @allow (get, list) Signed-in user can read their own profile.
     * @allow (update, delete) Signed-in user can update/delete their own profile.
     * @deny (create) Signed-in user cannot create a profile for another user.
     * @deny (get, list) Signed-in user cannot read another user's profile.
     * @deny (update, delete) Signed-in user cannot update/delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // List operation disabled
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for employer profiles.
     * @path /employers/{userId}
     * @allow (create) Signed-in user can create their own profile.
     * @allow (get, list) Signed-in user can read their own profile.
     * @allow (update, delete) Signed-in user can update/delete their own profile.
     * @deny (create) Signed-in user cannot create a profile for another user.
     * @deny (get, list) Signed-in user cannot read another user's profile.
     * @deny (update, delete) Signed-in user cannot update/delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // List operation disabled
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for institute profiles.
     * @path /institutes/{userId}
     * @allow (create) Signed-in user can create their own profile.
     * @allow (get, list) Signed-in user can read their own profile.
     * @allow (update, delete) Signed-in user can update/delete their own profile.
     * @deny (create) Signed-in user cannot create a profile for another user.
     * @deny (get, list) Signed-in user cannot read another user's profile.
     * @deny (update, delete) Signed-in user cannot update/delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // List operation disabled
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) Any user can read job postings.
     * @deny (create) Only authorized users can create job postings.  Authorization logic needs to be implemented
     * @deny (update) Only authorized users can update job postings. Authorization logic needs to be implemented
     * @deny (delete) Only authorized users can delete job postings. Authorization logic needs to be implemented
     * @principle Allows public read access but restricts write access.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add role-based authorization
      allow update: if isSignedIn(); // TODO: Add role-based authorization
      allow delete: if isSignedIn(); // TODO: Add role-based authorization
    }

    /**
     * @description Rules for internship postings.
     * @path /internships/{internshipId}
     * @allow (get, list) Any user can read internship postings.
     * @deny (create) Only authorized users can create internship postings.  Authorization logic needs to be implemented
     * @deny (update) Only authorized users can update job postings. Authorization logic needs to be implemented
     * @deny (delete) Only authorized users can delete job postings. Authorization logic needs to be implemented
     * @principle Allows public read access but restricts write access.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add role-based authorization
      allow update: if isSignedIn(); // TODO: Add role-based authorization
      allow delete: if isSignedIn(); // TODO: Add role-based authorization
    }

    /**
     * @description Rules for job/internship applications.
     * @path /applications/{applicationId}
     * @allow (create) Signed-in user can create their own application.
     * @allow (get) Signed-in user can read their own application.
     * @allow (update) Only the owner can update their application.
     * @allow (list) Only the owner can list their own applications.
     * @allow (delete) Only the owner can delete their application.
     * @deny (create) Signed-in user cannot create an application for another user.
     * @deny (get) Signed-in user cannot read another user's application.
     * @deny (update) Signed-in user cannot update another user's application.
     * @deny (list) Signed-in user cannot list another user's applications.
     * @deny (delete) Signed-in user cannot delete another user's application.
     * @principle Enforces document ownership for applications.
     */
    match /applications/{applicationId} {
        allow get: if isSignedIn() && (request.auth.uid == resource.data.candidateId || request.auth.uid == resource.data.employerId);
        allow list: if false; // List operation disabled
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.candidateId;
        allow update: if isSignedIn() && request.auth.uid == resource.data.candidateId;
        allow delete: if isSignedIn() && request.auth.uid == resource.data.candidateId;
    }
  }
}
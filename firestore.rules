/**
 * @fileoverview Firestore Security Rules for the job board application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for profiles,
 * allowing users to read and write their own profile data.
 * Job and internship postings are publicly readable but only
 * creatable/modifiable by authorized employers.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profiles, accessible only by the owning user.
 * - /employers/{userId}: Employer profiles, accessible only by the owning user.
 * - /institutes/{userId}: Institute profiles, accessible only by the owning user.
 * - /jobs/{jobId}: Job postings, publicly readable, created and managed by employers.
 * - /internships/{internshipId}: Internship postings, publicly readable, created and managed by employers.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles.
 * - Job and internship listings are publicly readable.
 * - Only authenticated employers can create, update, or delete job and internship listings, and they must own the listing.
 * - Listing of user profiles (candidates, employers, institutes) is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - Job and Internship documents have an `employerId` field to denote ownership,
 *   allowing rules to quickly verify ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows candidates to manage their own profiles.
     * @path /candidates/{userId}
     * @allow (create, update, delete) User with UID 'user123' can create/update/delete their profile at /candidates/user123.
     * @deny (create, update, delete) User with UID 'user456' cannot modify profile /candidates/user123.
     * @principle Enforces document ownership for writes; only the owner can modify the document.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows employers to manage their own profiles.
     * @path /employers/{userId}
     * @allow (create, update, delete) User with UID 'employer789' can create/update/delete their profile at /employers/employer789.
     * @deny (create, update, delete) User with UID 'user456' cannot modify profile /employers/employer789.
     * @principle Enforces document ownership for writes; only the owner can modify the document.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows institutes to manage their own profiles.
     * @path /institutes/{userId}
     * @allow (create, update, delete) User with UID 'instituteabc' can create/update/delete their profile at /institutes/instituteabc.
     * @deny (create, update, delete) User with UID 'user456' cannot modify profile /institutes/instituteabc.
     * @principle Enforces document ownership for writes; only the owner can modify the document.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to job postings, but restricts creation, updates, and deletes to the owning employer.
     * @path /jobs/{jobId}
     * @allow (get, list) Any user can read job postings.
     * @allow (create) Employer with UID 'employer789' can create a job posting with employerId 'employer789'.
     * @allow (update, delete) Employer with UID 'employer789' can update/delete job posting with employerId 'employer789'.
     * @deny (create) User without employer role cannot create job posting.
     * @deny (update, delete) User with UID 'user456' cannot modify job posting with employerId 'employer789'.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /jobs/{jobId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
    }

        /**
         * @description Allows public read access to internship postings, but restricts creation, updates, and deletes to the owning employer.
         * @path /internships/{internshipId}
         * @allow (get, list) Any user can read internship postings.
         * @allow (create) Employer with UID 'employer789' can create an internship posting with employerId 'employer789'.
         * @allow (update, delete) Employer with UID 'employer789' can update/delete internship posting with employerId 'employer789'.
         * @deny (create) User without employer role cannot create internship posting.
         * @deny (update, delete) User with UID 'user456' cannot modify internship posting with employerId 'employer789'.
         * @principle Allows public read access while enforcing ownership for writes.
         */
    match /internships/{internshipId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}
/**
 * @file Firebase Security Rules for the application.
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model for profiles and applications,
 *  allowing users to manage their own data. Public read access is granted for job and internship listings,
 *  but write access is restricted to authorized users.
 *
 * @dataStructure The database is structured with separate collections for candidates, employers,
 *  and institutes, each containing profile information. Job and internship postings are stored in
 *  separate top-level collections. User-specific data (job/internship applications) is nested under
 *  the respective user's document.
 *
 * @keySecurityDecisions
 *  - Users can only create, update, or delete their own profiles.
 *  - Job and internship listings are publicly readable, but only employers can create, update, or delete them.
 *  - Listing all users is disallowed.
 *
 * @denormalizationForAuthorization Not applicable in this version.
 * @structuralSegregation Private user data is stored in user-specific subcollections, separate from
 *  publicly readable job and internship listings.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows candidates to manage their own profiles.
     * @path /candidates/{userId}
     * @allow (create) User abc creates their own profile.
     *    - auth.uid: 'abc'
     *    - request.resource.data.id: 'abc'
     * @allow (update) User abc updates their own profile.
     *    - auth.uid: 'abc'
     * @allow (delete) User abc deletes their own profile.
     *    - auth.uid: 'abc'
     * @deny (create) User abc attempts to create a profile for user def.
     *    - auth.uid: 'abc'
     *    - request.resource.data.id: 'def'
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Allows candidates to manage their own job applications.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create) User abc creates a job application.
     *    - auth.uid: 'abc'
     * @allow (update) User abc updates their own job application.
     *    - auth.uid: 'abc'
     * @allow (delete) User abc deletes their own job application.
     *    - auth.uid: 'abc'
     * @deny (create) User abc attempts to create a job application for user def.
     *    - auth.uid: 'abc'
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows candidates to manage their own internship applications.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (create) User abc creates an internship application.
     *    - auth.uid: 'abc'
     * @allow (update) User abc updates their own internship application.
     *    - auth.uid: 'abc'
     * @allow (delete) User abc deletes their own internship application.
     *    - auth.uid: 'abc'
     * @deny (create) User abc attempts to create an internship application for user def.
     *    - auth.uid: 'abc'
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
       function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows employers to manage their own profiles.
     * @path /employers/{userId}
     * @allow (create) User abc creates their own employer profile.
     *    - auth.uid: 'abc'
     *    - request.resource.data.id: 'abc'
     * @allow (update) User abc updates their own employer profile.
     *    - auth.uid: 'abc'
     * @allow (delete) User abc deletes their own employer profile.
     *    - auth.uid: 'abc'
     * @deny (create) User abc attempts to create a profile for user def.
     *    - auth.uid: 'abc'
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows institutes to manage their own profiles.
     * @path /institutes/{userId}
     * @allow (create) User abc creates their own institute profile.
     *    - auth.uid: 'abc'
     *    - request.resource.data.id: 'abc'
     * @allow (update) User abc updates their own institute profile.
     *    - auth.uid: 'abc'
     * @allow (delete) User abc deletes their own institute profile.
     *    - auth.uid: 'abc'
     * @deny (create) User abc attempts to create a profile for user def.
     *    - auth.uid: 'abc'
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read job postings, but only employers can manage them.
     * @path /jobs/{jobId}
     * @allow (get) Anyone can read a job posting.
     * @allow (list) Anyone can list job postings.
     * @allow (create) Employer abc creates a job posting.
     *    - auth.uid: 'abc'
     *    - request.resource.data.employerId: 'abc'
     * @allow (update) Employer abc updates their own job posting.
     *    - auth.uid: 'abc'
     *    - resource.data.employerId: 'abc'
     * @allow (delete) Employer abc deletes their own job posting.
     *    - auth.uid: 'abc'
     *    - resource.data.employerId: 'abc'
     * @deny (create) Candidate abc attempts to create a job posting.
     *    - auth.uid: 'abc'
     * @deny (update) Candidate abc attempts to update a job posting.
     *    - auth.uid: 'abc'
     * @principle Public read access with owner-only writes.
     */
    match /jobs/{jobId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(employerId) {
            return isSignedIn() && request.auth.uid == employerId;
        }

        function isExistingOwner(employerId) {
            return isOwner(employerId) && resource != null;
        }

        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
        allow update: if isExistingOwner(resource.data.employerId);
        allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Allows employers to manage applicants for a specific job.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (create) Employer creates an applicant for a job.
     *    - auth.uid: 'employer_abc'
     * @allow (update) Employer updates an applicant for a job.
     *    - auth.uid: 'employer_abc'
     * @allow (delete) Employer deletes an applicant for a job.
     *    - auth.uid: 'employer_abc'
     * @deny (create) Candidate abc attempts to create an applicant for a job.
     *    - auth.uid: 'abc'
     * @principle Enforces document ownership for writes.
     */
    match /jobs/{jobId}/applicants/{candidateId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isJobOwner(jobId) {
            return get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
        }

        function isExistingJobOwner(jobId) {
           return isJobOwner(jobId) && resource != null;
        }

        allow get: if isSignedIn() && isJobOwner(jobId);
        allow list: if isSignedIn() && isJobOwner(jobId);
        allow create: if isSignedIn() && isJobOwner(jobId);
        allow update: if isExistingJobOwner(jobId);
        allow delete: if isExistingJobOwner(jobId);
    }

    /**
     * @description Allows anyone to read internship postings, but only employers can manage them.
     * @path /internships/{internshipId}
     * @allow (get) Anyone can read an internship posting.
     * @allow (list) Anyone can list internship postings.
     * @allow (create) Employer abc creates an internship posting.
     *    - auth.uid: 'abc'
     *    - request.resource.data.employerId: 'abc'
     * @allow (update) Employer abc updates their own internship posting.
     *    - auth.uid: 'abc'
     *    - resource.data.employerId: 'abc'
     * @allow (delete) Employer abc deletes their own internship posting.
     *    - auth.uid: 'abc'
     *    - resource.data.employerId: 'abc'
     * @deny (create) Candidate abc attempts to create an internship posting.
     *    - auth.uid: 'abc'
     * @deny (update) Candidate abc attempts to update an internship posting.
     *    - auth.uid: 'abc'
     * @principle Public read access with owner-only writes.
     */
    match /internships/{internshipId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(employerId) {
            return isSignedIn() && request.auth.uid == employerId;
        }

        function isExistingOwner(employerId) {
            return isOwner(employerId) && resource != null;
        }

        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
        allow update: if isExistingOwner(resource.data.employerId);
        allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Allows employers to manage applicants for a specific internship.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (create) Employer creates an applicant for an internship.
     *    - auth.uid: 'employer_abc'
     * @allow (update) Employer updates an applicant for an internship.
     *    - auth.uid: 'employer_abc'
     * @allow (delete) Employer deletes an applicant for an internship.
     *    - auth.uid: 'employer_abc'
     * @deny (create) Candidate abc attempts to create an applicant for an internship.
     *    - auth.uid: 'abc'
     * @principle Enforces document ownership for writes.
     */
    match /internships/{internshipId}/applicants/{candidateId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isInternshipOwner(internshipId) {
            return get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
        }

        function isExistingInternshipOwner(internshipId) {
           return isInternshipOwner(internshipId) && resource != null;
        }

        allow get: if isSignedIn() && isInternshipOwner(internshipId);
        allow list: if isSignedIn() && isInternshipOwner(internshipId);
        allow create: if isSignedIn() && isInternshipOwner(internshipId);
        allow update: if isExistingInternshipOwner(internshipId);
        allow delete: if isExistingInternshipOwner(internshipId);
    }
  }
}
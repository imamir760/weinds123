/**
 * @fileoverview Firestore Security Rules for the job board application.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, balancing public readability with strict ownership-based write controls. User profiles are protected by owner-only access, while job and internship postings are publicly readable but only modifiable by their respective owners.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Each user document is secured to ensure that only the authenticated user can read and write their own profile data.
 * - /jobs/{jobId}: Stores job postings. These are publicly readable but can only be created, updated, or deleted by the owning employer.
 * - /internships/{internshipId}: Stores internship postings, similar to jobs in terms of read/write access.
 *
 * Key Security Decisions:
 * - Public Read Access for Job/Internship Postings: Job and internship listings are designed to be publicly discoverable. Therefore, read access is granted to all users, including unauthenticated ones.
 * - Owner-Only Write Access: Create, update, and delete operations for user profiles, job postings, and internship postings are strictly controlled by requiring the authenticated user to be the owner of the respective document.
 * - No User Listing: Listing all users is not permitted to protect user privacy.
 *
 * Denormalization for Authorization:
 * - The 'employerId' field within both the 'Job' and 'Internship' entities is used to enforce ownership. This approach avoids the need for complex queries and ensures efficient security checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles by enforcing owner-only access.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - Authenticated user with matching {userId}.
     * @deny (get, create, update, delete) - Any other user or unauthenticated request.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requested user id matches the authenticated user id
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check if the user is the owner and the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      
      allow get: if isOwner(userId);
      allow list: if false; // Disable listing all users for privacy.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages job postings, allowing public reads but restricting writes to the owner.
     * @path /jobs/{jobId}
     * @allow (get, list) - Any user, authenticated or not.
     * @allow (create) - Authenticated user whose UID matches the 'employerId' in the request.
     * @allow (update, delete) - Authenticated user whose UID matches the 'employerId' in the existing document.
     * @deny (create, update, delete) - If the 'employerId' does not match the authenticated user's UID.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /jobs/{jobId} {
      // Check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user is the owner
      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }

       // Check if the user is the owner and the document exists
      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Controls internship postings, allowing public reads but restricting writes to the owner.
     * @path /internships/{internshipId}
     * @allow (get, list) - Any user, authenticated or not.
     * @allow (create) - Authenticated user whose UID matches the 'employerId' in the request.
     * @allow (update, delete) - Authenticated user whose UID matches the 'employerId' in the existing document.
     * @deny (create, update, delete) - If the 'employerId' does not match the authenticated user's UID.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /internships/{internshipId} {
      // Check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user is the owner
      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }

      // Check if the user is the owner and the document exists
      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * (candidates, employers, institutes) and owner-only access for applications.
 * Public read access is granted to job and internship postings, but write
 * access is restricted to authenticated users.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profile information, accessible only to the candidate.
 * - /employers/{userId}: Employer profile information, accessible only to the employer.
 * - /institutes/{userId}: Institute profile information, accessible only to the institute.
 * - /jobs/{jobId}: Job postings, publicly readable but writable only with
 *   a valid `employerId` matching the authenticated user.
 * - /internships/{internshipId}: Internship postings, publicly readable but
 *   writable only with a valid `employerId` matching the authenticated user.
 * - /applications/{applicationId}: Job/internship applications, accessible only to the owner.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Public read access is allowed for jobs and internships to maximize visibility.
 * - Strict ownership is enforced for all user-related data and applications.
 *
 * Denormalization for Authorization:
 * The rules rely on the `employerId` field in `jobs` and `internships` to
 * determine ownership for write operations. This avoids the need for complex
 * queries or additional reads to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure candidate profiles. Only the user can read/write their own profile.
     * @path /candidates/{userId}
     * @allow (create, update, delete, get, list) if the user's UID matches the userId.
     * @deny (create, update, delete) if the user's UID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure employer profiles. Only the user can read/write their own profile.
     * @path /employers/{userId}
     * @allow (create, update, delete, get, list) if the user's UID matches the userId.
     * @deny (create, update, delete) if the user's UID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure institute profiles. Only the user can read/write their own profile.
     * @path /institutes/{userId}
     * @allow (create, update, delete, get, list) if the user's UID matches the userId.
     * @deny (create, update, delete) if the user's UID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to job postings, but restricts write access to owners.
     * @path /jobs/{jobId}
     * @allow (get, list) to anyone.
     * @allow (create) if the user is authenticated and the employerId matches the user's UID.
     * @allow (update, delete) if the user is authenticated, the document exists, and the employerId matches the user's UID.
     * @deny (create, update, delete) if the user is not the owner or the document doesn't exist.
     * @principle Allows public reads with owner-only writes, and validates the ownership field on creation.
     */
    match /jobs/{jobId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }
      function isExistingOwner(employerId) {
          return isOwner(employerId) && resource != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Allows public read access to internship postings, but restricts write access to owners.
     * @path /internships/{internshipId}
     * @allow (get, list) to anyone.
     * @allow (create) if the user is authenticated and the employerId matches the user's UID.
     * @allow (update, delete) if the user is authenticated, the document exists, and the employerId matches the user's UID.
     * @deny (create, update, delete) if the user is not the owner or the document doesn't exist.
     * @principle Allows public reads with owner-only writes, and validates the ownership field on creation.
     */
    match /internships/{internshipId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }
      function isExistingOwner(employerId) {
          return isOwner(employerId) && resource != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Secure applications. Only the candidate can read/write their own applications.
     * @path /applications/{applicationId}
     * @allow (create, update, delete, get, list) if the user's UID matches the candidateId.
     * @deny (create, update, delete) if the user's UID does not match the candidateId.
     * @principle Enforces document ownership for all operations.
     */
    match /applications/{applicationId} {
      function isOwner(candidateId) {
        return request.auth != null && request.auth.uid == candidateId;
      }
      function isExistingOwner(candidateId) {
        return isOwner(candidateId) && resource != null;
      }
      allow get: if isOwner(resource.data.candidateId);
      allow list: if isOwner(request.auth.uid);
      allow create: if isOwner(request.resource.data.candidateId);
      allow update: if isExistingOwner(resource.data.candidateId);
      allow delete: if isExistingOwner(resource.data.candidateId);
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control.
 * Data validation is relaxed to facilitate rapid prototyping and schema iteration.
 *
 * Data Structure:
 * - Users: /candidates/{userId}, /employers/{userId}, /institutes/{userId}
 * - Job Postings: /jobs/{jobId}, accessible to all for reading, but create/update/delete restricted to the owner (employerId).
 * - Internship Postings: /internships/{internshipId}, accessible to all for reading, but create/update/delete restricted to the owner (employerId).
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Public read access is granted to job and internship postings, but writes are restricted. The `employerId` field on these documents is used for ownership checks.
 *
 * Denormalization for Authorization:
 * - Jobs and Internships: Documents include an `employerId` field to easily verify ownership during write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against the document's owner ID.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for candidate profiles.
     * @path /candidates/{userId}
     * @allow (create) User with UID 'user123' can create a profile at /candidates/user123.
     * @deny (create) User with UID 'user123' cannot create a profile at /candidates/user456.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for employer profiles.
     * @path /employers/{userId}
     * @allow (create) User with UID 'employer456' can create a profile at /employers/employer456.
     * @deny (create) User with UID 'employer456' cannot create a profile at /employers/employer789.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for institute profiles.
     * @path /institutes/{userId}
     * @allow (create) User with UID 'institute789' can create a profile at /institutes/institute789.
     * @deny (create) User with UID 'institute789' cannot create a profile at /institutes/institute101.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to job postings, but restricts write access to the owner.
     * @path /jobs/{jobId}
     * @allow (get) Any user can read a job posting.
     * @allow (list) Any user can list job postings.
     * @allow (create) User with UID 'employer456' can create a job posting with employerId: 'employer456'.
     * @deny (create) User with UID 'candidate123' cannot create a job posting with employerId: 'employer456'.
     * @principle Public read, owner-only writes.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

      /**
       * @description Allows public read access to internship postings, but restricts write access to the owner.
       * @path /internships/{internshipId}
       * @allow (get) Any user can read an internship posting.
       * @allow (list) Any user can list internship postings.
       * @allow (create) User with UID 'employer456' can create an internship posting with employerId: 'employer456'.
       * @deny (create) User with UID 'candidate123' cannot create an internship posting with employerId: 'employer456'.
       * @principle Public read, owner-only writes.
       */
    match /internships/{internshipId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
        allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
        allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }
  }
}
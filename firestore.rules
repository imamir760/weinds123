/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for profiles and applications,
 * while allowing public read access to job and internship postings. Only authenticated
 * users can create, update, or delete data, and they can only manage data they own.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profiles, owned by the user.
 * - /candidates/{userId}/jobApplications/{jobId}: Job applications submitted by the candidate.
 * - /candidates/{userId}/internshipApplications/{internshipId}: Internship applications submitted by the candidate.
 * - /employers/{userId}: Employer profiles, owned by the user.
 * - /institutes/{userId}: Institute profiles, owned by the user.
 * - /jobs/{jobId}: Job postings, publicly readable but owner-writeable. The `employerId` field determines ownership.
 * - /jobs/{jobId}/applicants/{candidateId}: Applicants for a specific job, owned by the job posting's employer.
 * - /internships/{internshipId}: Internship postings, publicly readable but owner-writeable. The `employerId` field determines ownership.
 * - /internships/{internshipId}/applicants/{candidateId}: Applicants for a specific internship, owned by the internship posting's employer.
 *
 * Key Security Decisions:
 * - Public listing of users is disallowed (no `list` on `/users`).
 * - All write operations require authentication.
 * - Data validation is relaxed in this prototyping phase, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - Job and internship postings contain an `employerId` field, denormalizing the ownership information to avoid `get()` calls to the `/employers` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to candidate profiles.
     * @path /candidates/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) Authenticated user can get, list, update and delete their own profile if the userId matches their auth.uid.
     * @deny (create) Authenticated user cannot create a profile for another user.
     * @deny (get, list, update, delete) Authenticated user cannot get, list, update and delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to job applications submitted by a candidate.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create) Authenticated user can create a job application under their own profile.
     * @allow (get, list, update, delete) Authenticated user can get, list, update, and delete their own job applications.
     * @deny (create) Authenticated user cannot create a job application under another user's profile.
     * @deny (get, list, update, delete) Authenticated user cannot get, list, update, and delete job applications under another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to internship applications submitted by a candidate.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (create) Authenticated user can create an internship application under their own profile.
     * @allow (get, list, update, delete) Authenticated user can get, list, update, and delete their own internship applications.
     * @deny (create) Authenticated user cannot create an internship application under another user's profile.
     * @deny (get, list, update, delete) Authenticated user cannot get, list, update, and delete internship applications under another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to employer profiles.
     * @path /employers/{userId}
     * @allow (create) Authenticated user can create their own employer profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) Authenticated user can get, list, update and delete their own employer profile if the userId matches their auth.uid.
     * @deny (create) Authenticated user cannot create a profile for another user.
     * @deny (get, list, update, delete) Authenticated user cannot get, list, update and delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to institute profiles.
     * @path /institutes/{userId}
     * @allow (create) Authenticated user can create their own institute profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) Authenticated user can get, list, update and delete their own institute profile if the userId matches their auth.uid.
     * @deny (create) Authenticated user cannot create a profile for another user.
     * @deny (get, list, update, delete) Authenticated user cannot get, list, update and delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) Any user can read job postings.
     * @allow (create) Authenticated user can create a job posting if the employerId matches their auth.uid.
     * @allow (update, delete) Authenticated user can update or delete a job posting if the employerId matches their auth.uid and the document exists.
     * @deny (create) Authenticated user cannot create a job posting for another employer.
     * @deny (update, delete) Authenticated user cannot update or delete a job posting that they do not own.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /jobs/{jobId} {
      function isOwner(employerId) {
        return request.auth.uid == employerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.employerId);
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Controls access to applicants for a specific job.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (create) Authenticated user can create an applicant for a job if the employerId of the job matches their auth.uid.
     * @allow (get, list, update, delete) Authenticated user can get, list, update, and delete applicants for a job if the employerId of the job matches their auth.uid and the document exists.
     * @deny (create) Authenticated user cannot create an applicant for a job that they do not own.
     * @deny (get, list, update, delete) Authenticated user cannot get, list, update, and delete applicants for a job that they do not own.
     * @principle Enforces ownership based on the job's employerId.
     */
    match /jobs/{jobId}/applicants/{candidateId} {
      function isJobOwner(jobId) {
        return get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
      }
      function isSignedIn() {
        return request.auth != null;
      }
        function isExistingJobOwner(jobId) {
        return isJobOwner(jobId) && resource != null;
      }
      allow get, list: if isSignedIn() && isJobOwner(jobId);
      allow create: if isSignedIn() && isJobOwner(jobId);
      allow update: if isSignedIn() && isExistingJobOwner(jobId);
      allow delete: if isSignedIn() && isExistingJobOwner(jobId);
    }

    /**
     * @description Controls access to internship postings.
     * @path /internships/{internshipId}
     * @allow (get, list) Any user can read internship postings.
     * @allow (create) Authenticated user can create an internship posting if the employerId matches their auth.uid.
     * @allow (update, delete) Authenticated user can update or delete an internship posting if the employerId matches their auth.uid and the document exists.
     * @deny (create) Authenticated user cannot create an internship posting for another employer.
     * @deny (update, delete) Authenticated user cannot update or delete an internship posting that they do not own.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /internships/{internshipId} {
      function isOwner(employerId) {
        return request.auth.uid == employerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
        function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.employerId);
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Controls access to applicants for a specific internship.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (create) Authenticated user can create an applicant for an internship if the employerId of the internship matches their auth.uid.
     * @allow (get, list, update, delete) Authenticated user can get, list, update, and delete applicants for an internship if the employerId of the internship matches their auth.uid and the document exists.
     * @deny (create) Authenticated user cannot create an applicant for an internship that they do not own.
     * @deny (get, list, update, delete) Authenticated user cannot get, list, update, and delete applicants for an internship that they do not own.
     * @principle Enforces ownership based on the internship's employerId.
     */
    match /internships/{internshipId}/applicants/{candidateId} {
        function isInternshipOwner(internshipId) {
            return get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
        }
      function isSignedIn() {
        return request.auth != null;
      }
          function isExistingInternshipOwner(internshipId) {
        return isInternshipOwner(internshipId) && resource != null;
      }

        allow get, list: if isSignedIn() && isInternshipOwner(internshipId);
        allow create: if isSignedIn() && isInternshipOwner(internshipId);
        allow update: if isSignedIn() && isExistingInternshipOwner(internshipId);
        allow delete: if isSignedIn() && isExistingInternshipOwner(internshipId);
    }
  }
}
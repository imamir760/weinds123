/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for profiles and applications,
 * and public read access for job and internship postings, with owner-only writes.
 *
 * Data Structure:
 * - Users are divided into three roles: candidates, employers, and TPOs (institutes).
 * - Each role has a corresponding top-level collection for their profiles
 *   (e.g., `/candidates/{userId}`).
 * - Applications submitted by candidates are stored as subcollections under their
 *   respective profile documents (`/candidates/{userId}/jobApplications/{jobId}`).
 * - Job and internship postings are stored in top-level collections
 *   (`/jobs/{jobId}` and `/internships/{internshipId}`), accessible for public reading
 *   but writable only by their owners (the employers who created them).
 * - Applicant details for each job or internship are stored as subcollections
 *   (`/jobs/{jobId}/applicants/{candidateId}` and `/internships/{internshipId}/applicants/{candidateId}`).
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted for job and internship postings.
 * - Default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 *  - Job and Internship documents must contain an `employerId` field to track ownership, allowing
 *    for simple `isOwner(resource.data.employerId)` checks.
 *
 * Structural Segregation:
 * - Private user profile data is stored in separate, role-specific collections, ensuring clear
 *   separation of concerns and preventing accidental public exposure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines if a user is signed in.
     * @return {boolean}
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines if the current user is the owner of the resource.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean}
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines if the current user is the owner of the resource, and the resource exists.
     *              This is used for update and delete operations.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean}
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for candidate profiles.
     * @path /candidates/{userId}
     * @allow (create) - A candidate can create their own profile if the userId matches their auth.uid.
     * @allow (get, list) - A candidate can read their own profile.
     * @allow (update, delete) - A candidate can update or delete their own profile.
     * @deny (create) - A candidate cannot create a profile for another user.
     * @deny (get, list) - A candidate cannot read another user's profile.
     * @deny (update, delete) - A candidate cannot update or delete another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /candidates/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Security rules for job applications submitted by candidates.
      * @path /candidates/{userId}/jobApplications/{jobId}
      * @allow (create) - A candidate can create an application under their own profile.
      * @allow (get, list) - A candidate can read their own job applications.
      * @allow (update, delete) - A candidate can update or delete their own job applications.
      * @deny (create) - A candidate cannot create an application under another user's profile.
      * @deny (get, list) - A candidate cannot read another user's job applications.
      * @deny (update, delete) - A candidate cannot update or delete another user's job applications.
      * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
      */
    match /candidates/{userId}/jobApplications/{jobId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for internship applications submitted by candidates.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (create) - A candidate can create an application under their own profile.
     * @allow (get, list) - A candidate can read their own internship applications.
     * @allow (update, delete) - A candidate can update or delete their own internship applications.
     * @deny (create) - A candidate cannot create an application under another user's profile.
     * @deny (get, list) - A candidate cannot read another user's internship applications.
     * @deny (update, delete) - A candidate cannot update or delete another user's internship applications.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for employer profiles.
     * @path /employers/{userId}
     * @allow (create) - An employer can create their own profile if the userId matches their auth.uid.
     * @allow (get, list) - An employer can read their own profile.
     * @allow (update, delete) - An employer can update or delete their own profile.
     * @deny (create) - An employer cannot create a profile for another user.
     * @deny (get, list) - An employer cannot read another user's profile.
     * @deny (update, delete) - An employer cannot update or delete another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /employers/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for institute profiles.
     * @path /institutes/{userId}
     * @allow (create) - An institute can create their own profile if the userId matches their auth.uid.
     * @allow (get, list) - An institute can read their own profile.
     * @allow (update, delete) - An institute can update or delete their own profile.
     * @deny (create) - An institute cannot create a profile for another user.
     * @deny (get, list) - An institute cannot read another user's profile.
     * @deny (update, delete) - An institute cannot update or delete another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /institutes/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) - Anyone can read job postings.
     * @allow (create) - Only the owner (employer) can create a job posting, and the employerId must match their auth.uid.
     * @allow (update, delete) - Only the owner can update or delete a job posting.
     * @deny (create) - A user cannot create a job posting for another employer.
     * @deny (update, delete) - A user cannot update or delete a job posting they don't own.
     * @principle Enforces document ownership for writes, and allows public read access.
     */
    match /jobs/{jobId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
    }

     /**
      * @description Security rules for applicants to a specific job.
      * @path /jobs/{jobId}/applicants/{candidateId}
      * @allow (create) - Only the job poster can add the applicant.
      * @allow (get, list) - Only the job poster can view the applicants.
      * @allow (update, delete) - Only the job poster can update or delete applicants.
      * @deny (create) - Only the job poster can add applicants.
      * @deny (get, list) - Only the job poster can view the applicants.
      * @deny (update, delete) - Only the job poster can update or delete applicants.
      * @principle Enforces document ownership for writes and restricts access to the job poster's own data tree.
      */
     match /jobs/{jobId}/applicants/{candidateId} {
        allow get, list, create, update, delete: if isSignedIn() && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
     }

    /**
     * @description Security rules for internship postings.
     * @path /internships/{internshipId}
     * @allow (get, list) - Anyone can read internship postings.
     * @allow (create) - Only the owner (employer) can create an internship posting, and the employerId must match their auth.uid.
     * @allow (update, delete) - Only the owner can update or delete an internship posting.
     * @deny (create) - A user cannot create an internship posting for another employer.
     * @deny (update, delete) - A user cannot update or delete an internship posting they don't own.
     * @principle Enforces document ownership for writes, and allows public read access.
     */
    match /internships/{internshipId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
    }

    /**
     * @description Security rules for applicants to a specific internship.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (create) - Only the internship poster can add the applicant.
     * @allow (get, list) - Only the internship poster can view the applicants.
     * @allow (update, delete) - Only the internship poster can update or delete applicants.
     * @deny (create) - Only the internship poster can add applicants.
     * @deny (get, list) - Only the internship poster can view the applicants.
     * @deny (update, delete) - Only the internship poster can update or delete applicants.
     * @principle Enforces document ownership for writes and restricts access to the internship poster's own data tree.
     */
    match /internships/{internshipId}/applicants/{candidateId} {
       allow get, list, create, update, delete: if isSignedIn() && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
    }
  }
}
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isUserInRole(role) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Rules for collections
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    match /candidates/{userId} {
      allow read: if request.auth != null; // Employers, TPOs, and owner can read
      allow write: if isOwner(userId);
    }
    
    match /employers/{userId} {
      allow read: if request.auth != null; // Any authenticated user can view employer profiles
      allow write: if isOwner(userId);
    }

    match /institutes/{userId} {
      allow read: if request.auth != null;
      allow write: if isOwner(userId);
    }

    match /jobs/{jobId} {
      allow read: if request.auth != null;
      allow create: if isUserInRole('employer') && request.resource.data.employerId == request.auth.uid;
      allow update: if isUserInRole('employer') && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
    }

    match /internships/{internshipId} {
        allow read: if request.auth != null;
        allow create: if isUserInRole('employer') && request.resource.data.employerId == request.auth.uid;
        allow update: if isUserInRole('employer') && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
    }

    match /applications/{applicationId} {
      allow read: if (isUserInRole('employer') && get(/databases/$(database)/documents/applications/$(applicationId)).data.employerId == request.auth.uid) || 
                   (isUserInRole('candidate') && get(/databases/$(database)/documents/applications/$(applicationId)).data.candidateId == request.auth.uid);
      allow create: if isUserInRole('candidate') && request.resource.data.candidateId == request.auth.uid;
      allow update: if isUserInRole('employer') && get(/databases/$(database)/documents/applications/$(applicationId)).data.employerId == request.auth.uid;
    }
    
    match /traditional_tests/{testId} {
        allow read: if request.auth != null; // Candidates and employers can read
        allow create: if isUserInRole('employer') && request.resource.data.employerId == request.auth.uid;
    }

    match /skillTestSubmissions/{submissionId} {
        allow read: if (isUserInRole('employer') && get(/databases/$(database)/documents/skillTestSubmissions/$(submissionId)).data.employerId == request.auth.uid) ||
                     (isUserInRole('candidate') && get(/databases/$(database)/documents/skillTestSubmissions/$(submissionId)).data.candidateId == request.auth.uid);
        allow create: if isUserInRole('candidate') && request.resource.data.candidateId == request.auth.uid;
        allow update: if isUserInRole('candidate') && request.resource.data.candidateId == request.auth.uid;
    }

    match /skillTestReports/{reportId} {
        allow read: if (isUserInRole('employer') && get(/databases/$(database)/documents/skillTestReports/$(reportId)).data.employerId == request.auth.uid) ||
                     (isUserInRole('candidate') && get(/databases/$(database)/documents/skillTestReports/$(reportId)).data.candidateId == request.auth.uid);
        allow create: if isUserInRole('employer') && request.resource.data.employerId == request.auth.uid;
    }
  }
}

/**
 * @fileoverview Firestore Security Rules for the platform.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles
 * and allows public read access to job and internship postings, with
 * restricted write access to the owners (employers).
 *
 * Data Structure:
 * - /users/{userId}: Stores public profile information for each user.
 * - /jobs/{jobId}: Stores job postings, accessible to everyone for reading.
 * - /internships/{internshipId}: Stores internship postings, accessible to everyone for reading.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible/modifiable by the respective user.
 * - Job and internship listings are publicly readable.
 * - Employers can only create, update, or delete their own job and internship postings.
 *
 * Denormalization for Authorization:
 * - Job and Internship documents contain an `employerId` field to simplify ownership checks
 *   and avoid complex queries during write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete): User with UID 'user123' can access /users/user123.
     * @deny (get, create, update, delete): User with UID 'user456' cannot access /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Only signed-in users can attempt any operations
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // No listing of users

      // Self-creation: Allow a user to create their own profile if it doesn't exist
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;

      // The resource exists to update it.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;

      // The resource exists to delete it.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Job postings are publicly readable, but only the owning employer can modify them.
     * @path /jobs/{jobId}
     * @allow (get, list): Any user can read job postings.
     * @allow (create): An employer can create a job posting with their employerId.
     * @allow (update, delete): Only the employer who created the job can modify it.
     * @deny (create): A user cannot create a job posting with someone else's employerId.
     * @principle Public read access with owner-only writes.
     */
    match /jobs/{jobId} {
      allow get, list: if true; // Public read

      // Validate that the employerId matches the user's UID on creation
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;

      // Owner can update if resource exists
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);

      // Owner can delete if resource exists
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Internship postings are publicly readable, but only the owning employer can modify them.
     * @path /internships/{internshipId}
     * @allow (get, list): Any user can read internship postings.
     * @allow (create): An employer can create an internship posting with their employerId.
     * @allow (update, delete): Only the employer who created the internship can modify it.
     * @deny (create): A user cannot create an internship posting with someone else's employerId.
     * @principle Public read access with owner-only writes.
     */
    match /internships/{internshipId} {
      allow get, list: if true; // Public read

      // Validate that the employerId matches the user's UID on creation
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;

      // Owner can update if resource exists
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);

      // Owner can delete if resource exists
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  // Is the user the owner of the document?
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Is the user the owner of the document and the document exists?
  function isExistingOwner(ownerId) {
    return isSignedIn() && request.auth.uid == ownerId && resource != null;
  }
}
/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for profile data,
 * and an employer-ownership model for jobs, internships, and applications.
 * It prioritizes secure authorization over complex data validation to enable rapid prototyping.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profiles, owned by the user.
 * - /employers/{userId}: Employer profiles, owned by the user.
 * - /institutes/{userId}: Institute profiles, owned by the user.
 * - /jobs/{jobId}: Job postings, owned by the employer who created them.
 * - /internships/{internshipId}: Internship postings, owned by the employer who created them.
 * - /applications/{applicationId}: Applications for jobs/internships, co-owned by candidate and employer.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Employers can create, update, and delete their own job and internship postings.
 * - Only authenticated users can create applications. Employers and candidates can list applications for their respective posts/profiles.
 * - Data validation is minimized to accelerate prototyping. Focus is on authorization.
 *
 * Denormalization for Authorization:
 * - The `Job`, `Internship`, and `Application` entities include an `employerId` field to simplify ownership checks.
 * - The `Application` entity includes `candidateId` and `postId` fields to allow both candidates and employers to list relevant applications.
 *
 * Structural Segregation:
 * - All data is stored in separate collections based on its purpose, enhancing security and query performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure candidate profiles, ensuring only the owner can read and write.
     * @path /candidates/{userId}
     * @allow (read, write) Authenticated user with matching userId.
     *  - Example: A candidate with UID 'user123' attempts to read their profile.
     *  - Example: A candidate with UID 'user123' attempts to update their profile.
     * @deny (read, write) Any other user attempting to access the profile.
     *  - Example: A candidate with UID 'user456' attempts to read the profile of 'user123'.
     * @principle Enforces document ownership for reads and writes.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure employer profiles, ensuring only the owner can read and write.
     * @path /employers/{userId}
     * @allow (read, write) Authenticated user with matching userId.
     *  - Example: An employer with UID 'employer789' attempts to read their profile.
     *  - Example: An employer with UID 'employer789' attempts to update their profile.
     * @deny (read, write) Any other user attempting to access the profile.
     *  - Example: A candidate attempts to read an employer's profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure institute profiles, ensuring only the owner can read and write.
     * @path /institutes/{userId}
     * @allow (read, write) Authenticated user with matching userId.
     *  - Example: An institute with UID 'institute101' attempts to read their profile.
     *  - Example: An institute with UID 'institute101' attempts to update their profile.
     * @deny (read, write) Any other user attempting to access the profile.
     *  - Example: An employer attempts to read an institute's profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.tpoEmail == request.auth.token.email;
      allow update: if isOwner(userId) && request.resource.data.tpoEmail == request.auth.token.email;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure job postings, ensuring only the owning employer can modify them. Public reads.
     * @path /jobs/{jobId}
     * @allow (get, list) Any user can read the job postings.
     *  - Example: A candidate browsing available jobs.
     *  - Example: An employer viewing job postings.
     * @allow (create) Authenticated employer creating a job posting with correct employerId.
     *  - Example: An employer with UID 'employer789' creates a job with employerId 'employer789'.
     * @allow (update, delete) The owning employer updating or deleting the job posting.
     *  - Example: Employer 'employer789' updates a job they own.
     * @deny (create, update, delete) Any other user attempting to modify the job posting.
     *  - Example: A candidate attempts to update a job posting.
     *  - Example: An employer attempts to update a job posting they don't own.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.employerId == resource.data.employerId && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Secure internship postings, ensuring only the owning employer can modify them. Public reads.
     * @path /internships/{internshipId}
     * @allow (get, list) Any user can read the internship postings.
     *  - Example: A candidate browsing available internships.
     *  - Example: An employer viewing internship postings.
     * @allow (create) Authenticated employer creating an internship posting with correct employerId.
     *  - Example: An employer with UID 'employer789' creates an internship with employerId 'employer789'.
     * @allow (update, delete) The owning employer updating or deleting the internship posting.
     *  - Example: Employer 'employer789' updates an internship they own.
     * @deny (create, update, delete) Any other user attempting to modify the internship posting.
     *  - Example: A candidate attempts to update an internship posting.
     *  - Example: An employer attempts to update an internship posting they don't own.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.employerId == resource.data.employerId && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Secure applications, restricting listing to either the candidate or the employer associated with the application.
     * @path /applications/{applicationId}
     * @allow (create) Authenticated users can create applications.
     *  - Example: A candidate applies for a job.
     * @allow (get) Any authenticated user can retrieve an application.
     * @allow (list) Employers can list applications associated with their job postings. Candidates can list their own applications.
     *  - Example: An employer lists applications for a specific job.
     *  - Example: A candidate lists their applications.
     * @allow (update, delete) No one can update or delete the applications.
     * @deny (update, delete) All update and delete operations are denied.
     * @principle Restricts listing to authorized parties, enforces ownership.
     */
    match /applications/{applicationId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}
/**
 * @fileoverview Firestore Security Rules
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and their associated data, while allowing public read access to job and
 * internship postings.  Write access to postings is restricted to authenticated
 * employers.
 *
 * Data Structure:
 * - /candidates/{userId}: Stores candidate profiles, accessible only to the
 *   profile owner.
 * - /candidates/{userId}/jobApplications/{jobId}: Stores job applications
 *   submitted by a candidate. Accessible only to the candidate.
 * - /candidates/{userId}/internshipApplications/{internshipId}: Stores internship applications
 *   submitted by a candidate. Accessible only to the candidate.
 * - /employers/{userId}: Stores employer profiles, accessible only to the
 *   profile owner.
 * - /institutes/{userId}: Stores institute profiles, accessible only to the
 *   profile owner.
 * - /jobs/{jobId}: Stores job postings, publicly readable but writable only by
 *   the posting employer.
 * - /jobs/{jobId}/applicants/{candidateId}: Stores applicant information for jobs,
 *   writable only by the job posting employer.
 * - /internships/{internshipId}: Stores internship postings, publicly readable
 *   but writable only by the posting employer.
 * - /internships/{internshipId}/applicants/{candidateId}: Stores applicant information for internships,
 *   writable only by the internship posting employer.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Job and internship postings are publicly readable.
 * - Only authenticated employers can create, update, or delete job and
 *   internship postings.
 * - Listing of user documents is disallowed.
 *
 * Denormalization for Authorization:
 * - Job and Internship documents have an `employerId` field to facilitate
 *   ownership checks for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @param userId The user's ID to check against the authenticated user's ID.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param userId The user's ID to check against the authenticated user's ID.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * @param userId The user's ID to check against the authenticated user's ID.
     * @return True if the user is the owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces access control for candidate profiles.
     * @path /candidates/{userId}
     * @allow (read) User with ID 'user123' can read their own profile.
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (read) User with ID 'user456' cannot read the profile of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create a profile for user 'user123'.
     * @deny (update) User with ID 'user456' cannot update the profile of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the profile of user 'user123'.
     * @principle Enforces document ownership for reads and writes.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for job applications submitted by candidates.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (read) User with ID 'user123' can read their own job applications.
     * @allow (create) User with ID 'user123' can create job applications for themselves.
     * @allow (update) User with ID 'user123' can update their own job applications.
     * @allow (delete) User with ID 'user123' can delete their own job applications.
     * @deny (read) User with ID 'user456' cannot read job applications of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create job applications for user 'user123'.
     * @deny (update) User with ID 'user456' cannot update job applications of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete job applications of user 'user123'.
     * @principle Enforces document ownership for reads and writes within a user's data tree.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for internship applications submitted by candidates.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (read) User with ID 'user123' can read their own internship applications.
     * @allow (create) User with ID 'user123' can create internship applications for themselves.
     * @allow (update) User with ID 'user123' can update their own internship applications.
     * @allow (delete) User with ID 'user123' can delete their own internship applications.
     * @deny (read) User with ID 'user456' cannot read internship applications of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create internship applications for user 'user123'.
     * @deny (update) User with ID 'user456' cannot update internship applications of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete internship applications of user 'user123'.
     * @principle Enforces document ownership for reads and writes within a user's data tree.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for employer profiles.
     * @path /employers/{userId}
     * @allow (read) User with ID 'user123' can read their own profile.
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (read) User with ID 'user456' cannot read the profile of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create a profile for user 'user123'.
     * @deny (update) User with ID 'user456' cannot update the profile of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the profile of user 'user123'.
     * @principle Enforces document ownership for reads and writes.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for institute profiles.
     * @path /institutes/{userId}
     * @allow (read) User with ID 'user123' can read their own profile.
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (read) User with ID 'user456' cannot read the profile of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create a profile for user 'user123'.
     * @deny (update) User with ID 'user456' cannot update the profile of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the profile of user 'user123'.
     * @principle Enforces document ownership for reads and writes.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to job postings, but restricts write access to the posting employer.
     * @path /jobs/{jobId}
     * @allow (read) Any user can read job postings.
     * @allow (create) User with ID 'employer123' can create a job posting with employerId 'employer123'.
     * @allow (update) User with ID 'employer123' can update a job posting they own.
     * @allow (delete) User with ID 'employer123' can delete a job posting they own.
     * @deny (create) User with ID 'candidate456' cannot create a job posting.
     * @deny (update) User with ID 'candidate456' cannot update a job posting.
     * @deny (delete) User with ID 'candidate456' cannot delete a job posting.
     * @principle Allows public reads with owner-only writes, enforced via the 'employerId' field.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && request.resource.data.employerId == resource.data.employerId && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Enforces access control for applicants for jobs, allowing only the job posting employer to manage applicants.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (read) The employer of the job can read the applicants.
     * @allow (create) The employer of the job can create applicants.
     * @allow (update) The employer of the job can update applicants.
     * @allow (delete) The employer of the job can delete applicants.
     * @deny (read) A candidate cannot read other applicants for a job.
     * @deny (create) A candidate cannot create applicants for a job.
     * @deny (update) A candidate cannot update applicants for a job.
     * @deny (delete) A candidate cannot delete applicants for a job.
     * @principle Restricts access to job applicants to the employer who created the job posting.
     */
    match /jobs/{jobId}/applicants/{candidateId} {
        allow get: if isSignedIn() && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
        allow list: if isSignedIn() && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
        allow create: if isSignedIn() && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
        allow update: if isSignedIn() && resource != null && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
        allow delete: if isSignedIn() && resource != null && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
    }

    /**
     * @description Allows public read access to internship postings, but restricts write access to the posting employer.
     * @path /internships/{internshipId}
     * @allow (read) Any user can read internship postings.
     * @allow (create) User with ID 'employer123' can create an internship posting with employerId 'employer123'.
     * @allow (update) User with ID 'employer123' can update an internship posting they own.
     * @allow (delete) User with ID 'employer123' can delete an internship posting they own.
     * @deny (create) User with ID 'candidate456' cannot create an internship posting.
     * @deny (update) User with ID 'candidate456' cannot update an internship posting.
     * @deny (delete) User with ID 'candidate456' cannot delete an internship posting.
     * @principle Allows public reads with owner-only writes, enforced via the 'employerId' field.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && request.resource.data.employerId == resource.data.employerId && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Enforces access control for applicants for internships, allowing only the internship posting employer to manage applicants.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (read) The employer of the internship can read the applicants.
     * @allow (create) The employer of the internship can create applicants.
     * @allow (update) The employer of the internship can update applicants.
     * @allow (delete) The employer of the internship can delete applicants.
     * @deny (read) A candidate cannot read other applicants for an internship.
     * @deny (create) A candidate cannot create applicants for an internship.
     * @deny (update) A candidate cannot update applicants for an internship.
     * @deny (delete) A candidate cannot delete applicants for an internship.
     * @principle Restricts access to internship applicants to the employer who created the internship posting.
     */
    match /internships/{internshipId}/applicants/{candidateId} {
        allow get: if isSignedIn() && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
        allow list: if isSignedIn() && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
        allow create: if isSignedIn() && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
        allow update: if isSignedIn() && resource != null && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
        allow delete: if isSignedIn() && resource != null && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
    }
  }
}
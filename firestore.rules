/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and their related data,
 *              while allowing public read access to job and internship postings.
 *
 * Data Structure:
 * - User profiles (candidate, employer, institute) are stored in separate top-level collections,
 *   each with documents identified by the user's UID.
 * - Candidate's job/internship applications are stored as subcollections under their profile.
 * - Job and internship postings are stored in top-level collections.
 * - Applicants for jobs/internships are stored as subcollections under the respective job/internship posting.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Job and internship postings are publicly readable but only modifiable by their owners (employers).
 * - Listing of user profiles is disallowed for privacy.
 * - By default, if the relationship between two entities is not explicitly defined, access is denied.
 *
 * Denormalization for Authorization:
 * - Job and Internship documents contain an `employerId` field, which is used to authorize updates and deletes.
 *
 * Structural Segregation:
 * - Public job/internship postings are stored in top-level collections separate from user profiles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for candidate profiles.
     * @path /candidates/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - A user can read, update, and delete their own profile.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (get, update, delete) - A user cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for candidate's job applications.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create) - A user can create a job application under their profile.
     * @allow (get, update, delete) - A user can read, update, and delete their own job applications.
     * @deny (create) - A user cannot create a job application for another user.
     * @deny (get, update, delete) - A user cannot read, update, or delete another user's job applications.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for candidate's internship applications.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (create) - A user can create an internship application under their profile.
     * @allow (get, update, delete) - A user can read, update, and delete their own internship applications.
     * @deny (create) - A user cannot create an internship application for another user.
     * @deny (get, update, delete) - A user cannot read, update, or delete another user's internship applications.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for employer profiles.
     * @path /employers/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - A user can read, update, and delete their own profile.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (get, update, delete) - A user cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for institute profiles.
     * @path /institutes/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - A user can read, update, and delete their own profile.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (get, update, delete) - A user cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) - Anyone can read job postings.
     * @allow (create) - An employer can create a job posting if the employerId matches their auth UID.
     * @allow (update, delete) - Only the employer who created the job posting can update or delete it.
     * @deny (create) - A user cannot create a job posting for another employer.
     * @deny (update, delete) - A user cannot update or delete a job posting they don't own.
     * @principle Allows public read access with owner-only writes.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
    }

    /**
     * @description Rules for job applicants.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (create) - Allow to create applicants document under job postings
     * @allow (get, update, delete) - Only the employer who owns the job posting can read, update, or delete applicants.
     * @deny (create) - A user cannot create a applicant for another job.
     * @deny (get, update, delete) - A user cannot read, update, or delete a applicant they don't own.
     * @principle Allows public read access with owner-only writes.
     */
     match /jobs/{jobId}/applicants/{candidateId} {
        allow get: if get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
        allow list: if get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
        allow create: if isSignedIn() && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
        allow update: if isSignedIn() && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid && resource != null;
        allow delete: if isSignedIn() && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid && resource != null;
    }

    /**
     * @description Rules for internship postings.
     * @path /internships/{internshipId}
     * @allow (get, list) - Anyone can read internship postings.
     * @allow (create) - An employer can create an internship posting if the employerId matches their auth UID.
     * @allow (update, delete) - Only the employer who created the internship posting can update or delete it.
     * @deny (create) - A user cannot create an internship posting for another employer.
     * @deny (update, delete) - A user cannot update or delete an internship posting they don't own.
     * @principle Allows public read access with owner-only writes.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
    }

    /**
     * @description Rules for internship applicants.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (create) - Allow to create applicants document under internship postings
     * @allow (get, update, delete) - Only the employer who owns the internship posting can read, update, or delete applicants.
     * @deny (create) - A user cannot create a applicant for another internship.
     * @deny (get, update, delete) - A user cannot read, update, or delete a applicant they don't own.
     * @principle Allows public read access with owner-only writes.
     */
     match /internships/{internshipId}/applicants/{candidateId} {
        allow get: if get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
        allow list: if get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
        allow create: if isSignedIn() && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
        allow update: if isSignedIn() && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid && resource != null;
        allow delete: if isSignedIn() && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid && resource != null;
    }
  }
}
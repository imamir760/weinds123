rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure candidate profiles. Only the authenticated user can manage their own profile.
     * @path /candidates/{userId}
     * @allow (create, update, delete) User with UID 'userId' can modify their own profile.
     * @deny (create, update, delete) User with UID other than 'userId' attempts to modify this profile.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure job applications submitted by a candidate. Only the candidate can manage their own applications.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create, update, delete) User with UID 'userId' can modify their own job applications.
     * @deny (create, update, delete) User with UID other than 'userId' attempts to modify these job applications.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

     /**
      * @description Secure internship applications submitted by a candidate. Only the candidate can manage their own applications.
      * @path /candidates/{userId}/internshipApplications/{internshipId}
      * @allow (create, update, delete) User with UID 'userId' can modify their own internship applications.
      * @deny (create, update, delete) User with UID other than 'userId' attempts to modify these internship applications.
      * @principle Enforces document ownership for writes.
      */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure employer profiles. Only the authenticated employer user can manage their own profile.
     * @path /employers/{userId}
     * @allow (create, update, delete) User with UID 'userId' can modify their own profile.
     * @deny (create, update, delete) User with UID other than 'userId' attempts to modify this profile.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure institute profiles. Only the authenticated TPO user can manage their own profile.
     * @path /institutes/{userId}
     * @allow (create, update, delete) User with UID 'userId' can modify their own profile.
     * @deny (create, update, delete) User with UID other than 'userId' attempts to modify this profile.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure job postings. Only the posting's employer can manage it.
     * @path /jobs/{jobId}
     * @allow (create, update, delete) Employer with employerId equal to the job's employerId can manage this posting.
     * @deny (create, update, delete) Other users cannot manage this posting.
     * @principle Enforces document ownership for writes.
     */
    match /jobs/{jobId} {
      function isEmployer() {
        return request.auth.uid == resource.data.employerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
       function isCreatingAsEmployer() {
        return request.auth.uid == request.resource.data.employerId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isCreatingAsEmployer();
      allow update: if isSignedIn() && isEmployer();
      allow delete: if isSignedIn() && isEmployer();
    }

    /**
     * @description Secure applicants for a specific job.
     * @path /jobs/{jobId}/applicants/{candidateId}
     */
    match /jobs/{jobId}/applicants/{candidateId} {
      function isOwner(candidateId) {
        return request.auth.uid == candidateId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(candidateId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(candidateId) && request.auth.uid == candidateId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure internship postings. Only the posting's employer can manage it.
     * @path /internships/{internshipId}
     * @allow (create, update, delete) Employer with employerId equal to the internship's employerId can manage this posting.
     * @deny (create, update, delete) Other users cannot manage this posting.
     * @principle Enforces document ownership for writes.
     */
    match /internships/{internshipId} {
      function isEmployer() {
        return request.auth.uid == resource.data.employerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
       function isCreatingAsEmployer() {
        return request.auth.uid == request.resource.data.employerId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isCreatingAsEmployer();
      allow update: if isSignedIn() && isEmployer();
      allow delete: if isSignedIn() && isEmployer();
    }

    /**
     * @description Secure applicants for a specific internship.
     * @path /internships/{internshipId}/applicants/{candidateId}
     */
    match /internships/{internshipId}/applicants/{candidateId} {
      function isOwner(candidateId) {
        return request.auth.uid == candidateId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(candidateId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(candidateId) && request.auth.uid == candidateId;
      allow update: if false;
      allow delete: if false;
    }
  }
}
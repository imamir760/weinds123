/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and public read access with owner-only writes for job and internship postings.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profiles, accessible only by the owning user.
 * - /employers/{userId}: Employer profiles, accessible only by the owning user.
 * - /institutes/{userId}: Institute profiles, accessible only by the owning user.
 * - /jobs/{jobId}: Job postings, publicly readable, writable only by the owning employer.
 * - /internships/{internshipId}: Internship postings, publicly readable, writable only by the owning employer.
 * - /applications/{applicationId}: Applications submitted by candidates, writable by candidates.
 *
 * Key Security Decisions:
 * - User profiles (candidate, employer, institute) are strictly private and only accessible to the owning user.
 * - Job and internship postings are publicly readable but only writable by the creator.
 * - Listing of user profiles is disallowed for privacy.
 * - Applications can be created by candidates.
 *
 * Denormalization for Authorization:
 * - Jobs and internships require an `employerId` field to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for candidate profiles.
     * @path /candidates/{userId}
     * @allow (create, update, delete) User with matching {userId} can modify their profile.
     * @deny (create, update, delete) User with mismatched {userId} cannot modify another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      // Read permissions: only the owner can read their profile
      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing all candidates for privacy.

      // Write permissions: only the owner can create, update, or delete their profile
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for employer profiles.
     * @path /employers/{userId}
     * @allow (create, update, delete) User with matching {userId} can modify their profile.
     * @deny (create, update, delete) User with mismatched {userId} cannot modify another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      // Read permissions: only the owner can read their profile
      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing all employers for privacy.

      // Write permissions: only the owner can create, update, or delete their profile
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for institute profiles.
     * @path /institutes/{userId}
     * @allow (create, update, delete) User with matching {userId} can modify their profile.
     * @deny (create, update, delete) User with mismatched {userId} cannot modify another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      // Read permissions: only the owner can read their profile
      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing all institutes for privacy.

      // Write permissions: only the owner can create, update, or delete their profile
      allow create: if isOwner(userId) && request.resource.data.tpoEmail == request.auth.token.email;
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access for jobs, with owner-only writes.
     * @path /jobs/{jobId}
     * @allow (get, list) Any user can read job postings.
     * @allow (create) Employer with matching employerId can create a job.
     * @allow (update, delete) Employer with matching employerId can modify the job.
     * @deny (create, update, delete) Non-employer cannot modify jobs.
     * @principle Allows public reads with owner-only writes.
     */
    match /jobs/{jobId} {
      // Read permissions: allow anyone to read job postings
      allow get, list: if true;

      // Write permissions: only the owner can create, update, or delete
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && isOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Allows public read access for internships, with owner-only writes.
     * @path /internships/{internshipId}
     * @allow (get, list) Any user can read internship postings.
     * @allow (create) Employer with matching employerId can create an internship.
     * @allow (update, delete) Employer with matching employerId can modify the internship.
     * @deny (create, update, delete) Non-employer cannot modify internships.
     * @principle Allows public reads with owner-only writes.
     */
    match /internships/{internshipId} {
      // Read permissions: allow anyone to read internship postings
      allow get, list: if true;

      // Write permissions: only the owner can create, update, or delete
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && isOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Allows candidates to create applications.
     * @path /applications/{applicationId}
     */
    match /applications/{applicationId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the existing owner of the resource.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}
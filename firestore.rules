/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control.
 * It is designed for a rapid prototyping environment where data schemas are actively evolving.
 * Therefore, data validation is relaxed to allow for flexible data shapes.
 *
 * Data Structure:
 * - Users: Stored in `/users/{userId}` with public profile information.
 * - Jobs: Stored in `/jobs/{jobId}` with details about job postings.
 * - Internships: Stored in `/internships/{internshipId}` with details about internship postings.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Jobs and Internships can be read by anyone.
 * - Only the owning employer can create, update, or delete Jobs and Internships.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 * - Jobs and Internships both contain an `employerId` field to directly enforce employer ownership,
 *   avoiding the need for complex lookups.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with uid 'user123' can create /users/user123
     * @allow (get) - User with uid 'user123' can get /users/user123
     * @allow (update) - User with uid 'user123' can update /users/user123
     * @allow (delete) - User with uid 'user123' can delete /users/user123
     * @deny (create) - User with uid 'user456' cannot create /users/user123
     * @deny (get) - User with uid 'user456' cannot get /users/user123
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the requesting user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the requesting user is the owner of an existing document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // No user listing.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages job postings. Anyone can read, but only the owning employer can create, update, or delete.
     * @path /jobs/{jobId}
     * @allow (get) - Any user can read a job posting.
     * @allow (list) - Any user can list job postings.
     * @allow (create) - Employer with uid 'employer123' can create a job with employerId: 'employer123'.
     * @allow (update) - Employer with uid 'employer123' can update a job with employerId: 'employer123'.
     * @allow (delete) - Employer with uid 'employer123' can delete a job with employerId: 'employer123'.
     * @deny (create) - User with uid 'candidate456' cannot create a job with employerId: 'employer123'.
     * @principle Public read, owner-only writes, and validates employerId on create.
     */
    match /jobs/{jobId} {
      // Helper function to check if the requesting user is the owner of the job posting.
      function isJobOwner(employerId) {
        return request.auth != null && request.auth.uid == employerId;
      }

       // Helper function to check if the requesting user is the owner of an existing job posting.
      function isExistingJobOwner(employerId) {
        return isJobOwner(employerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isJobOwner(request.resource.data.employerId);
      allow update: if isExistingJobOwner(resource.data.employerId);
      allow delete: if isExistingJobOwner(resource.data.employerId);
    }

    /**
     * @description Manages internship postings. Anyone can read, but only the owning employer can create, update, or delete.
     * @path /internships/{internshipId}
     * @allow (get) - Any user can read an internship posting.
     * @allow (list) - Any user can list internship postings.
     * @allow (create) - Employer with uid 'employer123' can create an internship with employerId: 'employer123'.
     * @allow (update) - Employer with uid 'employer123' can update an internship with employerId: 'employer123'.
     * @allow (delete) - Employer with uid 'employer123' can delete an internship with employerId: 'employer123'.
     * @deny (create) - User with uid 'candidate456' cannot create an internship with employerId: 'employer123'.
     * @principle Public read, owner-only writes, and validates employerId on create.
     */
    match /internships/{internshipId} {
      // Helper function to check if the requesting user is the owner of the internship posting.
      function isInternshipOwner(employerId) {
        return request.auth != null && request.auth.uid == employerId;
      }

       // Helper function to check if the requesting user is the owner of an existing internship posting.
      function isExistingInternshipOwner(employerId) {
        return isInternshipOwner(employerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isInternshipOwner(request.resource.data.employerId);
      allow update: if isExistingInternshipOwner(resource.data.employerId);
      allow delete: if isExistingInternshipOwner(resource.data.employerId);
    }
  }
}
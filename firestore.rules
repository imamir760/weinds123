rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    match /jobs/{jobId} {
      function isOwner(employerId) {
        return request.auth.uid == employerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.employerId);
      allow update: if isSignedIn() && isOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isOwner(resource.data.employerId);
    }

    match /internships/{internshipId} {
      function isOwner(employerId) {
        return request.auth.uid == employerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.employerId);
      allow update: if isSignedIn() && isOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isOwner(resource.data.employerId);
    }

    match /applications/{applicationId} {
      function isCandidate(candidateId) {
        return request.auth.uid == candidateId;
      }
      function isEmployer(employerId) {
        return request.auth.uid == employerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn() && (isCandidate(resource.data.candidateId) || isEmployer(resource.data.employerId));
      allow create: if isSignedIn() && isCandidate(request.resource.data.candidateId) && request.auth.uid == request.resource.data.candidateId;
      allow update: if isSignedIn() && isEmployer(request.resource.data.employerId);
      allow delete: if false;
    }

    match /skillTestSubmissions/{submissionId} {
      function isCandidate(candidateId) {
        return request.auth.uid == candidateId;
      }
      function isEmployer(employerId) {
        return request.auth.uid == employerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn() && (isCandidate(resource.data.candidateId) || isEmployer(resource.data.employerId));
      allow create: if isSignedIn() && isCandidate(request.resource.data.candidateId);
      allow update, delete: if false;
    }

     match /skillTestReports/{reportId} {
        function isCandidate(candidateId) {
            return request.auth.uid == candidateId;
        }

        function isPostOwner(postId) {
            return request.auth.uid == postId;
        }
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn() && (isCandidate(resource.data.candidateId) || isPostOwner(resource.data.postId));
        allow create, update, delete: if false;
    }

    match /traditionalTests {
        allow list: if false;
        allow get: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}
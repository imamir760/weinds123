/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control system where users can only
 * access their own profiles and associated data. Job and internship postings
 * are publicly readable, but creation, modification, and deletion are
 * restricted to authorized employers. Applications are restricted to the respective users (candidate and employer).
 *
 * Data Structure:
 * - /candidates/{userId}: Stores candidate profile data.
 * - /employers/{userId}: Stores employer profile data.
 * - /institutes/{userId}: Stores institute profile data.
 * - /jobs/{jobId}: Stores job postings.
 * - /internships/{internshipId}: Stores internship postings.
 * - /applications/{applicationId}: Stores job/internship applications
 *
 * Key Security Decisions:
 * - Users (candidates, employers, institutes) can only read and write their own profiles.
 * - Job and internship listings are publicly readable.
 * - Only authenticated employers can create, update, or delete job and internship postings,
 *   and they can only modify postings they own (employerId must match).
 * - Only candidates can create job/internship applications, and only for themselves.
 * - Applications can be read by both the candidate and the employer involved.
 * - Listing of users (candidates, employers, institutes) is disallowed.
 *
 * Denormalization for Authorization:
 * - Jobs and Internships store the employerId directly on the document to avoid
 *   costly `get()` calls to the `/employers/{employerId}` document for
 *   authorization.
 * - Applications store both candidateId and employerId for simplified read authorization.
 *
 * Structural Segregation:
 * - No public vs. private data within the same collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows candidates to manage their own profiles.
     * @path /candidates/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching UID.
     * @allow (get, update, delete) - Authenticated user reads/updates/deletes their own profile with matching UID.
     * @deny (create, update, delete) - Any operation where the authenticated user's UID does not match the requested userId.
     * @deny (list) - Prevents listing all candidate profiles.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows employers to manage their own profiles.
     * @path /employers/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching UID.
     * @allow (get, update, delete) - Authenticated user reads/updates/deletes their own profile with matching UID.
     * @deny (create, update, delete) - Any operation where the authenticated user's UID does not match the requested userId.
     * @deny (list) - Prevents listing all employer profiles.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows institutes to manage their own profiles.
     * @path /institutes/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching UID.
     * @allow (get, update, delete) - Authenticated user reads/updates/deletes their own profile with matching UID.
     * @deny (create, update, delete) - Any operation where the authenticated user's UID does not match the requested userId.
     * @deny (list) - Prevents listing all institute profiles.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to job postings, but restricts write access to authorized employers.
     * @path /jobs/{jobId}
     * @allow (get, list) - Any user can read job postings.
     * @allow (create) - Only authenticated employers can create job postings, and employerId must match their UID.
     * @allow (update, delete) - Only the employer who created the job can update or delete it, employerId must match their UID.
     * @deny (create, update, delete) - Unauthorized users cannot create, update, or delete job postings.
     * @principle Public read with owner-only writes, enforces document ownership for writes.
     */
    match /jobs/{jobId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }
      function isExistingOwner() {
          return isSignedIn() && resource.data.employerId == request.auth.uid;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Allows public read access to internship postings, but restricts write access to authorized employers.
     * @path /internships/{internshipId}
     * @allow (get, list) - Any user can read internship postings.
     * @allow (create) - Only authenticated employers can create internship postings, and employerId must match their UID.
     * @allow (update, delete) - Only the employer who created the internship can update or delete it, employerId must match their UID.
     * @deny (create, update, delete) - Unauthorized users cannot create, update, or delete internship postings.
     * @principle Public read with owner-only writes, enforces document ownership for writes.
     */
    match /internships/{internshipId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }
      function isExistingOwner() {
        return isSignedIn() && resource.data.employerId == request.auth.uid;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Allows candidates to create applications and employers/candidates to read.
     * @path /applications/{applicationId}
     * @allow (create) - Only a candidate can create an application where candidateId matches their UID.
     * @allow (get) - Either the candidate or the employer involved in the application can read it.
     * @allow (list) - Denied
     * @allow (update, delete) - Denied
     * @deny - Any unauthorized operation.
     * @principle Enforces access control based on application participants.
     */
    match /applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isCandidate(candidateId) {
        return isSignedIn() && request.auth.uid == candidateId;
      }
      function isEmployer(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }
      function canReadApplication() {
        return isSignedIn() && (resource.data.candidateId == request.auth.uid || resource.data.employerId == request.auth.uid);
      }
      function isCreatingCandidateApplication() {
        return isSignedIn() && request.resource.data.candidateId == request.auth.uid;
      }

      allow get: if canReadApplication();
      allow list: if false;
      allow create: if isCreatingCandidateApplication();
      allow update: if false;
      allow delete: if false;
    }
  }
}
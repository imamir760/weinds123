/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model,
 *              granting specific permissions to candidates, employers, and TPOs.
 *              User profiles are secured under their respective user IDs.
 *
 * Data Structure:
 * - /candidates/{userId}: Stores candidate profiles.
 * - /employers/{userId}: Stores employer profiles.
 * - /institutes/{userId}: Stores institute profiles (for TPOs).
 * - /jobs/{jobId}: Stores job postings.
 * - /internships/{internshipId}: Stores internship postings.
 * - /applications/{applicationId}: Stores applications for jobs and internships.
 *
 * Key Security Decisions:
 * - Users can only read their own profile data.
 * - Employers and TPOs have read-only access to candidate profiles via applications.
 * - Job and internship creation is restricted to employers.
 * - Applications can only be created by candidates and are linked to specific job/internship postings.
 *
 * Denormalization for Authorization:
 * - The `Application` entity includes both `candidateId` and `employerId`, allowing
 *   direct authorization checks without additional `get()` calls.
 *
 * Structural Segregation:
 * - User profiles are stored in separate collections based on their roles
 *   (candidates, employers, institutes), ensuring clear access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows candidates to manage their own profiles.
     * @path /candidates/{userId}
     * @allow (get, list) if isSignedIn() && isOwner(userId)
     * @allow (create) if isSignedIn() && request.auth.uid == userId
     * @allow (update, delete) if isSignedIn() && isExistingOwner(userId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create) if !isSignedIn() || request.auth.uid != userId
     * @deny (update, delete) if !isSignedIn() || !isExistingOwner(userId)
     * @principle Enforces document ownership for profile management.
     */
    match /candidates/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows employers to manage their own profiles.
     * @path /employers/{userId}
     * @allow (get, list) if isSignedIn() && isOwner(userId)
     * @allow (create) if isSignedIn() && request.auth.uid == userId
     * @allow (update, delete) if isSignedIn() && isExistingOwner(userId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create) if !isSignedIn() || request.auth.uid != userId
     * @deny (update, delete) if !isSignedIn() || !isExistingOwner(userId)
     * @principle Enforces document ownership for profile management.
     */
    match /employers/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows institutes (TPOs) to manage their own profiles.
     * @path /institutes/{userId}
     * @allow (get, list) if isSignedIn() && isOwner(userId)
     * @allow (create) if isSignedIn() && request.auth.uid == userId
     * @allow (update, delete) if isSignedIn() && isExistingOwner(userId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create) if !isSignedIn() || request.auth.uid != userId
     * @deny (update, delete) if !isSignedIn() || !isExistingOwner(userId)
     * @principle Enforces document ownership for profile management.
     */
    match /institutes/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows employers to create, manage, and list their own job postings.
     * @path /jobs/{jobId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
     * @allow update, delete: if isSignedIn() && isExistingOwnerForJob(resource.data.employerId);
     * @deny create: if !isSignedIn() || request.resource.data.employerId != request.auth.uid;
     * @deny update, delete: if !isSignedIn() || !isExistingOwnerForJob(resource.data.employerId);
     * @principle Enforces ownership for job posting management.
     */
    match /jobs/{jobId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwnerForJob(resource.data.employerId);
    }

    /**
     * @description Allows employers to create, manage, and list their own internship postings.
     * @path /internships/{internshipId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
     * @allow update, delete: if isSignedIn() && isExistingOwnerForInternship(resource.data.employerId);
     * @deny create: if !isSignedIn() || request.resource.data.employerId != request.auth.uid;
     * @deny update, delete: if !isSignedIn() || !isExistingOwnerForInternship(resource.data.employerId);
     * @principle Enforces ownership for internship posting management.
     */
    match /internships/{internshipId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwnerForInternship(resource.data.employerId);
    }

    /**
     * @description Allows candidates to create applications, and employers to view applications related to their jobs/internships.
     * @path /applications/{applicationId}
     * @allow get, list: if isSignedIn() && (request.auth.uid == resource.data.employerId || request.auth.uid == resource.data.candidateId);
     * @allow create: if isSignedIn() && request.auth.uid == request.resource.data.candidateId;
     * @allow update, delete: if false;
     * @deny get, list: if !isSignedIn() || (request.auth.uid != resource.data.employerId && request.auth.uid != resource.data.candidateId);
     * @deny create: if !isSignedIn() || request.auth.uid != request.resource.data.candidateId;
     * @deny update, delete: if true;
     * @principle Restricts application creation to candidates and read access to employers and candidates involved.
     */
    match /applications/{applicationId} {
      allow get, list: if isSignedIn() && (request.auth.uid == resource.data.employerId || request.auth.uid == resource.data.candidateId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.candidateId;
      allow update, delete: if false;
    }

   }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isExistingOwnerForJob(employerId) {
        return request.auth.uid == employerId && resource != null;
    }

    function isExistingOwnerForInternship(employerId) {
        return request.auth.uid == employerId && resource != null;
    }
}
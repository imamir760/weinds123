/**
 * @fileOverview Firestore Security Rules for the platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for profile data
 * (candidates, employers, institutes) and allows public read access to job and
 * internship postings with owner-only write access.  Applications are also protected
 * with owner-only access based on candidateId.
 *
 * Data Structure:
 * - /candidates/{userId}: Stores candidate profile data, accessible only to the
 *   candidate.
 * - /employers/{userId}: Stores employer profile data, accessible only to the
 *   employer.
 * - /institutes/{userId}: Stores institute profile data, accessible only to the
 *   institute.
 * - /jobs/{jobId}: Stores job postings, publicly readable but writable only by the
 *   job poster (employer).
 * - /internships/{internshipId}: Stores internship postings, publicly readable
 *   but writable only by the internship poster (employer).
 * - /applications/{applicationId}: Stores applications. Accessible only to the
 *   candidate.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to job and internship postings.
 * - Default security posture for ambiguous relationships is strict owner-only
 *   access.
 *
 * Denormalization for Authorization:
 * - Job and Internship documents MUST contain an `employerId` field to enable
 *   owner-only write access.
 * - Application documents MUST contain a `candidateId` field to enable
 *   owner-only access.
 *
 * Structural Segregation:
 * - Private user data (profiles) is stored under user-specific paths
 *   (/candidates/{userId}, /employers/{userId}, /institutes/{userId}) to ensure
 *   isolation and prevent unauthorized access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @returns {boolean} True if the user IDs match and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for candidate profiles.
     * @path /candidates/{userId}
     * @allow (create) User 'candidate_abc' can create their own profile.
     * @allow (get) User 'candidate_abc' can read their own profile.
     * @deny (create) User 'candidate_xyz' cannot create a profile for 'candidate_abc'.
     * @deny (update) User 'candidate_xyz' cannot update the profile of 'candidate_abc'.
     * @principle Enforces document ownership for writes and restricts read access to the owner.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email is string;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for employer profiles.
     * @path /employers/{userId}
     * @allow (create) User 'employer_abc' can create their own profile.
     * @allow (get) User 'employer_abc' can read their own profile.
     * @deny (create) User 'employer_xyz' cannot create a profile for 'employer_abc'.
     * @deny (update) User 'employer_xyz' cannot update the profile of 'employer_abc'.
     * @principle Enforces document ownership for writes and restricts read access to the owner.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email is string;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for institute profiles.
     * @path /institutes/{userId}
     * @allow (create) User 'institute_abc' can create their own profile.
     * @allow (get) User 'institute_abc' can read their own profile.
     * @deny (create) User 'institute_xyz' cannot create a profile for 'institute_abc'.
     * @deny (update) User 'institute_xyz' cannot update the profile of 'institute_abc'.
     * @principle Enforces document ownership for writes and restricts read access to the owner.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.tpoEmail is string;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for job postings.
     * @path /jobs/{jobId}
     * @allow (get) Any user can read a job posting.
     * @allow (list) Any user can list job postings.
     * @allow (create) Only the job poster (employer) can create a job posting, and employerId must match the user ID.
     * @allow (update) Only the job poster (employer) can update a job posting, and employerId must match the user ID.
     * @allow (delete) Only the job poster (employer) can delete a job posting, and employerId must match the user ID.
     * @deny (create) User 'candidate_abc' cannot create a job posting.
     * @deny (update) User 'candidate_abc' cannot update a job posting created by 'employer_abc'.
     * @principle Allows public read access while enforcing owner-only write access.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Security rules for internship postings.
     * @path /internships/{internshipId}
     * @allow (get) Any user can read an internship posting.
     * @allow (list) Any user can list internship postings.
     * @allow (create) Only the internship poster (employer) can create an internship posting, and employerId must match the user ID.
     * @allow (update) Only the internship poster (employer) can update an internship posting, and employerId must match the user ID.
     * @allow (delete) Only the internship poster (employer) can delete an internship posting, and employerId must match the user ID.
     * @deny (create) User 'candidate_abc' cannot create an internship posting.
     * @deny (update) User 'candidate_abc' cannot update an internship posting created by 'employer_abc'.
     * @principle Allows public read access while enforcing owner-only write access.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Security rules for applications.
     * @path /applications/{applicationId}
     * @allow (create) A candidate can create an application with their candidateId.
     * @allow (get) A candidate can get their application.
     * @deny (create) A candidate cannot create an application for another candidate.
     * @deny (update) A candidate cannot update another candidate's application.
     * @principle Enforces document ownership based on candidateId.
     */
    match /applications/{applicationId} {
      allow get: if isSignedIn() && resource.data.candidateId == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.candidateId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.candidateId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.candidateId == request.auth.uid;
    }
  }
}
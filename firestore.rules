/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control (RBAC) system where users are assigned roles ('candidate', 'employer', 'tpo').
 * Users can only read/write their own profile data.
 * Employers can only manage their own job/internship postings and the associated applicants.
 *
 * Data Structure:
 * - `/candidates/{userId}`: Stores candidate profiles.
 * - `/candidates/{userId}/jobApplications/{jobId}`: Stores job applications submitted by a candidate.
 * - `/candidates/{userId}/internshipApplications/{internshipId}`: Stores internship applications submitted by a candidate.
 * - `/employers/{userId}`: Stores employer profiles.
 * - `/institutes/{userId}`: Stores institute profiles.
 * - `/jobs/{jobId}`: Stores job postings.
 * - `/jobs/{jobId}/applicants/{candidateId}`: Stores applicants for a specific job.
 * - `/internships/{internshipId}`: Stores internship postings.
 * - `/internships/{internshipId}/applicants/{candidateId}`: Stores applicants for a specific internship.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles (Ownership pattern).
 * - Employers can create, update, and delete their own job postings (Ownership pattern).
 * - Listing all users is disallowed.
 * - All write operations check that the document exists before updating or deleting.
 *
 * Denormalization for Authorization:
 *  - Job and Internship documents store the `employerId` to allow for fast ownership checks without needing to query the `employers` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource, based on the provided userId.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     * @example isOwner('someUserId') will return true if request.auth.uid == 'someUserId'.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the current user is the owner of the resource and if the resource already exists.
      * Used for update and delete operations to prevent acting on non-existent data.
      * @param {string} userId - The user ID to compare against the request's authentication UID.
      * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }


    /**
     * @description Rules for candidate profiles.
     * @path /candidates/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (get) Authenticated user cannot read other user profiles.
     * @deny (create) Authenticated user cannot create other user profiles.
     * @deny (update) Authenticated user cannot update other user profiles.
     * @deny (delete) Authenticated user cannot delete other user profiles.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for candidate job applications.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (get) Authenticated user can read their own job applications.
     * @allow (create) Authenticated user can create their own job applications.
     * @allow (update) Authenticated user can update their own job applications.
     * @allow (delete) Authenticated user can delete their own job applications.
     * @deny (get) Authenticated user cannot read other user job applications.
     * @deny (create) Authenticated user cannot create other user job applications.
     * @deny (update) Authenticated user cannot update other user job applications.
     * @deny (delete) Authenticated user cannot delete other user job applications.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for candidate internship applications.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (get) Authenticated user can read their own internship applications.
     * @allow (create) Authenticated user can create their own internship applications.
     * @allow (update) Authenticated user can update their own internship applications.
     * @allow (delete) Authenticated user can delete their own internship applications.
     * @deny (get) Authenticated user cannot read other user internship applications.
     * @deny (create) Authenticated user cannot create other user internship applications.
     * @deny (update) Authenticated user cannot update other user internship applications.
     * @deny (delete) Authenticated user cannot delete other user internship applications.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for employer profiles.
     * @path /employers/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (get) Authenticated user cannot read other user profiles.
     * @deny (create) Authenticated user cannot create other user profiles.
     * @deny (update) Authenticated user cannot update other user profiles.
     * @deny (delete) Authenticated user cannot delete other user profiles.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for institute profiles.
     * @path /institutes/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (get) Authenticated user cannot read other user profiles.
     * @deny (create) Authenticated user cannot create other user profiles.
     * @deny (update) Authenticated user cannot update other user profiles.
     * @deny (delete) Authenticated user cannot delete other user profiles.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for job postings.
     * @path /jobs/{jobId}
     * @allow (get) Anyone can read job postings.
     * @allow (list) Anyone can list job postings.
     * @allow (create) Only employers can create job postings. The 'employerId' field must match the user ID.
     * @allow (update) Only the employer who created the job posting can update it.
     * @allow (delete) Only the employer who created the job posting can delete it.
     * @deny (create) Non-employers cannot create job postings.
     * @deny (update) Non-employers cannot update job postings.
     * @deny (delete) Non-employers cannot delete job postings.
     * @principle Enforces document ownership for writes. Public read, owner-only write.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.employerId;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
    }

     /**
      * @description Rules for job applicants.
      * @path /jobs/{jobId}/applicants/{candidateId}
      * @allow (get) Only the employer who owns the job can get the applicant data.
      * @allow (list) Only the employer who owns the job can list the applicants.
      * @allow (create) Only the employer who owns the job can create applicant data.
      * @allow (update) Only the employer who owns the job can update applicant data.
      * @allow (delete) Only the employer who owns the job can delete applicant data.
      * @deny (get) Other employers and candidates cannot get the applicant data.
      * @deny (list) Other employers and candidates cannot list the applicants.
      * @deny (create) Other employers and candidates cannot create applicant data.
      * @deny (update) Other employers and candidates cannot update applicant data.
      * @deny (delete) Other employers and candidates cannot delete applicant data.
      * @principle Enforces employer ownership of job and applicant data.
      */
    match /jobs/{jobId}/applicants/{candidateId} {
        allow get: if isSignedIn() && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
        allow list: if isSignedIn() && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
        allow create: if isSignedIn() && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid;
        allow update: if isSignedIn() && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid && resource != null;
        allow delete: if isSignedIn() && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid && resource != null;
    }

    /**
     * @description Rules for internship postings.
     * @path /internships/{internshipId}
     * @allow (get) Anyone can read internship postings.
     * @allow (list) Anyone can list internship postings.
     * @allow (create) Only employers can create internship postings. The 'employerId' field must match the user ID.
     * @allow (update) Only the employer who created the internship posting can update it.
     * @allow (delete) Only the employer who created the internship posting can delete it.
     * @deny (create) Non-employers cannot create internship postings.
     * @deny (update) Non-employers cannot update internship postings.
     * @deny (delete) Non-employers cannot delete internship postings.
     * @principle Enforces document ownership for writes. Public read, owner-only write.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.employerId;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid && resource != null;
    }

    /**
     * @description Rules for internship applicants.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (get) Only the employer who owns the internship can get the applicant data.
     * @allow (list) Only the employer who owns the internship can list the applicants.
     * @allow (create) Only the employer who owns the internship can create applicant data.
     * @allow (update) Only the employer who owns the internship can update applicant data.
     * @allow (delete) Only the employer who owns the internship can delete applicant data.
     * @deny (get) Other employers and candidates cannot get the applicant data.
     * @deny (list) Other employers and candidates cannot list the applicants.
     * @deny (create) Other employers and candidates cannot create applicant data.
     * @deny (update) Other employers and candidates cannot update applicant data.
     * @deny (delete) Other employers and candidates cannot delete applicant data.
     * @principle Enforces employer ownership of internship and applicant data.
     */
    match /internships/{internshipId}/applicants/{candidateId} {
        allow get: if isSignedIn() && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
        allow list: if isSignedIn() && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
        allow create: if isSignedIn() && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid;
        allow update: if isSignedIn() && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid && resource != null;
        allow delete: if isSignedIn() && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid && resource != null;
    }
  }
}
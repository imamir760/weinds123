rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to candidate profiles.
     * @path /candidates/{userId}
     * @allow (create, update, delete) User with matching UID can manage their own profile.
     * @deny (create, update, delete) User attempts to modify another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to job applications submitted by a candidate.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create, update, delete) User with matching UID can manage their own job applications.
     * @deny (create, update, delete) User attempts to modify another user's job applications.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

     /**
     * @description Controls access to internship applications submitted by a candidate.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (create, update, delete) User with matching UID can manage their own internship applications.
     * @deny (create, update, delete) User attempts to modify another user's internship applications.
     * @principle Enforces document ownership for writes.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to employer profiles.
     * @path /employers/{userId}
     * @allow (create, update, delete) User with matching UID can manage their own profile.
     * @deny (create, update, delete) User attempts to modify another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to institute profiles.
     * @path /institutes/{userId}
     * @allow (create, update, delete) User with matching UID can manage their own profile.
     * @deny (create, update, delete) User attempts to modify another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) Public read access for all job postings.
     * @allow (create, update, delete) Only the owning employer can manage their job postings.
     * @deny (create, update, delete) Non-owners attempting to manage job postings.
     * @principle Public read, owner-only writes.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid != null && request.resource.data.employerId == request.auth.uid;
      allow update: if request.auth.uid != null && resource.data.employerId == request.auth.uid;
      allow delete: if request.auth.uid != null && resource.data.employerId == request.auth.uid;
    }

     /**
     * @description Controls access to applicants for a specific job.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (get, list, create, update, delete) Only the owning employer can manage applicants for their job postings.
     * @deny (get, list, create, update, delete) Non-owners attempting to manage applicants.
     */
    match /jobs/{jobId}/applicants/{candidateId} {
        function getJob(jobId) {
            return get(/databases/$(database)/documents/jobs/$(jobId));
        }
        allow get: if request.auth.uid != null && getJob(jobId).data.employerId == request.auth.uid;
        allow list: if request.auth.uid != null && getJob(jobId).data.employerId == request.auth.uid;
        allow create: if request.auth.uid != null && getJob(jobId).data.employerId == request.auth.uid;
        allow update: if request.auth.uid != null && getJob(jobId).data.employerId == request.auth.uid;
        allow delete: if request.auth.uid != null && getJob(jobId).data.employerId == request.auth.uid;
    }

    /**
     * @description Controls access to internship postings.
     * @path /internships/{internshipId}
     * @allow (get, list) Public read access for all internship postings.
     * @allow (create, update, delete) Only the owning employer can manage their internship postings.
     * @deny (create, update, delete) Non-owners attempting to manage internship postings.
     * @principle Public read, owner-only writes.
     */
    match /internships/{internshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid != null && request.resource.data.employerId == request.auth.uid;
      allow update: if request.auth.uid != null && resource.data.employerId == request.auth.uid;
      allow delete: if request.auth.uid != null && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Controls access to applicants for a specific internship.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (get, list, create, update, delete) Only the owning employer can manage applicants for their internship postings.
     * @deny (get, list, create, update, delete) Non-owners attempting to manage applicants.
     */
    match /internships/{internshipId}/applicants/{candidateId} {
        function getInternship(internshipId) {
            return get(/databases/$(database)/documents/internships/$(internshipId));
        }
        allow get: if request.auth.uid != null && getInternship(internshipId).data.employerId == request.auth.uid;
        allow list: if request.auth.uid != null && getInternship(internshipId).data.employerId == request.auth.uid;
        allow create: if request.auth.uid != null && getInternship(internshipId).data.employerId == request.auth.uid;
        allow update: if request.auth.uid != null && getInternship(internshipId).data.employerId == request.auth.uid;
        allow delete: if request.auth.uid != null && getInternship(internshipId).data.employerId == request.auth.uid;
    }
  }
}
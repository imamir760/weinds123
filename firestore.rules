/**
 * @file Firebase Security Rules
 * @description This ruleset enforces a strict user-ownership model for profiles and applications,
 *              and allows public read access to job and internship postings.
 *
 * Data Structure:
 * - /candidates/{userId}: Candidate profiles, owned by the user.
 * - /candidates/{userId}/jobApplications/{jobId}: Job applications submitted by the candidate.
 * - /candidates/{userId}/internshipApplications/{internshipId}: Internship applications submitted by the candidate.
 * - /employers/{userId}: Employer profiles, owned by the user.
 * - /institutes/{userId}: Institute profiles, owned by the user.
 * - /jobs/{jobId}: Publicly readable job postings, owned by the employer who created them.
 * - /jobs/{jobId}/applicants/{candidateId}: Applicants for a specific job.
 * - /internships/{internshipId}: Publicly readable internship postings, owned by the employer who created them.
 * - /internships/{internshipId}/applicants/{candidateId}: Applicants for a specific internship.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed.
 * - Job and internship postings are publicly readable, but only owners can create, update, or delete them.
 * - Nested application and applicant data is strictly controlled by user ownership.
 *
 * Denormalization for Authorization:
 * - Job and Internship documents require an `employerId` field for owner-only write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the existing owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Candidate profiles, owned by the user.
     * @path /candidates/{userId}
     * @allow (create) Signed-in user with UID matching {userId} can create their profile.
     * @allow (get, list, update, delete) Signed-in user with UID matching {userId} can get, list, update and delete their profile.
     * @deny (create) Signed-in user with UID not matching {userId} cannot create the profile.
     * @deny (get, list, update, delete) Signed-in user with UID not matching {userId} cannot get, list, update and delete the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Job applications submitted by the candidate.
     * @path /candidates/{userId}/jobApplications/{jobId}
     * @allow (create) Signed-in user with UID matching {userId} can create an application.
     * @allow (get, list, update, delete) Signed-in user with UID matching {userId} can get, list, update and delete applications.
     * @deny (create) Signed-in user with UID not matching {userId} cannot create the application.
     * @deny (get, list, update, delete) Signed-in user with UID not matching {userId} cannot get, list, update and delete applications.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId}/jobApplications/{jobId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Internship applications submitted by the candidate.
     * @path /candidates/{userId}/internshipApplications/{internshipId}
     * @allow (create) Signed-in user with UID matching {userId} can create an application.
     * @allow (get, list, update, delete) Signed-in user with UID matching {userId} can get, list, update and delete applications.
     * @deny (create) Signed-in user with UID not matching {userId} cannot create the application.
     * @deny (get, list, update, delete) Signed-in user with UID not matching {userId} cannot get, list, update and delete applications.
     * @principle Enforces document ownership for all operations.
     */
    match /candidates/{userId}/internshipApplications/{internshipId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Employer profiles, owned by the user.
     * @path /employers/{userId}
     * @allow (create) Signed-in user with UID matching {userId} can create their profile.
     * @allow (get, list, update, delete) Signed-in user with UID matching {userId} can get, list, update and delete their profile.
     * @deny (create) Signed-in user with UID not matching {userId} cannot create the profile.
     * @deny (get, list, update, delete) Signed-in user with UID not matching {userId} cannot get, list, update and delete the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Institute profiles, owned by the user.
     * @path /institutes/{userId}
     * @allow (create) Signed-in user with UID matching {userId} can create their profile.
     * @allow (get, list, update, delete) Signed-in user with UID matching {userId} can get, list, update and delete their profile.
     * @deny (create) Signed-in user with UID not matching {userId} cannot create the profile.
     * @deny (get, list, update, delete) Signed-in user with UID not matching {userId} cannot get, list, update and delete the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores all job postings. Publicly readable, owner-only writes.
     * @path /jobs/{jobId}
     * @allow (get, list) Anyone can read job postings.
     * @allow (create) Only the job poster can create.
     * @allow (update, delete) Only the job poster can update/delete, must exist.
     * @deny (create) If the 'employerId' doesn't match the user.
     * @deny (update, delete) If the 'employerId' doesn't match the user or the document doesn't exist.
     * @principle Public read, owner-only writes.
     */
    match /jobs/{jobId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Stores applicants for a specific job.
     * @path /jobs/{jobId}/applicants/{candidateId}
     * @allow (create) Any signed-in user can create an applicant entry.
     * @allow (get, list) Any signed-in user can read applicant entries.
     * @allow (update, delete) Only the job poster can update/delete, must exist.
     * @deny (update, delete) If the 'employerId' of the job doesn't match the user or the job document doesn't exist.
     * @principle Public read, employer-only applicant management.
     */
    match /jobs/{jobId}/applicants/{candidateId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update, delete: if isSignedIn() && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid && resource != null;
    }

    /**
     * @description Stores all internship postings. Publicly readable, owner-only writes.
     * @path /internships/{internshipId}
     * @allow (get, list) Anyone can read internship postings.
     * @allow (create) Only the internship poster can create.
     * @allow (update, delete) Only the internship poster can update/delete, must exist.
     * @deny (create) If the 'employerId' doesn't match the user.
     * @deny (update, delete) If the 'employerId' doesn't match the user or the document doesn't exist.
     * @principle Public read, owner-only writes.
     */
    match /internships/{internshipId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Stores applicants for a specific internship.
     * @path /internships/{internshipId}/applicants/{candidateId}
     * @allow (create) Any signed-in user can create an applicant entry.
     * @allow (get, list) Any signed-in user can read applicant entries.
     * @allow (update, delete) Only the internship poster can update/delete, must exist.
     * @deny (update, delete) If the 'employerId' of the internship doesn't match the user or the internship document doesn't exist.
     * @principle Public read, employer-only applicant management.
     */
    match /internships/{internshipId}/applicants/{candidateId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update, delete: if isSignedIn() && get(/databases/$(database)/documents/internships/$(internshipId)).data.employerId == request.auth.uid && resource != null;
    }
  }
}